{
  "files": {
    "src/error/AggregateError.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "0",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'The first error!, The second error!' to be 'The first error!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "87"
          ],
          "coveredBy": [
            "87"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 9
            },
            "start": {
              "column": 76,
              "line": 7
            }
          }
        },
        {
          "id": "1",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'The first error!, The second error!' to be 'The first error!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "87"
          ],
          "coveredBy": [
            "87"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 8
            },
            "start": {
              "column": 12,
              "line": 8
            }
          }
        }
      ],
      "source": "import { GraphQLError } from 'graphql'\n\nexport interface AggregateError extends Error {\n    errors: GraphQLError[]\n}\n\nexport function isAggregateError(object: object): object is AggregateError {\n    return 'errors' in object\n}\n"
    },
    "src/error/DetermineGraphQLOrFetchError.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "2",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "118"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 27
            },
            "start": {
              "column": 70,
              "line": 9
            }
          }
        },
        {
          "id": "3",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "118"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 24
            },
            "start": {
              "column": 12,
              "line": 10
            }
          }
        },
        {
          "id": "4",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "118"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 24
            },
            "start": {
              "column": 12,
              "line": 10
            }
          }
        },
        {
          "id": "5",
          "mutatorName": "LogicalOperator",
          "replacement": "error instanceof Error && error.message || error.message.includes(FETCH_ERROR) || error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED') || error.message.includes('ECONNRESET') || error.message.includes('ETIMEDOUT') || error.message.includes('network timeout') || error.message.includes('invalid redirect URL') || error.message.includes('uri requested responds with a redirect, redirect mode is set to error') || error.message.includes('maximum redirect reached') || error.message.includes('Cannot follow redirect') || error.message.includes('socket hang up')",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "118"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 24
            },
            "start": {
              "column": 12,
              "line": 10
            }
          }
        },
        {
          "id": "6",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 23,
          "static": false,
          "killedBy": [
            "118"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "118"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 11
            },
            "start": {
              "column": 12,
              "line": 10
            }
          }
        },
        {
          "id": "7",
          "mutatorName": "LogicalOperator",
          "replacement": "error instanceof Error || error.message",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 23,
          "static": false,
          "killedBy": [
            "118"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "118"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 11
            },
            "start": {
              "column": 12,
              "line": 10
            }
          }
        },
        {
          "id": "8",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 53,
              "line": 24
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "9",
          "mutatorName": "LogicalOperator",
          "replacement": "(error.message.includes(FETCH_ERROR) || error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED') || error.message.includes('ECONNRESET') || error.message.includes('ETIMEDOUT') || error.message.includes('network timeout') || error.message.includes('invalid redirect URL') || error.message.includes('uri requested responds with a redirect, redirect mode is set to error') || error.message.includes('maximum redirect reached') || error.message.includes('Cannot follow redirect')) && error.message.includes('socket hang up')",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 53,
              "line": 24
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "10",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 61,
              "line": 23
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "11",
          "mutatorName": "LogicalOperator",
          "replacement": "(error.message.includes(FETCH_ERROR) || error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED') || error.message.includes('ECONNRESET') || error.message.includes('ETIMEDOUT') || error.message.includes('network timeout') || error.message.includes('invalid redirect URL') || error.message.includes('uri requested responds with a redirect, redirect mode is set to error') || error.message.includes('maximum redirect reached')) && error.message.includes('Cannot follow redirect')",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 61,
              "line": 23
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "12",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 63,
              "line": 22
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "13",
          "mutatorName": "LogicalOperator",
          "replacement": "(error.message.includes(FETCH_ERROR) || error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED') || error.message.includes('ECONNRESET') || error.message.includes('ETIMEDOUT') || error.message.includes('network timeout') || error.message.includes('invalid redirect URL') || error.message.includes('uri requested responds with a redirect, redirect mode is set to error')) && error.message.includes('maximum redirect reached')",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 63,
              "line": 22
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "14",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 21
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "15",
          "mutatorName": "LogicalOperator",
          "replacement": "(error.message.includes(FETCH_ERROR) || error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED') || error.message.includes('ECONNRESET') || error.message.includes('ETIMEDOUT') || error.message.includes('network timeout') || error.message.includes('invalid redirect URL')) && error.message.includes('uri requested responds with a redirect, redirect mode is set to error')",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 21
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "16",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 18
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "17",
          "mutatorName": "LogicalOperator",
          "replacement": "(error.message.includes(FETCH_ERROR) || error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED') || error.message.includes('ECONNRESET') || error.message.includes('ETIMEDOUT') || error.message.includes('network timeout')) && error.message.includes('invalid redirect URL')",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 18
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "18",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 17
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "19",
          "mutatorName": "LogicalOperator",
          "replacement": "(error.message.includes(FETCH_ERROR) || error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED') || error.message.includes('ECONNRESET') || error.message.includes('ETIMEDOUT')) && error.message.includes('network timeout')",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 17
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "20",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 16
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "21",
          "mutatorName": "LogicalOperator",
          "replacement": "(error.message.includes(FETCH_ERROR) || error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED') || error.message.includes('ECONNRESET')) && error.message.includes('ETIMEDOUT')",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 16
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "22",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 15
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "23",
          "mutatorName": "LogicalOperator",
          "replacement": "(error.message.includes(FETCH_ERROR) || error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED')) && error.message.includes('ECONNRESET')",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 15
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "24",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 14
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "25",
          "mutatorName": "LogicalOperator",
          "replacement": "(error.message.includes(FETCH_ERROR) || error.message.includes('fetch failed')) && error.message.includes('ECONNREFUSED')",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 14
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "26",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 13
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "27",
          "mutatorName": "LogicalOperator",
          "replacement": "error.message.includes(FETCH_ERROR) && error.message.includes('fetch failed')",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 13
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "28",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 13
            },
            "start": {
              "column": 36,
              "line": 13
            }
          }
        },
        {
          "id": "29",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "116"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 14
            },
            "start": {
              "column": 36,
              "line": 14
            }
          }
        },
        {
          "id": "30",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "116"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 15
            },
            "start": {
              "column": 36,
              "line": 15
            }
          }
        },
        {
          "id": "31",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "116"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 16
            },
            "start": {
              "column": 36,
              "line": 16
            }
          }
        },
        {
          "id": "32",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "116"
          ],
          "location": {
            "end": {
              "column": 53,
              "line": 17
            },
            "start": {
              "column": 36,
              "line": 17
            }
          }
        },
        {
          "id": "33",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "110",
            "111",
            "112",
            "113",
            "114",
            "116"
          ],
          "location": {
            "end": {
              "column": 58,
              "line": 18
            },
            "start": {
              "column": 36,
              "line": 18
            }
          }
        },
        {
          "id": "34",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "111",
            "112",
            "113",
            "114",
            "116"
          ],
          "location": {
            "end": {
              "column": 88,
              "line": 20
            },
            "start": {
              "column": 17,
              "line": 20
            }
          }
        },
        {
          "id": "35",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "112",
            "113",
            "114",
            "116"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 22
            },
            "start": {
              "column": 36,
              "line": 22
            }
          }
        },
        {
          "id": "36",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "113",
            "114",
            "116"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 23
            },
            "start": {
              "column": 36,
              "line": 23
            }
          }
        },
        {
          "id": "37",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "114",
            "116"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 24
            },
            "start": {
              "column": 36,
              "line": 24
            }
          }
        }
      ],
      "source": "import { FETCH_ERROR, GRAPHQL_ERROR } from '@dreamit/graphql-server-base'\n\n/**\n * Determines if an error is a GraphQLError or\n * FetchError using the information in the error message\n * @param {unknown} error - An error\n * @returns {string} FETCH_ERROR if error is a FetchError, GraphQLError otherwise\n */\nexport function determineGraphQLOrFetchError(error: unknown): string {\n    return error instanceof Error &&\n        error.message &&\n        (error.message.includes(FETCH_ERROR) ||\n            error.message.includes('fetch failed') ||\n            error.message.includes('ECONNREFUSED') ||\n            error.message.includes('ECONNRESET') ||\n            error.message.includes('ETIMEDOUT') ||\n            error.message.includes('network timeout') ||\n            error.message.includes('invalid redirect URL') ||\n            error.message.includes(\n                'uri requested responds with a redirect, redirect mode is set to error',\n            ) ||\n            error.message.includes('maximum redirect reached') ||\n            error.message.includes('Cannot follow redirect') ||\n            error.message.includes('socket hang up'))\n        ? FETCH_ERROR\n        : GRAPHQL_ERROR\n}\n"
    },
    "src/error/DetermineValidationOrIntrospectionDisabledError.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "38",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'IntrospectionDisabledError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "96"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "39",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'IntrospectionDisabledError' to be 'ValidationError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 9,
          "static": false,
          "killedBy": [
            "98"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 19
            },
            "start": {
              "column": 12,
              "line": 16
            }
          }
        },
        {
          "id": "40",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'ValidationError' to be 'IntrospectionDisabledError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "96"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 19
            },
            "start": {
              "column": 12,
              "line": 16
            }
          }
        },
        {
          "id": "41",
          "mutatorName": "LogicalOperator",
          "replacement": "error instanceof Error || error.message.includes('introspection') && error.message.includes('disabled') || error.message.includes('__Directive')",
          "statusReason": "expected 'IntrospectionDisabledError' to be 'ValidationError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 9,
          "static": false,
          "killedBy": [
            "98"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 19
            },
            "start": {
              "column": 12,
              "line": 16
            }
          }
        },
        {
          "id": "42",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'IntrospectionDisabledError' to be 'ValidationError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 9,
          "static": false,
          "killedBy": [
            "98"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 19
            },
            "start": {
              "column": 10,
              "line": 17
            }
          }
        },
        {
          "id": "43",
          "mutatorName": "LogicalOperator",
          "replacement": "error.message.includes('introspection') && error.message.includes('disabled') && error.message.includes('__Directive')",
          "statusReason": "expected 'ValidationError' to be 'IntrospectionDisabledError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "96"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 19
            },
            "start": {
              "column": 10,
              "line": 17
            }
          }
        },
        {
          "id": "44",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'ValidationError' to be 'IntrospectionDisabledError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "96"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 18
            },
            "start": {
              "column": 11,
              "line": 17
            }
          }
        },
        {
          "id": "45",
          "mutatorName": "LogicalOperator",
          "replacement": "error.message.includes('introspection') || error.message.includes('disabled')",
          "statusReason": "expected 'IntrospectionDisabledError' to be 'ValidationError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [
            "100"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 18
            },
            "start": {
              "column": 11,
              "line": 17
            }
          }
        },
        {
          "id": "46",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'IntrospectionDisabledError' to be 'ValidationError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 12,
          "static": false,
          "killedBy": [
            "101"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 17
            },
            "start": {
              "column": 34,
              "line": 17
            }
          }
        },
        {
          "id": "47",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'IntrospectionDisabledError' to be 'ValidationError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "100"
          ],
          "coveredBy": [
            "26",
            "96",
            "100"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 18
            },
            "start": {
              "column": 36,
              "line": 18
            }
          }
        },
        {
          "id": "48",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'IntrospectionDisabledError' to be 'ValidationError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "98"
          ],
          "coveredBy": [
            "9",
            "10",
            "27",
            "29",
            "54",
            "97",
            "98",
            "99",
            "100",
            "101"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 19
            },
            "start": {
              "column": 36,
              "line": 19
            }
          }
        }
      ],
      "source": "import {\n    INTROSPECTION_DISABLED_ERROR,\n    VALIDATION_ERROR,\n} from '@dreamit/graphql-server-base'\n\n/**\n * Determines if an error is a ValidationError or\n * IntrospectionDisabledError using the information in the error message\n * @param {unknown} error - An error\n * @returns {string} INTROSPECTION_DISABLED_ERROR if error is an IntrospectionDisabledError,\n * ValidationError otherwise\n */\nexport function determineValidationOrIntrospectionDisabledError(\n    error: unknown,\n): string {\n    return error instanceof Error &&\n        ((error.message.includes('introspection') &&\n            error.message.includes('disabled')) ||\n            error.message.includes('__Directive'))\n        ? INTROSPECTION_DISABLED_ERROR\n        : VALIDATION_ERROR\n}\n"
    },
    "src/error/RemoveValidationRecommendationsFromErrors.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "49",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 49,
              "line": 4
            },
            "start": {
              "column": 35,
              "line": 4
            }
          }
        },
        {
          "id": "50",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "26",
            "27",
            "29",
            "54"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 32,
              "line": 8
            }
          }
        },
        {
          "id": "51",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Cannot query field \"userIdABC\" on typ…' to be 'Cannot query field \"userIdABC\" on typ…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "26",
            "27",
            "29",
            "54"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 19
            },
            "start": {
              "column": 53,
              "line": 9
            }
          }
        },
        {
          "id": "52",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '' to be 'GraphQL introspection has been disabl…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "26"
          ],
          "coveredBy": [
            "9",
            "26",
            "27",
            "29",
            "54"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 10
            },
            "start": {
              "column": 13,
              "line": 10
            }
          }
        },
        {
          "id": "53",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Cannot query field \"userIdABC\" on typ…' to be 'Cannot query field \"userIdABC\" on typ…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "26",
            "27",
            "29",
            "54"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 10
            },
            "start": {
              "column": 13,
              "line": 10
            }
          }
        },
        {
          "id": "54",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Cannot query field \"userIdABC\" on typ…' to be 'Cannot query field \"userIdABC\" on typ…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 18
            },
            "start": {
              "column": 67,
              "line": 10
            }
          }
        },
        {
          "id": "55",
          "mutatorName": "MethodExpression",
          "replacement": "validationError.message",
          "statusReason": "expected 'Cannot query field \"userIdABC\" on typ…' to be 'Cannot query field \"userIdABC\" on typ…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 17
            },
            "start": {
              "column": 39,
              "line": 11
            }
          }
        },
        {
          "id": "56",
          "mutatorName": "MethodExpression",
          "replacement": "Math.min(0, validationError.message.indexOf(recommendationText))",
          "statusReason": "expected '' to be 'Cannot query field \"userIdABC\" on typ…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 16
            },
            "start": {
              "column": 17,
              "line": 13
            }
          }
        }
      ],
      "source": "// Removes validation recommendations matching the defined recommendation text\nimport { GraphQLError } from 'graphql'\n\nexport const recommendationText = 'Did you mean'\n\nexport function removeValidationRecommendationsFromErrors(\n    validationErrors: ReadonlyArray<GraphQLError>,\n): ReadonlyArray<GraphQLError> {\n    for (const validationError of validationErrors) {\n        if (validationError.message.includes(recommendationText)) {\n            validationError.message = validationError.message.slice(\n                0,\n                Math.max(\n                    0,\n                    validationError.message.indexOf(recommendationText),\n                ),\n            )\n        }\n    }\n    return validationErrors\n}\n"
    },
    "src/logger/CreateLogEntry.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "57",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "35"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 75
            },
            "start": {
              "column": 72,
              "line": 10
            }
          }
        },
        {
          "id": "58",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'A info message' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "35"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 28
            },
            "start": {
              "column": 32,
              "line": 22
            }
          }
        },
        {
          "id": "59",
          "mutatorName": "LogicalOperator",
          "replacement": "loglevel && LogLevel.info",
          "statusReason": "expected 'INFO' to be 'DEBUG' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "37"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 23
            },
            "start": {
              "column": 16,
              "line": 23
            }
          }
        },
        {
          "id": "60",
          "mutatorName": "LogicalOperator",
          "replacement": "loggerName && 'fallback-logger'",
          "statusReason": "expected undefined to be 'fallback-logger' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 14,
          "static": false,
          "killedBy": [
            "44"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 24
            },
            "start": {
              "column": 17,
              "line": 24
            }
          }
        },
        {
          "id": "61",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'fallback-logger' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "44"
          ],
          "coveredBy": [
            "44",
            "45",
            "46",
            "47"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 24
            },
            "start": {
              "column": 31,
              "line": 24
            }
          }
        },
        {
          "id": "62",
          "mutatorName": "LogicalOperator",
          "replacement": "serviceName && 'fallback-service'",
          "statusReason": "expected 'fallback-service' to be 'myTestService' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "35"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 26
            },
            "start": {
              "column": 22,
              "line": 26
            }
          }
        },
        {
          "id": "63",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'fallback-service' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "44"
          ],
          "coveredBy": [
            "44",
            "45"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 26
            },
            "start": {
              "column": 37,
              "line": 26
            }
          }
        },
        {
          "id": "64",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'serviceName')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "35"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 32
            },
            "start": {
              "column": 9,
              "line": 32
            }
          }
        },
        {
          "id": "65",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'myTestService' to be 'myRemoteService' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 17,
          "static": false,
          "killedBy": [
            "43"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 32
            },
            "start": {
              "column": 9,
              "line": 32
            }
          }
        },
        {
          "id": "66",
          "mutatorName": "LogicalOperator",
          "replacement": "contextRecord || contextRecord.serviceName",
          "statusReason": "Cannot read properties of undefined (reading 'serviceName')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "35"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 32
            },
            "start": {
              "column": 9,
              "line": 32
            }
          }
        },
        {
          "id": "67",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'myTestService' to be 'myRemoteService' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "43"
          ],
          "coveredBy": [
            "43",
            "46"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 40
            },
            "start": {
              "column": 53,
              "line": 32
            }
          }
        },
        {
          "id": "68",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'WARN' to be 'ERROR' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "46"
          ],
          "coveredBy": [
            "43",
            "46"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 36
            },
            "start": {
              "column": 13,
              "line": 35
            }
          }
        },
        {
          "id": "69",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'ERROR' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "46"
          ],
          "coveredBy": [
            "43",
            "46"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 36
            },
            "start": {
              "column": 13,
              "line": 35
            }
          }
        },
        {
          "id": "70",
          "mutatorName": "LogicalOperator",
          "replacement": "loglevel === LogLevel.error || contextRecord.serviceName !== serviceName",
          "statusReason": "expected 'WARN' to be 'ERROR' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "46"
          ],
          "coveredBy": [
            "43",
            "46"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 36
            },
            "start": {
              "column": 13,
              "line": 35
            }
          }
        },
        {
          "id": "71",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'WARN' to be 'INFO' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "46"
          ],
          "coveredBy": [
            "43",
            "46"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 35
            },
            "start": {
              "column": 13,
              "line": 35
            }
          }
        },
        {
          "id": "72",
          "mutatorName": "EqualityOperator",
          "replacement": "loglevel !== LogLevel.error",
          "statusReason": "expected 'ERROR' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "46"
          ],
          "coveredBy": [
            "43",
            "46"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 35
            },
            "start": {
              "column": 13,
              "line": 35
            }
          }
        },
        {
          "id": "73",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'WARN' to be 'ERROR' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "46"
          ],
          "coveredBy": [
            "43",
            "46"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 36
            },
            "start": {
              "column": 13,
              "line": 36
            }
          }
        },
        {
          "id": "74",
          "mutatorName": "EqualityOperator",
          "replacement": "contextRecord.serviceName === serviceName",
          "statusReason": "expected 'ERROR' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "46"
          ],
          "coveredBy": [
            "43",
            "46"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 36
            },
            "start": {
              "column": 13,
              "line": 36
            }
          }
        },
        {
          "id": "75",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'ERROR' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "46"
          ],
          "coveredBy": [
            "43",
            "46"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 39
            },
            "start": {
              "column": 11,
              "line": 37
            }
          }
        },
        {
          "id": "76",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'name')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "35"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 42
            },
            "start": {
              "column": 9,
              "line": 42
            }
          }
        },
        {
          "id": "77",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'A FetchError message' to be 'A FetchError message An error occurre…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 42
            },
            "start": {
              "column": 9,
              "line": 42
            }
          }
        },
        {
          "id": "78",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'A FetchError message' to be 'A FetchError message An error occurre…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "63",
            "76"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 73
            },
            "start": {
              "column": 16,
              "line": 42
            }
          }
        },
        {
          "id": "79",
          "mutatorName": "LogicalOperator",
          "replacement": "customErrorName && error.name",
          "statusReason": "expected 'GraphQLError' to be 'MyCustomError' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 9,
          "static": false,
          "killedBy": [
            "42"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "63",
            "76"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 43
            },
            "start": {
              "column": 30,
              "line": 43
            }
          }
        },
        {
          "id": "80",
          "mutatorName": "MethodExpression",
          "replacement": "`${logEntry.message} ${sanitizeMessage(error.message)}`",
          "statusReason": "expected ' `CustomerPayload` is an extension ty…' to be '`CustomerPayload` is an extension type' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [
            "45"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "63",
            "76"
          ],
          "location": {
            "end": {
              "column": 75,
              "line": 45
            },
            "start": {
              "column": 13,
              "line": 45
            }
          }
        },
        {
          "id": "81",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '' to be 'A FetchError message An error occurre…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "63",
            "76"
          ],
          "location": {
            "end": {
              "column": 68,
              "line": 45
            },
            "start": {
              "column": 13,
              "line": 45
            }
          }
        },
        {
          "id": "82",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 20,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "63",
            "76"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 46
            },
            "start": {
              "column": 13,
              "line": 46
            }
          }
        },
        {
          "id": "83",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to deeply equal StringContaining \"FetchError: An error\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "63",
            "76"
          ],
          "location": {
            "end": {
              "column": 24,
              "line": 46
            },
            "start": {
              "column": 13,
              "line": 46
            }
          }
        },
        {
          "id": "84",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal StringContaining \"FetchError: An error\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "42",
            "43",
            "45",
            "47",
            "50",
            "53",
            "54",
            "63",
            "76"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 48
            },
            "start": {
              "column": 26,
              "line": 46
            }
          }
        },
        {
          "id": "85",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'query')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "38"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "63",
            "76"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 50
            },
            "start": {
              "column": 13,
              "line": 50
            }
          }
        },
        {
          "id": "86",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'ERROR' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "63",
            "76"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 50
            },
            "start": {
              "column": 13,
              "line": 50
            }
          }
        },
        {
          "id": "87",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'ERROR' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47",
            "50",
            "53",
            "54"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 72
            },
            "start": {
              "column": 44,
              "line": 50
            }
          }
        },
        {
          "id": "88",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected undefined to deeply equal StringContaining \"customer\"",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47",
            "50",
            "53",
            "54"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 51
            },
            "start": {
              "column": 17,
              "line": 51
            }
          }
        },
        {
          "id": "89",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to deeply equal StringContaining \"customer\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47",
            "50",
            "53",
            "54"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 51
            },
            "start": {
              "column": 17,
              "line": 51
            }
          }
        },
        {
          "id": "90",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal StringContaining \"customer\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 53
            },
            "start": {
              "column": 41,
              "line": 51
            }
          }
        },
        {
          "id": "91",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'body')",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "50",
            "53",
            "54"
          ],
          "location": {
            "end": {
              "column": 57,
              "line": 53
            },
            "start": {
              "column": 24,
              "line": 53
            }
          }
        },
        {
          "id": "92",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to deeply equal StringContaining \"customer\"",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "50",
            "53",
            "54"
          ],
          "location": {
            "end": {
              "column": 57,
              "line": 53
            },
            "start": {
              "column": 24,
              "line": 53
            }
          }
        },
        {
          "id": "93",
          "mutatorName": "LogicalOperator",
          "replacement": "error.source || error.source.body",
          "statusReason": "Cannot read properties of undefined (reading 'body')",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "50",
            "53",
            "54"
          ],
          "location": {
            "end": {
              "column": 57,
              "line": 53
            },
            "start": {
              "column": 24,
              "line": 53
            }
          }
        },
        {
          "id": "94",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal StringContaining \"customer\"",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "53",
            "54"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 55
            },
            "start": {
              "column": 59,
              "line": 53
            }
          }
        },
        {
          "id": "95",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "39",
            "50"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 55
            },
            "start": {
              "column": 24,
              "line": 55
            }
          }
        },
        {
          "id": "96",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to deeply equal StringContaining \"customer\"",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "50"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 55
            },
            "start": {
              "column": 24,
              "line": 55
            }
          }
        },
        {
          "id": "97",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal StringContaining \"customer\"",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 57
            },
            "start": {
              "column": 37,
              "line": 55
            }
          }
        },
        {
          "id": "98",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47",
            "50",
            "53",
            "54"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 59
            },
            "start": {
              "column": 17,
              "line": 59
            }
          }
        },
        {
          "id": "99",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'ERROR' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47",
            "50",
            "53",
            "54"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 59
            },
            "start": {
              "column": 17,
              "line": 59
            }
          }
        },
        {
          "id": "100",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'ERROR' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 65
            },
            "start": {
              "column": 47,
              "line": 59
            }
          }
        },
        {
          "id": "101",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'ERROR' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 62
            },
            "start": {
              "column": 21,
              "line": 62
            }
          }
        },
        {
          "id": "102",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'WARN' to be 'ERROR' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 62
            },
            "start": {
              "column": 21,
              "line": 62
            }
          }
        },
        {
          "id": "103",
          "mutatorName": "EqualityOperator",
          "replacement": "error.extensions.serviceName !== serviceName",
          "statusReason": "expected 'ERROR' to be 'WARN' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 62
            },
            "start": {
              "column": 21,
              "line": 62
            }
          }
        },
        {
          "id": "104",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47",
            "50",
            "53",
            "54"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 67
            },
            "start": {
              "column": 17,
              "line": 67
            }
          }
        },
        {
          "id": "105",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'GraphQLError: `CustomerPayload` is an…' to deeply equal StringContaining \"A stacktrace\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47",
            "50",
            "53",
            "54"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 67
            },
            "start": {
              "column": 17,
              "line": 67
            }
          }
        },
        {
          "id": "106",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'GraphQLError: `CustomerPayload` is an…' to deeply equal StringContaining \"A stacktrace\"",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "39"
          ],
          "coveredBy": [
            "39",
            "42",
            "45",
            "47"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 71
            },
            "start": {
              "column": 45,
              "line": 67
            }
          }
        }
      ],
      "source": "import { GraphQLError } from 'graphql'\nimport {\n    LogEntry,\n    LogEntryInput,\n    LogLevel,\n    createISOTimestamp,\n    sanitizeMessage,\n} from '../'\n\nexport function createLogEntry(logEntryInput: LogEntryInput): LogEntry {\n    const {\n        dateFunction,\n        loggerName,\n        logMessage,\n        loglevel,\n        serviceName,\n        context,\n        error,\n        customErrorName,\n    } = logEntryInput\n\n    const logEntry: LogEntry = {\n        level: loglevel ?? LogLevel.info,\n        logger: loggerName ?? 'fallback-logger',\n        message: sanitizeMessage(logMessage),\n        serviceName: serviceName ?? 'fallback-service',\n        timestamp: createISOTimestamp(dateFunction),\n    }\n\n    // If there is a serviceName in the context, use it as serviceName for the LogEntry\n    const contextRecord = context as Record<string, unknown>\n    if (contextRecord && contextRecord.serviceName) {\n        logEntry.serviceName = contextRecord.serviceName as string\n        if (\n            loglevel === LogLevel.error &&\n            contextRecord.serviceName !== serviceName\n        ) {\n            logEntry.level = LogLevel.warn\n        }\n    }\n\n    if (error) {\n        logEntry.errorName = customErrorName ?? error.name\n        logEntry.message =\n            `${logEntry.message} ${sanitizeMessage(error.message)}`.trim()\n        if (error.stack) {\n            logEntry.stacktrace = sanitizeMessage(error.stack)\n        }\n\n        if (error instanceof GraphQLError) {\n            if (error.extensions.query) {\n                logEntry.query = error.extensions.query as string\n            } else if (error.source && error.source.body) {\n                logEntry.query = error.source.body\n            } else if (error.nodes) {\n                logEntry.query = JSON.stringify(error.nodes)\n            }\n\n            if (error.extensions.serviceName) {\n                logEntry.serviceName = error.extensions.serviceName as string\n                logEntry.level =\n                    error.extensions.serviceName === serviceName\n                        ? LogLevel.error\n                        : LogLevel.warn\n            }\n\n            if (error.extensions.exception) {\n                logEntry.stacktrace = sanitizeMessage(\n                    error.extensions.exception as string,\n                )\n            }\n        }\n    }\n    return logEntry\n}\n"
    },
    "src/logger/CreateTimestamp.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "107",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "119"
          ],
          "coveredBy": [
            "119"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 8
            },
            "start": {
              "column": 66,
              "line": 6
            }
          }
        },
        {
          "id": "108",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 50,
          "static": false,
          "killedBy": [
            "120"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118",
            "120"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 11,
              "line": 12
            }
          }
        }
      ],
      "source": "import { DateFunction, nowDateFunction } from '@dreamit/funpara'\n\n/**\n * @deprecated Use createISOTimestamp instead\n */\nexport function createTimestamp(date: Date = new Date()): string {\n    return date.toISOString()\n}\n\nexport function createISOTimestamp(\n    dateFunction: DateFunction = nowDateFunction(),\n): string {\n    return dateFunction().toISOString()\n}\n"
    },
    "src/logger/JsonLogger.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "109",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "73"
          ],
          "coveredBy": [
            "73"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 41
            },
            "start": {
              "column": 24,
              "line": 41
            }
          }
        },
        {
          "id": "110",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be '_TRUNCATED_' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": true,
          "killedBy": [
            "73"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "73"
          ],
          "location": {
            "end": {
              "column": 38,
              "line": 43
            },
            "start": {
              "column": 25,
              "line": 43
            }
          }
        },
        {
          "id": "111",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'log')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "73"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 52
            },
            "start": {
              "column": 7,
              "line": 45
            }
          }
        },
        {
          "id": "112",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "74"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "74",
            "75",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 67
            },
            "start": {
              "column": 13,
              "line": 58
            }
          }
        },
        {
          "id": "113",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'Schema is  {\"extensions\":{},\"astNode\"…' to be 'Error: Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "53"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "74",
            "75",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 59
            },
            "start": {
              "column": 13,
              "line": 59
            }
          }
        },
        {
          "id": "114",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "74"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "74",
            "75",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 59
            },
            "start": {
              "column": 13,
              "line": 59
            }
          }
        },
        {
          "id": "115",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "74"
          ],
          "coveredBy": [
            "74",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 66
            },
            "start": {
              "column": 32,
              "line": 59
            }
          }
        },
        {
          "id": "116",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "74"
          ],
          "coveredBy": [
            "74",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 65
            },
            "start": {
              "column": 29,
              "line": 60
            }
          }
        },
        {
          "id": "117",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Error: Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "53"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "76"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 84
            },
            "start": {
              "column": 13,
              "line": 75
            }
          }
        },
        {
          "id": "118",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Error: Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "53"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "76"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 83
            },
            "start": {
              "column": 25,
              "line": 76
            }
          }
        },
        {
          "id": "119",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Error: Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "53"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "77"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 97
            },
            "start": {
              "column": 13,
              "line": 90
            }
          }
        },
        {
          "id": "120",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'info' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "77"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "77"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 96
            },
            "start": {
              "column": 25,
              "line": 91
            }
          }
        },
        {
          "id": "121",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Trying to set graphql schema' to be 'Schema update was rejected because co…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "50",
            "78"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 110
            },
            "start": {
              "column": 13,
              "line": 103
            }
          }
        },
        {
          "id": "122",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Schema update was rejected because co…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "50",
            "78"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 109
            },
            "start": {
              "column": 25,
              "line": 104
            }
          }
        },
        {
          "id": "123",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'stacktrace')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 136
            },
            "start": {
              "column": 60,
              "line": 112
            }
          }
        },
        {
          "id": "124",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Schema update was rejected because co…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 132
            },
            "start": {
              "column": 28,
              "line": 123
            }
          }
        },
        {
          "id": "125",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "74"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 142
            },
            "start": {
              "column": 52,
              "line": 138
            }
          }
        }
      ],
      "source": "import { DateFunction } from '@dreamit/funpara'\nimport { Logger } from '@dreamit/graphql-server-base'\nimport { Console } from 'node:console'\nimport {\n    LogEntry,\n    LogEntryInput,\n    LogLevel,\n    createLogEntry,\n    truncateLogMessage,\n} from '../'\n\n/**\n * Logger implementation that outputs log entries as JSON text to console.\n * Can be useful for log aggregation tools.\n */\nexport class JsonLogger implements Logger {\n    loggerName: string\n    debugEnabled: boolean\n    serviceName: string\n    truncateLimit: number\n    truncatedText: string\n    loggerConsole: Console\n\n    /**\n     * Creates a new instance of Logger.\n     * @param {string} loggerName - The logger name of the logger.\n     * Will be output to \"logger\" field in JSON.\n     * @param {string} serviceName - The service name of the logger.\n     * Used to identify the graphql server and can be used to differentiate\n     * it from remote graphql services like in a gateway setup.\n     * Will be output to \"serviceName\" field in JSON.\n     * @param {boolean} debugEnabled - If debug output should be enabled\n     * @param {number} truncateLimit - The length of the message before the message gets truncated.\n     * Default: undefined/0 (off).\n     * @param {string} truncatedText - The text to display if a message is truncated.\n     * @param {Console} loggerConsole - The Console to use for logging\n     */\n    constructor(\n        loggerName: string,\n        serviceName: string,\n        debugEnabled = false,\n        truncateLimit = 0,\n        truncatedText = '_TRUNCATED_',\n        loggerConsole: Console = new Console(process.stdout, process.stderr),\n    ) {\n        this.loggerName = loggerName\n        this.serviceName = serviceName\n        this.debugEnabled = debugEnabled\n        this.truncateLimit = truncateLimit\n        this.truncatedText = truncatedText\n        this.loggerConsole = loggerConsole\n    }\n\n    debug(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        if (this.debugEnabled) {\n            this.logMessage({\n                context,\n                dateFunction,\n                logMessage,\n                loglevel: LogLevel.debug,\n            })\n        }\n    }\n\n    error(\n        logMessage: string,\n        error: Error,\n        customErrorName: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.logMessage({\n            context,\n            customErrorName,\n            dateFunction,\n            error,\n            logMessage,\n            loglevel: LogLevel.error,\n        })\n    }\n\n    info(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.logMessage({\n            context,\n            dateFunction,\n            logMessage,\n            loglevel: LogLevel.info,\n        })\n    }\n\n    warn(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.logMessage({\n            context,\n            dateFunction,\n            logMessage,\n            loglevel: LogLevel.warn,\n        })\n    }\n\n    createLogEntry(logEntryInput: LogEntryInput): LogEntry {\n        const {\n            dateFunction,\n            logMessage,\n            loglevel,\n            error,\n            customErrorName,\n            context,\n        } = logEntryInput\n\n        return truncateLogMessage(\n            createLogEntry({\n                context,\n                customErrorName,\n                dateFunction,\n                error,\n                logMessage,\n                loggerName: this.loggerName,\n                loglevel,\n                serviceName: this.serviceName,\n            }),\n            this.truncateLimit,\n            this.truncatedText,\n        )\n    }\n\n    logMessage(logEntryInput: LogEntryInput): void {\n        this.loggerConsole.log(\n            JSON.stringify(this.createLogEntry(logEntryInput)),\n        )\n    }\n}\n"
    },
    "src/logger/NoLogger.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "126",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "121"
          ],
          "coveredBy": [
            "121"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 22
            },
            "start": {
              "column": 58,
              "line": 18
            }
          }
        },
        {
          "id": "127",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "121"
          ],
          "coveredBy": [
            "121"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 21
            },
            "start": {
              "column": 29,
              "line": 21
            }
          }
        }
      ],
      "source": "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { DateFunction } from '@dreamit/funpara'\nimport { Logger } from '@dreamit/graphql-server-base'\n\n/**\n * Logger implementation that does not log or output anything.\n */\nexport class NoLogger implements Logger {\n    loggerName: string\n    serviceName: string\n    debugEnabled: boolean\n\n    /**\n     * Creates a new instance of Logger.\n     * @param {string} loggerName - The logger name of the logger.\n     * @param {string} serviceName - The service name of the logger.\n     */\n    constructor(loggerName: string, serviceName: string) {\n        this.loggerName = loggerName\n        this.serviceName = serviceName\n        this.debugEnabled = false\n    }\n    debug(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {}\n    error(\n        logMessage: string,\n        error: Error,\n        customErrorName?: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {}\n    info(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {}\n    warn(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {}\n}\n"
    },
    "src/logger/NoStacktraceJsonLogger.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "128",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot set properties of undefined (setting 'timestamp')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "74"
          ],
          "coveredBy": [
            "74",
            "76",
            "77",
            "78"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 8
            },
            "start": {
              "column": 60,
              "line": 4
            }
          }
        }
      ],
      "source": "import { JsonLogger, LogEntry, LogEntryInput } from '../'\n\nexport class NoStacktraceJsonLogger extends JsonLogger {\n    createLogEntry(logEntryInput: LogEntryInput): LogEntry {\n        const logEntry = super.createLogEntry(logEntryInput)\n        logEntry.stacktrace = undefined\n        return logEntry\n    }\n}\n"
    },
    "src/logger/NoStacktraceTextLogger.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "129",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "60"
          ],
          "coveredBy": [
            "60",
            "61",
            "63",
            "64",
            "65"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 7
            },
            "start": {
              "column": 68,
              "line": 4
            }
          }
        }
      ],
      "source": "import { LogEntry, TextLogger } from '../'\n\nexport class NoStacktraceTextLogger extends TextLogger {\n    prepareLogOutput(logEntry: LogEntry, context: unknown): string {\n        logEntry.stacktrace = undefined\n        return super.prepareLogOutput(logEntry, context)\n    }\n}\n"
    },
    "src/logger/SanitizeMessage.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "130",
          "mutatorName": "Regex",
          "replacement": "/got invalid value (.); Field/gm",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 38,
              "line": 2
            },
            "start": {
              "column": 5,
              "line": 2
            }
          }
        },
        {
          "id": "131",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Schema update was rejected because co…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 61,
              "line": 12
            }
          }
        },
        {
          "id": "132",
          "mutatorName": "BooleanLiteral",
          "replacement": "foundVariable",
          "statusReason": "Cannot read properties of null (reading '1')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "35"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "133",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'Variable \\\"$login\\\" got invalid value…' to be 'Variable \\\"$login\\\" got invalid value…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 20,
          "static": false,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "134",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of null (reading '1')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "118"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "135",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'Variable \\\"$login\\\" got invalid value…' to be 'Variable \\\"$login\\\" got invalid value…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "36"
          ],
          "coveredBy": [
            "36",
            "39",
            "40",
            "43"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 21
            },
            "start": {
              "column": 49,
              "line": 21
            }
          }
        }
      ],
      "source": "export const VARIABLES_IN_MESSAGE_REGEX: RegExp = new RegExp(\n    /got invalid value (.*); Field/gm,\n)\n\n/**\n * Removes sensible information that might occur when\n * variables are used in log messages from the message.\n * @param {string} logMessage - The original log message\n * @returns {string} The sanitized message. Sensible parts will\n * be overwritten with the text REMOVED BY SANITIZER\n */\nexport function sanitizeMessage(logMessage: string): string {\n    const foundVariable = VARIABLES_IN_MESSAGE_REGEX.exec(logMessage)\n    if (!foundVariable) return logMessage\n\n    /**\n     * RegExp.exec stores the full found match in foundVariable[0] and the found group\n     * in foundVariable[1]. As we only want to replace the group, i.e. the full variable input, we\n     * use foundVariable[1] to be replaced with 'REMOVED BY SANITIZER'\n     */\n    return logMessage.replace(foundVariable[1], 'REMOVED BY SANITIZER')\n}\n"
    },
    "src/logger/TextLogger.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "136",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "59"
          ],
          "coveredBy": [
            "59"
          ],
          "location": {
            "end": {
              "column": 38,
              "line": 40
            },
            "start": {
              "column": 33,
              "line": 40
            }
          }
        },
        {
          "id": "137",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be '_TRUNCATED_' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "59"
          ],
          "coveredBy": [
            "59"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 42
            },
            "start": {
              "column": 33,
              "line": 42
            }
          }
        },
        {
          "id": "138",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "59"
          ],
          "coveredBy": [
            "59"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 51
            },
            "start": {
              "column": 7,
              "line": 44
            }
          }
        },
        {
          "id": "139",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [DEBUG]test-…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "61"
          ],
          "coveredBy": [
            "57",
            "61",
            "62"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 66
            },
            "start": {
              "column": 13,
              "line": 57
            }
          }
        },
        {
          "id": "140",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 1 to be +0 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "62"
          ],
          "coveredBy": [
            "57",
            "61",
            "62"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 58
            },
            "start": {
              "column": 13,
              "line": 58
            }
          }
        },
        {
          "id": "141",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [DEBUG]test-…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "61"
          ],
          "coveredBy": [
            "57",
            "61",
            "62"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 58
            },
            "start": {
              "column": 13,
              "line": 58
            }
          }
        },
        {
          "id": "142",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [DEBUG]test-…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "61"
          ],
          "coveredBy": [
            "61"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 65
            },
            "start": {
              "column": 32,
              "line": 58
            }
          }
        },
        {
          "id": "143",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [DEBUG]test-…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "61"
          ],
          "coveredBy": [
            "61"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 64
            },
            "start": {
              "column": 29,
              "line": 59
            }
          }
        },
        {
          "id": "144",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [ERROR]test-…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "63"
          ],
          "coveredBy": [
            "63"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 83
            },
            "start": {
              "column": 13,
              "line": 74
            }
          }
        },
        {
          "id": "145",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [ERROR]test-…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "63"
          ],
          "coveredBy": [
            "63"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 82
            },
            "start": {
              "column": 25,
              "line": 75
            }
          }
        },
        {
          "id": "146",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "64"
          ],
          "coveredBy": [
            "57",
            "64"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 96
            },
            "start": {
              "column": 13,
              "line": 89
            }
          }
        },
        {
          "id": "147",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "64"
          ],
          "coveredBy": [
            "57",
            "64"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 95
            },
            "start": {
              "column": 25,
              "line": 90
            }
          }
        },
        {
          "id": "148",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [WARN]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "65"
          ],
          "coveredBy": [
            "57",
            "65"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 109
            },
            "start": {
              "column": 13,
              "line": 102
            }
          }
        },
        {
          "id": "149",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [WARN]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "65"
          ],
          "coveredBy": [
            "57",
            "65"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 108
            },
            "start": {
              "column": 25,
              "line": 103
            }
          }
        },
        {
          "id": "150",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "60"
          ],
          "coveredBy": [
            "57",
            "60",
            "61",
            "63",
            "64",
            "65"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 141
            },
            "start": {
              "column": 52,
              "line": 111
            }
          }
        },
        {
          "id": "151",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "60"
          ],
          "coveredBy": [
            "57",
            "60",
            "61",
            "63",
            "64",
            "65"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 130
            },
            "start": {
              "column": 51,
              "line": 121
            }
          }
        },
        {
          "id": "152",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "60"
          ],
          "coveredBy": [
            "57",
            "60",
            "61",
            "63",
            "64",
            "65"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 157
            },
            "start": {
              "column": 69,
              "line": 150
            }
          }
        },
        {
          "id": "153",
          "mutatorName": "ArithmeticOperator",
          "replacement": "`${logEntry.timestamp} [${logEntry.level.toUpperCase()}]` + `${this.loggerName}-${this.serviceName} :` + logEntry.message - (logEntry.stacktrace ? ` ${logEntry.stacktrace}` : '')",
          "statusReason": "expected NaN to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "60"
          ],
          "coveredBy": [
            "57",
            "60",
            "61",
            "63",
            "64",
            "65"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 155
            },
            "start": {
              "column": 13,
              "line": 152
            }
          }
        },
        {
          "id": "154",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'test-logger-test-service :test' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "60"
          ],
          "coveredBy": [
            "57",
            "60",
            "61",
            "63",
            "64",
            "65"
          ],
          "location": {
            "end": {
              "column": 70,
              "line": 152
            },
            "start": {
              "column": 13,
              "line": 152
            }
          }
        },
        {
          "id": "155",
          "mutatorName": "MethodExpression",
          "replacement": "logEntry.level.toLowerCase()",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [info]test-l…' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "60"
          ],
          "coveredBy": [
            "57",
            "60",
            "61",
            "63",
            "64",
            "65"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 152
            },
            "start": {
              "column": 39,
              "line": 152
            }
          }
        },
        {
          "id": "156",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "60"
          ],
          "coveredBy": [
            "57",
            "60",
            "61",
            "63",
            "64",
            "65"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 153
            },
            "start": {
              "column": 13,
              "line": 153
            }
          }
        },
        {
          "id": "157",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [ERROR]test-…' to be '1001-01-01T00:00:00.000Z [ERROR]test-…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "63"
          ],
          "coveredBy": [
            "63"
          ],
          "location": {
            "end": {
              "column": 61,
              "line": 155
            },
            "start": {
              "column": 36,
              "line": 155
            }
          }
        },
        {
          "id": "158",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "60"
          ],
          "coveredBy": [
            "57",
            "60",
            "61",
            "63",
            "64",
            "65"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 155
            },
            "start": {
              "column": 64,
              "line": 155
            }
          }
        }
      ],
      "source": "import { DateFunction } from '@dreamit/funpara'\nimport { Logger } from '@dreamit/graphql-server-base'\nimport { Console } from 'node:console'\nimport {\n    LogEntry,\n    LogEntryInput,\n    LogLevel,\n    createLogEntry,\n    truncateLogMessage,\n} from '../'\n\n/**\n * Logger implementation that outputs log entries as text to console.\n */\nexport class TextLogger implements Logger {\n    loggerName: string\n    serviceName: string\n    debugEnabled: boolean\n    truncateLimit: number\n    truncatedText: string\n    loggerConsole: Console\n\n    /**\n     * Creates a new instance of Logger.\n     * @param {string} loggerName - The logger name of the logger.\n     * Will be used in output if not empty.\n     * @param {string} serviceName - The service name of the logger.\n     * Used to identify the graphql server and can be used to differentiate\n     * it from remote graphql services like in a gateway setup.\n     * Will be output to \"serviceName\" field in JSON.\n     * @param {boolean} debugEnabled - If debug output should be enabled\n     * @param {number} truncateLimit - The length of the message before the message gets truncated.\n     * Default: undefined/0 (off).\n     * @param {string} truncatedText - The text to display if a message is truncated.\n     * @param {Console} loggerConsole - The Console to use for logging\n     */\n    constructor(\n        loggerName: string,\n        serviceName: string,\n        debugEnabled: boolean = false,\n        truncateLimit: number = 0,\n        truncatedText: string = '_TRUNCATED_',\n        loggerConsole: Console = new Console(process.stdout, process.stderr),\n    ) {\n        this.loggerName = loggerName\n        this.serviceName = serviceName\n        this.debugEnabled = debugEnabled\n        this.truncateLimit = truncateLimit\n        this.truncatedText = truncatedText\n        this.loggerConsole = loggerConsole\n    }\n\n    debug(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        if (this.debugEnabled) {\n            this.logMessage({\n                context,\n                dateFunction,\n                logMessage,\n                loglevel: LogLevel.debug,\n            })\n        }\n    }\n\n    error(\n        logMessage: string,\n        error: Error,\n        customErrorName: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.logMessage({\n            context,\n            customErrorName,\n            dateFunction,\n            error,\n            logMessage,\n            loglevel: LogLevel.error,\n        })\n    }\n\n    info(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.logMessage({\n            context,\n            dateFunction,\n            logMessage,\n            loglevel: LogLevel.info,\n        })\n    }\n\n    warn(\n        logMessage: string,\n        context?: unknown,\n        dateFunction?: DateFunction,\n    ): void {\n        this.logMessage({\n            context,\n            dateFunction,\n            logMessage,\n            loglevel: LogLevel.warn,\n        })\n    }\n\n    logMessage(logEntryInput: LogEntryInput): void {\n        const {\n            dateFunction,\n            logMessage,\n            loglevel: loglevel,\n            error,\n            customErrorName,\n            context,\n        } = logEntryInput\n\n        const logEntry: LogEntry = createLogEntry({\n            context,\n            customErrorName,\n            dateFunction,\n            error,\n            logMessage,\n            loggerName: this.loggerName,\n            loglevel: loglevel,\n            serviceName: this.serviceName,\n        })\n        this.loggerConsole.log(\n            this.prepareLogOutput(\n                truncateLogMessage(\n                    logEntry,\n                    this.truncateLimit,\n                    this.truncatedText,\n                ),\n                context,\n            ),\n        )\n    }\n\n    /**\n     * Prepares the text used in the log output.\n     * Can be overwritten if it does not match expected output format.\n     * @param {LogEntry} logEntry - The extracted log information.\n     * @param {unknown} context - The context information\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prepareLogOutput(logEntry: LogEntry, context?: unknown): string {\n        return (\n            `${logEntry.timestamp} [${logEntry.level.toUpperCase()}]` +\n            `${this.loggerName}-${this.serviceName} :` +\n            logEntry.message +\n            (logEntry.stacktrace ? ` ${logEntry.stacktrace}` : '')\n        )\n    }\n}\n"
    },
    "src/logger/TruncateLogMessage.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "159",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '{\"stack\":\"Error: 14 ' to be '{\"stack\":_TRUNCATED_' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "89"
          ],
          "coveredBy": [
            "88",
            "89",
            "92",
            "93",
            "94",
            "95"
          ],
          "location": {
            "end": {
              "column": 34,
              "line": 6
            },
            "start": {
              "column": 21,
              "line": 6
            }
          }
        },
        {
          "id": "160",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'stacktrace')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "74"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "118"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 21
            },
            "start": {
              "column": 13,
              "line": 7
            }
          }
        },
        {
          "id": "161",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '1001-01-01T00:00:00.000Z [INFO]test-l…' to be '1001-01-01T00:00:00.000Z [INFO]test-l…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "60"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "118"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 10
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "162",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' to be '{\"stack\":_TRUNCATED_' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 30,
          "static": false,
          "killedBy": [
            "89"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "118"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 10
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "163",
          "mutatorName": "LogicalOperator",
          "replacement": "truncateLimit > 0 || logEntry.message.length > truncateLimit + truncatedText.length",
          "statusReason": "expected '' to be 'Schema update was rejected because co…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 19,
          "static": false,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "118"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 10
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "164",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '' to be 'Schema update was rejected because co…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "118"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "165",
          "mutatorName": "EqualityOperator",
          "replacement": "truncateLimit >= 0",
          "statusReason": "expected '' to be 'Schema update was rejected because co…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "118"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "166",
          "mutatorName": "EqualityOperator",
          "replacement": "truncateLimit <= 0",
          "statusReason": "expected '' to be 'Schema update was rejected because co…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "50",
            "53",
            "54",
            "57",
            "60",
            "61",
            "63",
            "64",
            "65",
            "74",
            "76",
            "77",
            "78",
            "81",
            "82",
            "83",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "118"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "167",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' to be '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "93"
          ],
          "coveredBy": [
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 10
            },
            "start": {
              "column": 9,
              "line": 10
            }
          }
        },
        {
          "id": "168",
          "mutatorName": "EqualityOperator",
          "replacement": "logEntry.message.length >= truncateLimit + truncatedText.length",
          "statusReason": "expected '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' to be '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "94"
          ],
          "coveredBy": [
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 10
            },
            "start": {
              "column": 9,
              "line": 10
            }
          }
        },
        {
          "id": "169",
          "mutatorName": "EqualityOperator",
          "replacement": "logEntry.message.length <= truncateLimit + truncatedText.length",
          "statusReason": "expected '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' to be '{\"stack\":_TRUNCATED_' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "89"
          ],
          "coveredBy": [
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 10
            },
            "start": {
              "column": 9,
              "line": 10
            }
          }
        },
        {
          "id": "170",
          "mutatorName": "ArithmeticOperator",
          "replacement": "truncateLimit - truncatedText.length",
          "statusReason": "expected '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' to be '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "94"
          ],
          "coveredBy": [
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 10
            },
            "start": {
              "column": 35,
              "line": 10
            }
          }
        },
        {
          "id": "171",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' to be '{\"stack\":_TRUNCATED_' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "89"
          ],
          "coveredBy": [
            "89",
            "90",
            "91",
            "92",
            "95"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 19
            },
            "start": {
              "column": 7,
              "line": 11
            }
          }
        },
        {
          "id": "172",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '_TRUNC_' to be '{\"stack' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "91"
          ],
          "coveredBy": [
            "89",
            "90",
            "91",
            "92",
            "95"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 13
            },
            "start": {
              "column": 13,
              "line": 13
            }
          }
        },
        {
          "id": "173",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '{\"stack\":\"Error: 14 ' to be '{\"stack\":_TRUNCATED_' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "89"
          ],
          "coveredBy": [
            "89",
            "90",
            "91",
            "92",
            "95"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 13
            },
            "start": {
              "column": 13,
              "line": 13
            }
          }
        },
        {
          "id": "174",
          "mutatorName": "EqualityOperator",
          "replacement": "truncateLimit >= truncatedText.length",
          "statusReason": "expected '_TRUNC_' to be '{\"stack' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "91"
          ],
          "coveredBy": [
            "89",
            "90",
            "91",
            "92",
            "95"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 13
            },
            "start": {
              "column": 13,
              "line": 13
            }
          }
        },
        {
          "id": "175",
          "mutatorName": "EqualityOperator",
          "replacement": "truncateLimit <= truncatedText.length",
          "statusReason": "expected '{\"stack\":\"Error: 14 ' to be '{\"stack\":_TRUNCATED_' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "89"
          ],
          "coveredBy": [
            "89",
            "90",
            "91",
            "92",
            "95"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 13
            },
            "start": {
              "column": 13,
              "line": 13
            }
          }
        },
        {
          "id": "176",
          "mutatorName": "ArithmeticOperator",
          "replacement": "logEntry.message.slice(0, truncateLimit - truncatedText.length) - truncatedText",
          "statusReason": "expected NaN to be '{\"stack\":_TRUNCATED_' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "89"
          ],
          "coveredBy": [
            "89",
            "90",
            "95"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 17
            },
            "start": {
              "column": 19,
              "line": 14
            }
          }
        },
        {
          "id": "177",
          "mutatorName": "MethodExpression",
          "replacement": "logEntry.message",
          "statusReason": "expected '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' to be '{\"stack\":_TRUNCATED_' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "89"
          ],
          "coveredBy": [
            "89",
            "90",
            "95"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 17
            },
            "start": {
              "column": 19,
              "line": 14
            }
          }
        },
        {
          "id": "178",
          "mutatorName": "ArithmeticOperator",
          "replacement": "truncateLimit + truncatedText.length",
          "statusReason": "expected '{\"stack\":\"Error: 14 UNAVAILABLE_TRUNC…' to be '{\"stack\":_TRUNCATED_' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "89"
          ],
          "coveredBy": [
            "89",
            "90",
            "95"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 16
            },
            "start": {
              "column": 23,
              "line": 16
            }
          }
        },
        {
          "id": "179",
          "mutatorName": "MethodExpression",
          "replacement": "logEntry.message",
          "statusReason": "expected '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' to be '{\"stack' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "91"
          ],
          "coveredBy": [
            "91",
            "92"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 18
            },
            "start": {
              "column": 19,
              "line": 18
            }
          }
        }
      ],
      "source": "import { LogEntry } from '../'\n\nexport function truncateLogMessage(\n    logEntry: LogEntry,\n    truncateLimit = 0,\n    truncatedText = '_TRUNCATED_',\n): LogEntry {\n    if (\n        truncateLimit > 0 &&\n        logEntry.message.length > truncateLimit + truncatedText.length\n    ) {\n        logEntry.message =\n            truncateLimit > truncatedText.length\n                ? logEntry.message.slice(\n                      0,\n                      truncateLimit - truncatedText.length,\n                  ) + truncatedText\n                : logEntry.message.slice(0, truncateLimit)\n    }\n    return logEntry\n}\n"
    },
    "src/metrics/IncreaseFetchOrGraphQLErrorMetric.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "180",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 30
            },
            "start": {
              "column": 9,
              "line": 13
            }
          }
        },
        {
          "id": "181",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'debug')",
          "status": "Killed",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [
            "118"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 15,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "182",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be 'Calling increaseFetchOrGraphQLErrorMe…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 13,
          "static": false,
          "killedBy": [
            "118"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 15,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "183",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Calling increaseFetchOrGraphQLErrorMe…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 13,
          "static": false,
          "killedBy": [
            "118"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 21
            },
            "start": {
              "column": 17,
              "line": 15
            }
          }
        },
        {
          "id": "184",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 56,
              "line": 17
            },
            "start": {
              "column": 13,
              "line": 17
            }
          }
        },
        {
          "id": "185",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 82,
              "line": 18
            },
            "start": {
              "column": 17,
              "line": 18
            }
          }
        },
        {
          "id": "186",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "collectErrorMetricsFunction is not a function",
          "status": "Killed",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [
            "118"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 22
            },
            "start": {
              "column": 9,
              "line": 22
            }
          }
        },
        {
          "id": "187",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 22
            },
            "start": {
              "column": 9,
              "line": 22
            }
          }
        },
        {
          "id": "188",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 29
            },
            "start": {
              "column": 38,
              "line": 22
            }
          }
        },
        {
          "id": "189",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot destructure property 'logger' of 'serverOptions' as it is undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "12",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 28
            },
            "start": {
              "column": 37,
              "line": 23
            }
          }
        }
      ],
      "source": "import { GraphQLServerOptions, determineGraphQLOrFetchError } from '../'\n\n/**\n * Increases the error metric with either a FetchError or GraphQLError label\n * @param {unknown} error - An error\n * @param {unknown} context - The request context\n * @param {GraphQLServerOptions} serverOptions - The GraphQLServerOptions\n */\nexport function increaseFetchOrGraphQLErrorMetric(\n    error: unknown,\n    serverOptions: GraphQLServerOptions,\n    context: unknown,\n): void {\n    const { collectErrorMetricsFunction, logger } = serverOptions\n    if (logger) {\n        logger.debug(\n            'Calling increaseFetchOrGraphQLErrorMetric' +\n                ` with error ${error} and errorIsFetch ${error instanceof Error}`,\n            context,\n        )\n    }\n    if (collectErrorMetricsFunction) {\n        collectErrorMetricsFunction({\n            context,\n            error,\n            errorName: determineGraphQLOrFetchError(error),\n            serverOptions,\n        })\n    }\n}\n"
    },
    "src/metrics/NoMetricsClient.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "190",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "34"
          ],
          "coveredBy": [
            "34"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 15
            },
            "start": {
              "column": 37,
              "line": 13
            }
          }
        },
        {
          "id": "191",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected 'Stryker was here!' to be '' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "34"
          ],
          "coveredBy": [
            "34"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 14
            },
            "start": {
              "column": 16,
              "line": 14
            }
          }
        },
        {
          "id": "192",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "34"
          ],
          "coveredBy": [
            "34"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 20
            },
            "start": {
              "column": 35,
              "line": 16
            }
          }
        },
        {
          "id": "193",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "34"
          ],
          "coveredBy": [
            "34"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 19
            },
            "start": {
              "column": 41,
              "line": 17
            }
          }
        },
        {
          "id": "194",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected 'Stryker was here!' to be '' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "34"
          ],
          "coveredBy": [
            "34"
          ],
          "location": {
            "end": {
              "column": 23,
              "line": 18
            },
            "start": {
              "column": 21,
              "line": 18
            }
          }
        }
      ],
      "source": "/* eslint-disable @typescript-eslint/no-empty-function */\nimport { MetricsClient } from '@dreamit/graphql-server-base'\n\n/**\n * Metrics client that does not collect any metrics.\n */\nexport class NoMetricsClient implements MetricsClient {\n    constructor() {}\n    initMetrics(): void {}\n    setAvailability(): void {}\n    increaseRequestThroughput(): void {}\n    increaseErrors(): void {}\n    getMetricsContentType(): string {\n        return ''\n    }\n    getMetrics(): Promise<string> {\n        return new Promise((resolve) => {\n            resolve('')\n        })\n    }\n}\n"
    },
    "src/metrics/SimpleMetricsClient.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "195",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP  Number of incom…' to contain 'graphql_server_request_throughput 0'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "79",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 74,
              "line": 28
            },
            "start": {
              "column": 39,
              "line": 28
            }
          }
        },
        {
          "id": "196",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_availability 1'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "79",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 63,
              "line": 29
            },
            "start": {
              "column": 34,
              "line": 29
            }
          }
        },
        {
          "id": "197",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 24,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "79",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 30
            },
            "start": {
              "column": 28,
              "line": 30
            }
          }
        },
        {
          "id": "198",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'get')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "10"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "79",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 36
            },
            "start": {
              "column": 7,
              "line": 31
            }
          }
        },
        {
          "id": "199",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 13,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "79",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 40
            },
            "start": {
              "column": 25,
              "line": 38
            }
          }
        },
        {
          "id": "200",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "79",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 59
            },
            "start": {
              "column": 36,
              "line": 49
            }
          }
        },
        {
          "id": "201",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 67
            },
            "start": {
              "column": 41,
              "line": 61
            }
          }
        },
        {
          "id": "202",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 31,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 63
            },
            "start": {
              "column": 13,
              "line": 63
            }
          }
        },
        {
          "id": "203",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 63
            },
            "start": {
              "column": 13,
              "line": 63
            }
          }
        },
        {
          "id": "204",
          "mutatorName": "EqualityOperator",
          "replacement": "errorCounter === undefined",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 63
            },
            "start": {
              "column": 13,
              "line": 63
            }
          }
        },
        {
          "id": "205",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 23,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 66
            },
            "start": {
              "column": 41,
              "line": 63
            }
          }
        },
        {
          "id": "206",
          "mutatorName": "UpdateOperator",
          "replacement": "errorCounter--",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 27,
              "line": 64
            },
            "start": {
              "column": 13,
              "line": 64
            }
          }
        },
        {
          "id": "207",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_request_throughput 1'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 71
            },
            "start": {
              "column": 39,
              "line": 69
            }
          }
        },
        {
          "id": "208",
          "mutatorName": "UpdateOperator",
          "replacement": "this.requestThroughput--",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_request_throughput 1'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 33,
              "line": 70
            },
            "start": {
              "column": 9,
              "line": 70
            }
          }
        },
        {
          "id": "209",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_availability 1'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 75
            },
            "start": {
              "column": 42,
              "line": 73
            }
          }
        },
        {
          "id": "210",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'text/plain; charset=utf-8; version=0.…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "33"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 79
            },
            "start": {
              "column": 37,
              "line": 77
            }
          }
        },
        {
          "id": "211",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'text/plain; charset=utf-8; version=0.…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "33"
          ],
          "location": {
            "end": {
              "column": 58,
              "line": 78
            },
            "start": {
              "column": 16,
              "line": 78
            }
          }
        },
        {
          "id": "212",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "33",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 86
            },
            "start": {
              "column": 47,
              "line": 81
            }
          }
        },
        {
          "id": "213",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "33",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 68,
              "line": 83
            },
            "start": {
              "column": 13,
              "line": 83
            }
          }
        },
        {
          "id": "214",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "33",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 110
            },
            "start": {
              "column": 41,
              "line": 88
            }
          }
        },
        {
          "id": "215",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Test timed out in 5000ms.\nIf this is a long-running test, pass a timeout value as the last argument or configure it globally with \"testTimeout\".",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "33",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 109
            },
            "start": {
              "column": 41,
              "line": 89
            }
          }
        },
        {
          "id": "216",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '' to contain 'graphql_server_availability 1'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "33",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 108
            },
            "start": {
              "column": 21,
              "line": 90
            }
          }
        }
      ],
      "source": "import {\n    FETCH_ERROR,\n    GRAPHQL_ERROR,\n    INTROSPECTION_DISABLED_ERROR,\n    INVALID_SCHEMA_ERROR,\n    METHOD_NOT_ALLOWED_ERROR,\n    MISSING_QUERY_PARAMETER_ERROR,\n    MetricsClient,\n    SCHEMA_VALIDATION_ERROR,\n    SYNTAX_ERROR,\n    VALIDATION_ERROR,\n} from '@dreamit/graphql-server-base'\n\n/**\n * Simple metrics client.\n * Mimics behaviour of prom-client without using the prom-client library.\n * Does not collect NodeJS metrics like cpu and memory usage.\n */\nexport class SimpleMetricsClient implements MetricsClient {\n    readonly requestThroughputMetricName: string\n    readonly availabilityMetricName: string\n    readonly errorsMetricName: string\n    graphQLServerAvailabilityGauge = 0\n    requestThroughput = 0\n    graphQLServerErrorCounter: Map<string, number> = new Map<string, number>()\n\n    constructor(\n        requestThroughputMetricName = 'graphql_server_request_throughput',\n        availabilityMetricName = 'graphql_server_availability',\n        errorsMetricName = 'graphql_server_errors',\n    ) {\n        this.requestThroughputMetricName = requestThroughputMetricName\n        this.availabilityMetricName = availabilityMetricName\n        this.errorsMetricName = errorsMetricName\n        this.initMetrics()\n    }\n\n    initMetrics(): void {\n        this.initErrorCounterLabels()\n    }\n\n    /**\n     * Initializes the error counter.\n     * When evaluating time series this can help\n     * to create an initial time series that can be used for actions like alerting.\n     * Otherwise, calculating differences with functions like \"increase\" with\n     * an undefined time series might not work for the first occurrence of an error.\n     */\n    initErrorCounterLabels(): void {\n        this.graphQLServerErrorCounter.set(GRAPHQL_ERROR, 0)\n        this.graphQLServerErrorCounter.set(SCHEMA_VALIDATION_ERROR, 0)\n        this.graphQLServerErrorCounter.set(FETCH_ERROR, 0)\n        this.graphQLServerErrorCounter.set(METHOD_NOT_ALLOWED_ERROR, 0)\n        this.graphQLServerErrorCounter.set(INVALID_SCHEMA_ERROR, 0)\n        this.graphQLServerErrorCounter.set(MISSING_QUERY_PARAMETER_ERROR, 0)\n        this.graphQLServerErrorCounter.set(VALIDATION_ERROR, 0)\n        this.graphQLServerErrorCounter.set(SYNTAX_ERROR, 0)\n        this.graphQLServerErrorCounter.set(INTROSPECTION_DISABLED_ERROR, 0)\n    }\n\n    increaseErrors(label: string): void {\n        let errorCounter = this.graphQLServerErrorCounter.get(label)\n        if (errorCounter !== undefined) {\n            errorCounter++\n            this.graphQLServerErrorCounter.set(label, errorCounter)\n        }\n    }\n\n    increaseRequestThroughput(): void {\n        this.requestThroughput++\n    }\n\n    setAvailability(value: number): void {\n        this.graphQLServerAvailabilityGauge = value\n    }\n\n    getMetricsContentType(): string {\n        return 'text/plain; charset=utf-8; version=0.0.4'\n    }\n\n    getErrorCount(errorLabel: string): string {\n        return (\n            `${this.errorsMetricName}{errorClass=\"${errorLabel}\"} ` +\n            this.graphQLServerErrorCounter.get(errorLabel)\n        )\n    }\n\n    async getMetrics(): Promise<string> {\n        return new Promise((resolve) => {\n            resolve(`\n            # HELP ${this.requestThroughputMetricName} Number of incoming requests\n            # TYPE ${this.requestThroughputMetricName} counter\n            ${this.requestThroughputMetricName} ${this.requestThroughput}\n            # HELP ${this.availabilityMetricName}  GraphQL server availability\n            # TYPE ${this.availabilityMetricName}  gauge\n            ${this.availabilityMetricName} ${this.graphQLServerAvailabilityGauge}\n            # HELP ${this.errorsMetricName} Number of errors per Error class\n            # TYPE ${this.errorsMetricName} counter\n            ${this.getErrorCount(GRAPHQL_ERROR)}\n            ${this.getErrorCount(SCHEMA_VALIDATION_ERROR)}\n            ${this.getErrorCount(FETCH_ERROR)}\n            ${this.getErrorCount(METHOD_NOT_ALLOWED_ERROR)}\n            ${this.getErrorCount(INVALID_SCHEMA_ERROR)}\n            ${this.getErrorCount(MISSING_QUERY_PARAMETER_ERROR)}\n            ${this.getErrorCount(VALIDATION_ERROR)}\n            ${this.getErrorCount(SYNTAX_ERROR)}\n            ${this.getErrorCount(INTROSPECTION_DISABLED_ERROR)}\n            `)\n        })\n    }\n}\n"
    },
    "src/request/ExtractInformationFromRequest.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "217",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot use 'in' operator to search for 'executionResult' in undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 25
            },
            "start": {
              "column": 23,
              "line": 13
            }
          }
        },
        {
          "id": "218",
          "mutatorName": "LogicalOperator",
          "replacement": "request.url && ''",
          "statusReason": "Cannot read properties of undefined (reading 'slice')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "219",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "status": "Survived",
          "testsCompleted": 34,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 15
            },
            "start": {
              "column": 24,
              "line": 15
            }
          }
        },
        {
          "id": "220",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 24
            },
            "start": {
              "column": 12,
              "line": 18
            }
          }
        },
        {
          "id": "221",
          "mutatorName": "LogicalOperator",
          "replacement": "extractedURLParameters.operationName && extractedBody.operationName",
          "status": "Survived",
          "testsCompleted": 38,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 80,
              "line": 21
            },
            "start": {
              "column": 13,
              "line": 21
            }
          }
        },
        {
          "id": "222",
          "mutatorName": "LogicalOperator",
          "replacement": "extractedURLParameters.query && extractedBody.query",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 22
            },
            "start": {
              "column": 16,
              "line": 22
            }
          }
        },
        {
          "id": "223",
          "mutatorName": "LogicalOperator",
          "replacement": "extractedURLParameters.variables && extractedBody.variables",
          "statusReason": "Cannot read properties of undefined (reading 'user')",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 79,
              "line": 23
            },
            "start": {
              "column": 20,
              "line": 23
            }
          }
        },
        {
          "id": "224",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'operationName')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 45
            },
            "start": {
              "column": 23,
              "line": 29
            }
          }
        },
        {
          "id": "225",
          "mutatorName": "MethodExpression",
          "replacement": "url",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 17,
          "static": false,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 31
            },
            "start": {
              "column": 9,
              "line": 31
            }
          }
        },
        {
          "id": "226",
          "mutatorName": "MethodExpression",
          "replacement": "Math.min(0, url.indexOf('?'))",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 17,
          "static": false,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 48,
              "line": 31
            },
            "start": {
              "column": 19,
              "line": 31
            }
          }
        },
        {
          "id": "227",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected undefined to be 'query users{ users { userId userName …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "66"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 31
            },
            "start": {
              "column": 43,
              "line": 31
            }
          }
        },
        {
          "id": "228",
          "mutatorName": "LogicalOperator",
          "replacement": "urlParameters.get('query') && undefined",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 15,
          "static": false,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 33
            },
            "start": {
              "column": 28,
              "line": 33
            }
          }
        },
        {
          "id": "229",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 17,
          "static": false,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 53,
              "line": 33
            },
            "start": {
              "column": 46,
              "line": 33
            }
          }
        },
        {
          "id": "230",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "66"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 35
            }
          }
        },
        {
          "id": "231",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "error.toJSON is not a function",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 35
            }
          }
        },
        {
          "id": "232",
          "mutatorName": "LogicalOperator",
          "replacement": "urlParameters.get('variables') as Readonly<Record<string, unknown>> | null && undefined",
          "statusReason": "expected null to be undefined // Object.is equality",
          "status": "Killed",
          "testsCompleted": 33,
          "static": false,
          "killedBy": [
            "66"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 31,
              "line": 37
            },
            "start": {
              "column": 9,
              "line": 35
            }
          }
        },
        {
          "id": "233",
          "mutatorName": "LogicalOperator",
          "replacement": "urlParameters.get('operationName') && undefined",
          "statusReason": "expected undefined to be 'users' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 33,
          "static": false,
          "killedBy": [
            "66"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 56,
              "line": 39
            },
            "start": {
              "column": 9,
              "line": 39
            }
          }
        },
        {
          "id": "234",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected undefined to be 'users' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 33,
          "static": false,
          "killedBy": [
            "66"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 39
            },
            "start": {
              "column": 27,
              "line": 39
            }
          }
        },
        {
          "id": "235",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 17,
          "static": false,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "66",
            "67",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 44
            },
            "start": {
              "column": 12,
              "line": 40
            }
          }
        },
        {
          "id": "236",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'error')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 157
            },
            "start": {
              "column": 23,
              "line": 50
            }
          }
        },
        {
          "id": "237",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 52
            },
            "start": {
              "column": 9,
              "line": 52
            }
          }
        },
        {
          "id": "238",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'POST body contains invalid type undef…' to be 'Request cannot be processed. No query…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 18,
          "static": false,
          "killedBy": [
            "18"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 52
            },
            "start": {
              "column": 9,
              "line": 52
            }
          }
        },
        {
          "id": "239",
          "mutatorName": "LogicalOperator",
          "replacement": "request.method || request.method === 'GET'",
          "statusReason": "expected undefined to be 'POST body contains invalid type boole…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 52
            },
            "start": {
              "column": 9,
              "line": 52
            }
          }
        },
        {
          "id": "240",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected undefined to be 'POST body contains invalid type boole…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 52
            },
            "start": {
              "column": 27,
              "line": 52
            }
          }
        },
        {
          "id": "241",
          "mutatorName": "EqualityOperator",
          "replacement": "request.method !== 'GET'",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 52
            },
            "start": {
              "column": 27,
              "line": 52
            }
          }
        },
        {
          "id": "242",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'POST body contains invalid type undef…' to be 'Request cannot be processed. No query…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 18,
          "static": false,
          "killedBy": [
            "18"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 52
            },
            "start": {
              "column": 46,
              "line": 52
            }
          }
        },
        {
          "id": "243",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'POST body contains invalid type undef…' to be 'Request cannot be processed. No query…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "18"
          ],
          "coveredBy": [
            "15",
            "16",
            "18"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 54
            },
            "start": {
              "column": 53,
              "line": 52
            }
          }
        },
        {
          "id": "244",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'Invalid request. Request header conte…' to be 'POST body contains invalid type boole…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 34,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 57
            },
            "start": {
              "column": 26,
              "line": 57
            }
          }
        },
        {
          "id": "245",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 57
            },
            "start": {
              "column": 26,
              "line": 57
            }
          }
        },
        {
          "id": "246",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof body !== 'string'",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 57
            },
            "start": {
              "column": 26,
              "line": 57
            }
          }
        },
        {
          "id": "247",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'POST body contains invalid type strin…' to be 'Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "86"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 57
            },
            "start": {
              "column": 42,
              "line": 57
            }
          }
        },
        {
          "id": "248",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'Invalid request. Request header conte…' to be 'POST body contains invalid type boole…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 58
            },
            "start": {
              "column": 26,
              "line": 58
            }
          }
        },
        {
          "id": "249",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'POST body contains invalid type objec…' to be 'Cannot extract information from body …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 32,
          "static": false,
          "killedBy": [
            "69"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 58
            },
            "start": {
              "column": 26,
              "line": 58
            }
          }
        },
        {
          "id": "250",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof body !== 'object'",
          "statusReason": "expected 'Invalid request. Request header conte…' to be 'POST body contains invalid type boole…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 31,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 58
            },
            "start": {
              "column": 26,
              "line": 58
            }
          }
        },
        {
          "id": "251",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'POST body contains invalid type objec…' to be 'Cannot extract information from body …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 32,
          "static": false,
          "killedBy": [
            "69"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 58
            },
            "start": {
              "column": 42,
              "line": 58
            }
          }
        },
        {
          "id": "252",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 60
            },
            "start": {
              "column": 9,
              "line": 60
            }
          }
        },
        {
          "id": "253",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Invalid request. Request header conte…' to be 'POST body contains invalid type boole…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 34,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 60
            },
            "start": {
              "column": 9,
              "line": 60
            }
          }
        },
        {
          "id": "254",
          "mutatorName": "LogicalOperator",
          "replacement": "!bodyIsString || !bodyIsObject",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 60
            },
            "start": {
              "column": 9,
              "line": 60
            }
          }
        },
        {
          "id": "255",
          "mutatorName": "BooleanLiteral",
          "replacement": "bodyIsString",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "68",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 60
            },
            "start": {
              "column": 9,
              "line": 60
            }
          }
        },
        {
          "id": "256",
          "mutatorName": "BooleanLiteral",
          "replacement": "bodyIsObject",
          "statusReason": "expected 'Invalid request. Request header conte…' to be 'POST body contains invalid type boole…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "68",
            "69",
            "70",
            "71",
            "72"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 60
            },
            "start": {
              "column": 26,
              "line": 60
            }
          }
        },
        {
          "id": "257",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Invalid request. Request header conte…' to be 'POST body contains invalid type boole…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "68"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 71
            },
            "start": {
              "column": 41,
              "line": 60
            }
          }
        },
        {
          "id": "258",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'POST body contains invalid type boole…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "68"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 70
            },
            "start": {
              "column": 16,
              "line": 61
            }
          }
        },
        {
          "id": "259",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "68"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 69
            },
            "start": {
              "column": 20,
              "line": 62
            }
          }
        },
        {
          "id": "260",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'Only \"object\" and \"string\" are suppor…' to be 'POST body contains invalid type boole…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "68"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 64
            },
            "start": {
              "column": 21,
              "line": 64
            }
          }
        },
        {
          "id": "261",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'POST body contains invalid type boole…' to be 'POST body contains invalid type boole…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "68"
          ],
          "coveredBy": [
            "68"
          ],
          "location": {
            "end": {
              "column": 68,
              "line": 65
            },
            "start": {
              "column": 25,
              "line": 65
            }
          }
        },
        {
          "id": "262",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 71
            },
            "start": {
              "column": 16,
              "line": 71
            }
          }
        },
        {
          "id": "263",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Invalid request. Request header conte…' to be 'Cannot extract information from body …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 31,
          "static": false,
          "killedBy": [
            "69"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 71
            },
            "start": {
              "column": 16,
              "line": 71
            }
          }
        },
        {
          "id": "264",
          "mutatorName": "LogicalOperator",
          "replacement": "bodyIsObject || body instanceof Buffer",
          "statusReason": "expected undefined to be '{\"query\":\"findTheQuery\"}' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 36,
          "static": false,
          "killedBy": [
            "71"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "69",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 71
            },
            "start": {
              "column": 16,
              "line": 71
            }
          }
        },
        {
          "id": "265",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Invalid request. Request header conte…' to be 'Cannot extract information from body …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "69"
          ],
          "coveredBy": [
            "69"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 82
            },
            "start": {
              "column": 56,
              "line": 71
            }
          }
        },
        {
          "id": "266",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Cannot extract information from body …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "69"
          ],
          "coveredBy": [
            "69"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 81
            },
            "start": {
              "column": 16,
              "line": 72
            }
          }
        },
        {
          "id": "267",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "69"
          ],
          "coveredBy": [
            "69"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 80
            },
            "start": {
              "column": 20,
              "line": 73
            }
          }
        },
        {
          "id": "268",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'body because it contains an object bu…' to be 'Cannot extract information from body …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "69"
          ],
          "coveredBy": [
            "69"
          ],
          "location": {
            "end": {
              "column": 55,
              "line": 75
            },
            "start": {
              "column": 21,
              "line": 75
            }
          }
        },
        {
          "id": "269",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'Cannot extract information from ' to be 'Cannot extract information from body …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "69"
          ],
          "coveredBy": [
            "69"
          ],
          "location": {
            "end": {
              "column": 69,
              "line": 76
            },
            "start": {
              "column": 25,
              "line": 76
            }
          }
        },
        {
          "id": "270",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected undefined to be '{\"query\":\"findTheQuery\"}' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "71"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 85
            },
            "start": {
              "column": 51,
              "line": 85
            }
          }
        },
        {
          "id": "271",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected undefined to be '{\"query\":\"findTheQuery\"}' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "71"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 87
            },
            "start": {
              "column": 9,
              "line": 87
            }
          }
        },
        {
          "id": "272",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'POST body contains invalid content ty…' to be 'Invalid request. Request header conte…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 16,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 87
            },
            "start": {
              "column": 9,
              "line": 87
            }
          }
        },
        {
          "id": "273",
          "mutatorName": "EqualityOperator",
          "replacement": "contentTypeFromHeader !== undefined",
          "statusReason": "expected undefined to be '{\"query\":\"findTheQuery\"}' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "71"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 87
            },
            "start": {
              "column": 9,
              "line": 87
            }
          }
        },
        {
          "id": "274",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'POST body contains invalid content ty…' to be 'Invalid request. Request header conte…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "17"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 98
            },
            "start": {
              "column": 46,
              "line": 87
            }
          }
        },
        {
          "id": "275",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'Request cannot be processed. No query…' to be 'Invalid request. Request header conte…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "17"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 97
            },
            "start": {
              "column": 16,
              "line": 88
            }
          }
        },
        {
          "id": "276",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'toJSON')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "17"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 96
            },
            "start": {
              "column": 20,
              "line": 89
            }
          }
        },
        {
          "id": "277",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'Request header content-type is undefi…' to be 'Invalid request. Request header conte…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "17"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 91
            },
            "start": {
              "column": 21,
              "line": 91
            }
          }
        },
        {
          "id": "278",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'Invalid request. ' to be 'Invalid request. Request header conte…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "17"
          ],
          "coveredBy": [
            "17"
          ],
          "location": {
            "end": {
              "column": 68,
              "line": 92
            },
            "start": {
              "column": 25,
              "line": 92
            }
          }
        },
        {
          "id": "279",
          "mutatorName": "ConditionalExpression",
          "replacement": "case ContentType.graphql:",
          "statusReason": "expected 'findTheQuery' to be '{\"query\":\"findTheQuery\"}' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "71"
          ],
          "coveredBy": [
            "21",
            "71",
            "72"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 104
            },
            "start": {
              "column": 9,
              "line": 102
            }
          }
        },
        {
          "id": "280",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'findTheQuery' to be '{\"query\":\"findTheQuery\"}' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "71"
          ],
          "coveredBy": [
            "21",
            "71",
            "72"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 104
            },
            "start": {
              "column": 35,
              "line": 102
            }
          }
        },
        {
          "id": "281",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be '{\"query\":\"findTheQuery\"}' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "71"
          ],
          "coveredBy": [
            "21",
            "71",
            "72"
          ],
          "location": {
            "end": {
              "column": 73,
              "line": 103
            },
            "start": {
              "column": 20,
              "line": 103
            }
          }
        },
        {
          "id": "282",
          "mutatorName": "ConditionalExpression",
          "replacement": "case ContentType.json:",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "9",
            "10",
            "12",
            "13",
            "14",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "70",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 139
            },
            "start": {
              "column": 9,
              "line": 105
            }
          }
        },
        {
          "id": "283",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "9",
            "10",
            "12",
            "13",
            "14",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "70",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 139
            },
            "start": {
              "column": 32,
              "line": 105
            }
          }
        },
        {
          "id": "284",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 28,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "9",
            "10",
            "12",
            "13",
            "14",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "70",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 106
            },
            "start": {
              "column": 17,
              "line": 106
            }
          }
        },
        {
          "id": "285",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "9",
            "10",
            "12",
            "13",
            "14",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "70",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 29,
              "line": 106
            },
            "start": {
              "column": 17,
              "line": 106
            }
          }
        },
        {
          "id": "286",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "9",
            "10",
            "12",
            "13",
            "14",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 128
            },
            "start": {
              "column": 31,
              "line": 106
            }
          }
        },
        {
          "id": "287",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "9",
            "10",
            "12",
            "13",
            "14",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 117
            },
            "start": {
              "column": 21,
              "line": 107
            }
          }
        },
        {
          "id": "288",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "9",
            "10",
            "12",
            "13",
            "14",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 116
            },
            "start": {
              "column": 28,
              "line": 109
            }
          }
        },
        {
          "id": "289",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "error.toJSON is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "9",
            "10",
            "12",
            "13",
            "14",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 115
            },
            "start": {
              "column": 29,
              "line": 113
            }
          }
        },
        {
          "id": "290",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "error.toJSON is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "9",
            "10",
            "12",
            "13",
            "14",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 115
            },
            "start": {
              "column": 29,
              "line": 113
            }
          }
        },
        {
          "id": "291",
          "mutatorName": "LogicalOperator",
          "replacement": "bodyAsJson.variables as Readonly<Record<string, unknown>> | null && undefined",
          "statusReason": "Cannot read properties of undefined (reading 'user')",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "3"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "9",
            "10",
            "12",
            "13",
            "14",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 115
            },
            "start": {
              "column": 29,
              "line": 113
            }
          }
        },
        {
          "id": "292",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Request cannot be processed. No query…' to be 'POST body contains invalid JSON.' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7",
            "22"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 127
            },
            "start": {
              "column": 25,
              "line": 117
            }
          }
        },
        {
          "id": "293",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'Request cannot be processed. No query…' to be 'POST body contains invalid JSON.' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7",
            "22"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 126
            },
            "start": {
              "column": 28,
              "line": 118
            }
          }
        },
        {
          "id": "294",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'toJSON')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7",
            "22"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 125
            },
            "start": {
              "column": 32,
              "line": 119
            }
          }
        },
        {
          "id": "295",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected ' contains invalid JSON.' to be 'POST body contains invalid JSON.' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7",
            "22"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 121
            },
            "start": {
              "column": 33,
              "line": 121
            }
          }
        },
        {
          "id": "296",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'POST body' to be 'POST body contains invalid JSON.' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7",
            "22"
          ],
          "location": {
            "end": {
              "column": 72,
              "line": 121
            },
            "start": {
              "column": 47,
              "line": 121
            }
          }
        },
        {
          "id": "297",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "70"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 138
            },
            "start": {
              "column": 20,
              "line": 128
            }
          }
        },
        {
          "id": "298",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "70"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 137
            },
            "start": {
              "column": 24,
              "line": 130
            }
          }
        },
        {
          "id": "299",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "70"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 136
            },
            "start": {
              "column": 25,
              "line": 134
            }
          }
        },
        {
          "id": "300",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "70"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 136
            },
            "start": {
              "column": 25,
              "line": 134
            }
          }
        },
        {
          "id": "301",
          "mutatorName": "LogicalOperator",
          "replacement": "bodyAsMap.variables as Readonly<Record<string, unknown>> | null && undefined",
          "status": "Survived",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "70"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 136
            },
            "start": {
              "column": 25,
              "line": 134
            }
          }
        },
        {
          "id": "302",
          "mutatorName": "ConditionalExpression",
          "replacement": "case ContentType.urlencoded:",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "19",
            "20"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 142
            },
            "start": {
              "column": 9,
              "line": 140
            }
          }
        },
        {
          "id": "303",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "19",
            "20"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 142
            },
            "start": {
              "column": 38,
              "line": 140
            }
          }
        },
        {
          "id": "304",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "19",
            "20"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 141
            },
            "start": {
              "column": 56,
              "line": 141
            }
          }
        },
        {
          "id": "305",
          "mutatorName": "ConditionalExpression",
          "replacement": "case ContentType.unknown:",
          "statusReason": "Cannot read properties of undefined (reading 'error')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "11",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 155
            },
            "start": {
              "column": 9,
              "line": 143
            }
          }
        },
        {
          "id": "306",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'error')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "11",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 155
            },
            "start": {
              "column": 35,
              "line": 143
            }
          }
        },
        {
          "id": "307",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected 'Request cannot be processed. No query…' to be 'POST body contains invalid content ty…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "11",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 154
            },
            "start": {
              "column": 20,
              "line": 144
            }
          }
        },
        {
          "id": "308",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'toJSON')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "11",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 153
            },
            "start": {
              "column": 24,
              "line": 145
            }
          }
        },
        {
          "id": "309",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'application/specialapp.' to be 'POST body contains invalid content ty…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "11",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 68,
              "line": 147
            },
            "start": {
              "column": 25,
              "line": 147
            }
          }
        },
        {
          "id": "310",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'POST body contains invalid content ty…' to be 'POST body contains invalid content ty…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "11",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 149
            },
            "start": {
              "column": 29,
              "line": 149
            }
          }
        },
        {
          "id": "311",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'POST body contains invalid content ty…' to be 'POST body contains invalid content ty…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "11",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 149
            },
            "start": {
              "column": 48,
              "line": 149
            }
          }
        }
      ],
      "source": "import {\n    ContentType,\n    GraphQLRequestInfo,\n    GraphQLServerRequest,\n} from '@dreamit/graphql-server-base'\nimport { GraphQLError } from 'graphql'\nimport { Buffer } from 'node:buffer'\nimport { URLSearchParams } from 'node:url'\nimport { getContentType } from '../'\n\nexport function extractInformationFromRequest(\n    request: GraphQLServerRequest,\n): GraphQLRequestInfo {\n    const extractedURLParameters = extractInformationFromUrlParameters(\n        request.url ?? '',\n    )\n    const extractedBody = extractInformationFromBody(request)\n    return {\n        error: extractedBody.error,\n        operationName:\n            extractedURLParameters.operationName ?? extractedBody.operationName,\n        query: extractedURLParameters.query ?? extractedBody.query,\n        variables: extractedURLParameters.variables ?? extractedBody.variables,\n    }\n}\n\nexport function extractInformationFromUrlParameters(\n    url: string,\n): GraphQLRequestInfo {\n    const urlParameters = new URLSearchParams(\n        url.slice(Math.max(0, url.indexOf('?'))),\n    )\n    const extractedQuery = urlParameters.get('query') ?? undefined\n    const extractedVariables =\n        (urlParameters.get('variables') as Readonly<\n            Record<string, unknown>\n        > | null) || undefined\n    const extractedOperationName =\n        urlParameters.get('operationName') ?? undefined\n    return {\n        operationName: extractedOperationName,\n        query: extractedQuery,\n        variables: extractedVariables,\n    }\n}\n\n/** Extracts information from request body. Based on implementation from express-graphql */\nexport function extractInformationFromBody(\n    request: GraphQLServerRequest,\n): GraphQLRequestInfo {\n    // Do not try to read body for GET requests\n    if (request.method && request.method === 'GET') {\n        return {}\n    }\n\n    const { body } = request\n    const bodyIsString = typeof body === 'string'\n    const bodyIsObject = typeof body === 'object'\n\n    if (!bodyIsString && !bodyIsObject) {\n        return {\n            error: {\n                graphQLError: new GraphQLError(\n                    `POST body contains invalid type ${typeof body}. ` +\n                        'Only \"object\" and \"string\" are supported.',\n                    {},\n                ),\n                statusCode: 400,\n            },\n        }\n    } else if (bodyIsObject && body instanceof Buffer) {\n        return {\n            error: {\n                graphQLError: new GraphQLError(\n                    'Cannot extract information from ' +\n                        'body because it contains an object buffer!',\n                    {},\n                ),\n                statusCode: 400,\n            },\n        }\n    }\n\n    // eslint-disable-next-line unicorn/consistent-destructuring\n    const contentTypeFromHeader = request.headers['content-type']\n\n    if (contentTypeFromHeader === undefined) {\n        return {\n            error: {\n                graphQLError: new GraphQLError(\n                    'Invalid request. ' +\n                        'Request header content-type is undefined.',\n                    {},\n                ),\n                statusCode: 400,\n            },\n        }\n    }\n\n    const contentType = getContentType(contentTypeFromHeader)\n    switch (contentType) {\n        case ContentType.graphql: {\n            return { query: bodyIsString ? body : JSON.stringify(body) }\n        }\n        case ContentType.json: {\n            if (bodyIsString) {\n                try {\n                    const bodyAsJson = JSON.parse(body)\n                    return {\n                        operationName: bodyAsJson.operationName,\n                        query: bodyAsJson.query,\n                        variables:\n                            (bodyAsJson.variables as Readonly<\n                                Record<string, unknown>\n                            > | null) || undefined,\n                    }\n                } catch {\n                    return {\n                        error: {\n                            graphQLError: new GraphQLError(\n                                'POST body' + ' contains invalid JSON.',\n                                {},\n                            ),\n                            statusCode: 400,\n                        },\n                    }\n                }\n            } else {\n                const bodyAsMap = body as Record<string, unknown>\n                return {\n                    operationName: bodyAsMap.operationName as string,\n                    query: bodyAsMap.query as string,\n                    variables:\n                        (bodyAsMap.variables as Readonly<\n                            Record<string, unknown>\n                        > | null) || undefined,\n                }\n            }\n        }\n        case ContentType.urlencoded: {\n            return extractInformationFromUrlParameters(`host?${body}.`)\n        }\n        case ContentType.unknown: {\n            return {\n                error: {\n                    graphQLError: new GraphQLError(\n                        'POST body contains invalid content type: ' +\n                            // eslint-disable-next-line unicorn/consistent-destructuring\n                            `${request.headers['content-type']}.`,\n                        {},\n                    ),\n                    statusCode: 400,\n                },\n            }\n        }\n    }\n}\n"
    },
    "src/request/GetContentType.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "312",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'error')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87",
            "122"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 67,
              "line": 3
            }
          }
        },
        {
          "id": "313",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'includes')",
          "status": "Killed",
          "testsCompleted": 36,
          "static": false,
          "killedBy": [
            "122"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87",
            "122"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 4
            },
            "start": {
              "column": 9,
              "line": 4
            }
          }
        },
        {
          "id": "314",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87",
            "122"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 4
            },
            "start": {
              "column": 9,
              "line": 4
            }
          }
        },
        {
          "id": "315",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be '{\"query\":\"findTheQuery\"}' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "71"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "12",
            "13",
            "14",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 12
            },
            "start": {
              "column": 22,
              "line": 4
            }
          }
        },
        {
          "id": "316",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "12",
            "13",
            "14",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 5
            },
            "start": {
              "column": 13,
              "line": 5
            }
          }
        },
        {
          "id": "317",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be '{\"query\":\"findTheQuery\"}' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "71"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "12",
            "13",
            "14",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "70",
            "71",
            "72",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 54,
              "line": 5
            },
            "start": {
              "column": 13,
              "line": 5
            }
          }
        },
        {
          "id": "318",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "21"
          ],
          "coveredBy": [
            "21",
            "71",
            "72"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 7
            },
            "start": {
              "column": 56,
              "line": 5
            }
          }
        },
        {
          "id": "319",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'POST body contains invalid content ty…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "12",
            "13",
            "14",
            "19",
            "20",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "70",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 58,
              "line": 7
            },
            "start": {
              "column": 20,
              "line": 7
            }
          }
        },
        {
          "id": "320",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "12",
            "13",
            "14",
            "19",
            "20",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "70",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 58,
              "line": 7
            },
            "start": {
              "column": 20,
              "line": 7
            }
          }
        },
        {
          "id": "321",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "9",
            "10",
            "12",
            "13",
            "14",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "70",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 9
            },
            "start": {
              "column": 60,
              "line": 7
            }
          }
        },
        {
          "id": "322",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'Request cannot be processed. No query…' to be 'POST body contains invalid content ty…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "8"
          ],
          "coveredBy": [
            "8",
            "19",
            "20"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 9
            },
            "start": {
              "column": 20,
              "line": 9
            }
          }
        },
        {
          "id": "323",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "8",
            "19",
            "20"
          ],
          "location": {
            "end": {
              "column": 64,
              "line": 9
            },
            "start": {
              "column": 20,
              "line": 9
            }
          }
        },
        {
          "id": "324",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "19"
          ],
          "coveredBy": [
            "19",
            "20"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 11
            },
            "start": {
              "column": 66,
              "line": 9
            }
          }
        }
      ],
      "source": "import { ContentType } from '@dreamit/graphql-server-base'\n\nexport function getContentType(contentType?: string): ContentType {\n    if (contentType) {\n        if (contentType.includes(ContentType.graphql)) {\n            return ContentType.graphql\n        } else if (contentType.includes(ContentType.json)) {\n            return ContentType.json\n        } else if (contentType.includes(ContentType.urlencoded)) {\n            return ContentType.urlencoded\n        }\n    }\n    return ContentType.unknown\n}\n"
    },
    "src/response/GraphQLExecutionResult.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "325",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "103"
          ],
          "coveredBy": [
            "6",
            "16",
            "18",
            "20",
            "22",
            "23",
            "28",
            "103",
            "104",
            "105"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 14
            },
            "start": {
              "column": 17,
              "line": 6
            }
          }
        },
        {
          "id": "326",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 9,
          "static": false,
          "killedBy": [
            "104"
          ],
          "coveredBy": [
            "6",
            "16",
            "18",
            "20",
            "22",
            "23",
            "28",
            "103",
            "104",
            "105"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 8
            }
          }
        },
        {
          "id": "327",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'No error found in ExecutionResult!' to be 'First error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "103"
          ],
          "coveredBy": [
            "6",
            "16",
            "18",
            "20",
            "22",
            "23",
            "28",
            "103",
            "104",
            "105"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 8
            }
          }
        },
        {
          "id": "328",
          "mutatorName": "LogicalOperator",
          "replacement": "result.executionResult.errors || result.executionResult.errors.length > 0",
          "statusReason": "Cannot read properties of undefined (reading 'length')",
          "status": "Killed",
          "testsCompleted": 9,
          "static": false,
          "killedBy": [
            "104"
          ],
          "coveredBy": [
            "6",
            "16",
            "18",
            "20",
            "22",
            "23",
            "28",
            "103",
            "104",
            "105"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 8
            }
          }
        },
        {
          "id": "329",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 9,
          "static": false,
          "killedBy": [
            "105"
          ],
          "coveredBy": [
            "6",
            "16",
            "18",
            "20",
            "22",
            "23",
            "28",
            "103",
            "105"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "330",
          "mutatorName": "EqualityOperator",
          "replacement": "result.executionResult.errors.length >= 0",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 9,
          "static": false,
          "killedBy": [
            "105"
          ],
          "coveredBy": [
            "6",
            "16",
            "18",
            "20",
            "22",
            "23",
            "28",
            "103",
            "105"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "331",
          "mutatorName": "EqualityOperator",
          "replacement": "result.executionResult.errors.length <= 0",
          "statusReason": "expected 'No error found in ExecutionResult!' to be 'First error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "103"
          ],
          "coveredBy": [
            "6",
            "16",
            "18",
            "20",
            "22",
            "23",
            "28",
            "103",
            "105"
          ],
          "location": {
            "end": {
              "column": 49,
              "line": 9
            },
            "start": {
              "column": 9,
              "line": 9
            }
          }
        },
        {
          "id": "332",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'No error found in ExecutionResult!' to be 'First error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "103"
          ],
          "coveredBy": [
            "6",
            "16",
            "18",
            "20",
            "22",
            "23",
            "28",
            "103"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 12
            },
            "start": {
              "column": 7,
              "line": 10
            }
          }
        },
        {
          "id": "333",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'No error found in ExecutionResult!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "104"
          ],
          "coveredBy": [
            "104",
            "105"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 13
            },
            "start": {
              "column": 29,
              "line": 13
            }
          }
        }
      ],
      "source": "import { GraphQLExecutionResult } from '@dreamit/graphql-server-base'\nimport { GraphQLError } from 'graphql'\n\nexport function getFirstErrorFromExecutionResult(\n    result: GraphQLExecutionResult,\n): GraphQLError {\n    if (\n        result.executionResult.errors &&\n        result.executionResult.errors.length > 0\n    ) {\n        return result.executionResult.errors[0]\n    }\n    return new GraphQLError('No error found in ExecutionResult!', {})\n}\n"
    },
    "src/response/SendResponse.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "334",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Unexpected end of JSON input",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 43
            },
            "start": {
              "column": 76,
              "line": 7
            }
          }
        },
        {
          "id": "335",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 85,
              "line": 19
            },
            "start": {
              "column": 9,
              "line": 19
            }
          }
        },
        {
          "id": "336",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 94,
              "line": 20
            },
            "start": {
              "column": 13,
              "line": 20
            }
          }
        },
        {
          "id": "337",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 39,
              "line": 21
            },
            "start": {
              "column": 13,
              "line": 21
            }
          }
        },
        {
          "id": "338",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'map')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 73,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "339",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Something went wrong!' to be 'Formatted: Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 15,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 73,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "340",
          "mutatorName": "LogicalOperator",
          "replacement": "executionResult && executionResult.errors || formatErrorFunction",
          "statusReason": "Cannot read properties of undefined (reading 'map')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 73,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "341",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'map')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "342",
          "mutatorName": "LogicalOperator",
          "replacement": "executionResult || executionResult.errors",
          "statusReason": "Cannot read properties of undefined (reading 'map')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 50,
              "line": 24
            },
            "start": {
              "column": 9,
              "line": 24
            }
          }
        },
        {
          "id": "343",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Something went wrong!' to be 'Formatted: Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "29",
            "31",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 26
            },
            "start": {
              "column": 75,
              "line": 24
            }
          }
        },
        {
          "id": "344",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected 'Something went wrong!' to be 'Formatted: Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [
            "14"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "29",
            "31",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 77,
              "line": 25
            },
            "start": {
              "column": 36,
              "line": 25
            }
          }
        },
        {
          "id": "345",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 36,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 27
            },
            "start": {
              "column": 9,
              "line": 27
            }
          }
        },
        {
          "id": "346",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 400 to be 401 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 36,
          "static": false,
          "killedBy": [
            "117"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 19,
              "line": 27
            },
            "start": {
              "column": 9,
              "line": 27
            }
          }
        },
        {
          "id": "347",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 400 to be 401 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 36,
          "static": false,
          "killedBy": [
            "117"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 29
            },
            "start": {
              "column": 21,
              "line": 27
            }
          }
        },
        {
          "id": "348",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected undefined to be 'application/json; charset=utf-8' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 36,
          "static": false,
          "killedBy": [
            "117"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 38,
              "line": 30
            },
            "start": {
              "column": 24,
              "line": 30
            }
          }
        },
        {
          "id": "349",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'application/json; charset=utf-8' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 36,
          "static": false,
          "killedBy": [
            "117"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 73,
              "line": 30
            },
            "start": {
              "column": 40,
              "line": 30
            }
          }
        },
        {
          "id": "350",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot convert undefined or null to object",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "86"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 31
            },
            "start": {
              "column": 9,
              "line": 31
            }
          }
        },
        {
          "id": "351",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be 'GET, POST' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 24,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 31
            },
            "start": {
              "column": 9,
              "line": 31
            }
          }
        },
        {
          "id": "352",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'GET, POST' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "16",
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 36
            },
            "start": {
              "column": 24,
              "line": 31
            }
          }
        },
        {
          "id": "353",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'GET, POST' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "16",
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 35
            },
            "start": {
              "column": 67,
              "line": 32
            }
          }
        },
        {
          "id": "354",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 64,
              "line": 33
            },
            "start": {
              "column": 26,
              "line": 33
            }
          }
        },
        {
          "id": "355",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "responseEndChunkFunction is not a function",
          "status": "Killed",
          "testsCompleted": 36,
          "static": false,
          "killedBy": [
            "117"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 33,
              "line": 38
            },
            "start": {
              "column": 9,
              "line": 38
            }
          }
        },
        {
          "id": "356",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "testsCompleted": 36,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87",
            "117"
          ],
          "location": {
            "end": {
              "column": 33,
              "line": 38
            },
            "start": {
              "column": 9,
              "line": 38
            }
          }
        },
        {
          "id": "357",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Unexpected end of JSON input",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "86"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 40
            },
            "start": {
              "column": 35,
              "line": 38
            }
          }
        },
        {
          "id": "358",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Unexpected end of JSON input",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "117"
          ],
          "coveredBy": [
            "117"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 42
            },
            "start": {
              "column": 12,
              "line": 40
            }
          }
        },
        {
          "id": "359",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "117"
          ],
          "location": {
            "end": {
              "column": 73,
              "line": 41
            },
            "start": {
              "column": 67,
              "line": 41
            }
          }
        }
      ],
      "source": "import { ResponseParameters } from '@dreamit/graphql-server-base'\nimport { Buffer } from 'node:buffer'\n\n/**\n * Default implementation of sendResponse function\n */\nexport function sendResponse(responseParameters: ResponseParameters): void {\n    const {\n        customHeaders,\n        context,\n        executionResult,\n        logger,\n        response,\n        statusCode,\n        formatErrorFunction,\n        responseEndChunkFunction,\n    } = responseParameters\n    logger.debug(\n        `Preparing response with executionResult ${JSON.stringify(executionResult)}` +\n            `, status code ${statusCode} and custom headers ${JSON.stringify(customHeaders)}` +\n            `, and context ${context}`,\n        context,\n    )\n    if (executionResult && executionResult.errors && formatErrorFunction) {\n        executionResult.errors.map((element) => formatErrorFunction(element))\n    }\n    if (statusCode) {\n        response.statusCode = statusCode\n    }\n    response.setHeader('Content-Type', 'application/json; charset=utf-8')\n    if (customHeaders) {\n        for (const [key, value] of Object.entries(customHeaders)) {\n            logger.debug(`Set custom header ${key} to ${value}`, context)\n            response.setHeader(key, String(value))\n        }\n    }\n\n    if (responseEndChunkFunction) {\n        response.end(responseEndChunkFunction(executionResult))\n    } else {\n        response.end(Buffer.from(JSON.stringify(executionResult), 'utf8'))\n    }\n}\n"
    },
    "src/server/DefaultGraphQLServerOptions.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "360",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 72,
              "line": 36
            },
            "start": {
              "column": 5,
              "line": 36
            }
          }
        },
        {
          "id": "361",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 66,
              "line": 38
            },
            "start": {
              "column": 5,
              "line": 38
            }
          }
        },
        {
          "id": "362",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 77,
              "line": 40
            },
            "start": {
              "column": 5,
              "line": 40
            }
          }
        },
        {
          "id": "363",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 22,
              "line": 43
            },
            "start": {
              "column": 5,
              "line": 43
            }
          }
        },
        {
          "id": "364",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 23,
              "line": 44
            },
            "start": {
              "column": 5,
              "line": 44
            }
          }
        },
        {
          "id": "365",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 56
            },
            "start": {
              "column": 62,
              "line": 46
            }
          }
        },
        {
          "id": "366",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 6,
              "line": 54
            },
            "start": {
              "column": 22,
              "line": 47
            }
          }
        },
        {
          "id": "367",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 10,
              "line": 53
            },
            "start": {
              "column": 17,
              "line": 48
            }
          }
        },
        {
          "id": "368",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 84,
              "line": 50
            },
            "start": {
              "column": 17,
              "line": 50
            }
          }
        },
        {
          "id": "369",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "expected [ 'Stryker was here' ] to strictly equal []",
          "status": "Killed",
          "testsCompleted": 12,
          "static": true,
          "killedBy": [
            "79"
          ],
          "coveredBy": [
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "79",
            "87"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 71
            },
            "start": {
              "column": 60,
              "line": 71
            }
          }
        },
        {
          "id": "370",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true // Object.is equality",
          "status": "Killed",
          "testsCompleted": 12,
          "static": true,
          "killedBy": [
            "79"
          ],
          "coveredBy": [
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "79",
            "87"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 72
            },
            "start": {
              "column": 39,
              "line": 72
            }
          }
        },
        {
          "id": "371",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false // Object.is equality",
          "status": "Killed",
          "testsCompleted": 12,
          "static": true,
          "killedBy": [
            "79"
          ],
          "coveredBy": [
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "79",
            "87"
          ],
          "location": {
            "end": {
              "column": 35,
              "line": 73
            },
            "start": {
              "column": 30,
              "line": 73
            }
          }
        },
        {
          "id": "372",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to strictly equal { message: 'An error' }",
          "status": "Killed",
          "testsCompleted": 21,
          "static": false,
          "killedBy": [
            "80"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "29",
            "31",
            "80",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 108
            },
            "start": {
              "column": 26,
              "line": 106
            }
          }
        },
        {
          "id": "373",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to strictly equal { Object (headers) }",
          "status": "Killed",
          "testsCompleted": 41,
          "static": false,
          "killedBy": [
            "81"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "81",
            "87"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 130
            },
            "start": {
              "column": 13,
              "line": 119
            }
          }
        },
        {
          "id": "374",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'debug')",
          "status": "Killed",
          "testsCompleted": 40,
          "static": false,
          "killedBy": [
            "81"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "81",
            "87"
          ],
          "location": {
            "end": {
              "column": 15,
              "line": 122
            },
            "start": {
              "column": 9,
              "line": 122
            }
          }
        },
        {
          "id": "375",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be 'Calling defaultRequestResponseContext…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 41,
          "static": false,
          "killedBy": [
            "81"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "81",
            "87"
          ],
          "location": {
            "end": {
              "column": 15,
              "line": 122
            },
            "start": {
              "column": 9,
              "line": 122
            }
          }
        },
        {
          "id": "376",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Calling defaultRequestResponseContext…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 35,
          "static": false,
          "killedBy": [
            "81"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "81",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 128
            },
            "start": {
              "column": 17,
              "line": 122
            }
          }
        },
        {
          "id": "377",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 66,
              "line": 124
            },
            "start": {
              "column": 13,
              "line": 124
            }
          }
        },
        {
          "id": "378",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 62,
              "line": 125
            },
            "start": {
              "column": 17,
              "line": 125
            }
          }
        },
        {
          "id": "379",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Calling defaultExtensions for request…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 16,
          "static": false,
          "killedBy": [
            "82"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "13",
            "14",
            "15",
            "19",
            "21",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "82",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 157
            },
            "start": {
              "column": 41,
              "line": 144
            }
          }
        },
        {
          "id": "380",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'debug')",
          "status": "Killed",
          "testsCompleted": 24,
          "static": false,
          "killedBy": [
            "82"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "13",
            "14",
            "15",
            "19",
            "21",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "82",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 15,
              "line": 148
            },
            "start": {
              "column": 9,
              "line": 148
            }
          }
        },
        {
          "id": "381",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be 'Calling defaultExtensions for request…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 16,
          "static": false,
          "killedBy": [
            "82"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "13",
            "14",
            "15",
            "19",
            "21",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "82",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 15,
              "line": 148
            },
            "start": {
              "column": 9,
              "line": 148
            }
          }
        },
        {
          "id": "382",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Calling defaultExtensions for request…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "82"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "13",
            "14",
            "15",
            "19",
            "21",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "82",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 154
            },
            "start": {
              "column": 17,
              "line": 148
            }
          }
        },
        {
          "id": "383",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 94,
              "line": 150
            },
            "start": {
              "column": 13,
              "line": 150
            }
          }
        },
        {
          "id": "384",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 74,
              "line": 151
            },
            "start": {
              "column": 17,
              "line": 151
            }
          }
        },
        {
          "id": "385",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 23,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "83",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 180
            },
            "start": {
              "column": 10,
              "line": 168
            }
          }
        },
        {
          "id": "386",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'debug')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "118"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "83",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 15,
              "line": 171
            },
            "start": {
              "column": 9,
              "line": 171
            }
          }
        },
        {
          "id": "387",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be 'Calling defaultCollectErrorMetrics wi…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 36,
          "static": false,
          "killedBy": [
            "83"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "83",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 15,
              "line": 171
            },
            "start": {
              "column": 9,
              "line": 171
            }
          }
        },
        {
          "id": "388",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'Calling defaultCollectErrorMetrics wi…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 36,
          "static": false,
          "killedBy": [
            "83"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "83",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 176
            },
            "start": {
              "column": 17,
              "line": 171
            }
          }
        },
        {
          "id": "389",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 96,
              "line": 173
            },
            "start": {
              "column": 13,
              "line": 173
            }
          }
        },
        {
          "id": "390",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'increaseErrors')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "118"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "83",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 177
            },
            "start": {
              "column": 9,
              "line": 177
            }
          }
        },
        {
          "id": "391",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 23,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "83",
            "86",
            "87",
            "118"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 177
            },
            "start": {
              "column": 9,
              "line": 177
            }
          }
        },
        {
          "id": "392",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 23,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "2",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "16",
            "17",
            "18",
            "20",
            "22",
            "23",
            "26",
            "27",
            "28",
            "29",
            "31",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "53",
            "54",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 179
            },
            "start": {
              "column": 24,
              "line": 177
            }
          }
        },
        {
          "id": "393",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'Request cannot be processed. Schema i…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": true,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 190
            },
            "start": {
              "column": 76,
              "line": 188
            }
          }
        },
        {
          "id": "394",
          "mutatorName": "BooleanLiteral",
          "replacement": "!schema",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'Request cannot be processed. Schema i…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": true,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 189
            },
            "start": {
              "column": 12,
              "line": 189
            }
          }
        },
        {
          "id": "395",
          "mutatorName": "BooleanLiteral",
          "replacement": "schema",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'Request cannot be processed. Schema i…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": true,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 189
            },
            "start": {
              "column": 13,
              "line": 189
            }
          }
        },
        {
          "id": "396",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'executionResult')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 213
            },
            "start": {
              "column": 27,
              "line": 199
            }
          }
        },
        {
          "id": "397",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'errors')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 212
            },
            "start": {
              "column": 12,
              "line": 200
            }
          }
        },
        {
          "id": "398",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'GET, POST' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 46,
              "line": 201
            },
            "start": {
              "column": 24,
              "line": 201
            }
          }
        },
        {
          "id": "399",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to be 'GET, POST' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 201
            },
            "start": {
              "column": 33,
              "line": 201
            }
          }
        },
        {
          "id": "400",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 210
            },
            "start": {
              "column": 26,
              "line": 202
            }
          }
        },
        {
          "id": "401",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 209
            },
            "start": {
              "column": 21,
              "line": 203
            }
          }
        },
        {
          "id": "402",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected ' Got PUT' to be 'GraphQL server only supports GET and …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 74,
              "line": 205
            },
            "start": {
              "column": 21,
              "line": 205
            }
          }
        },
        {
          "id": "403",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'GraphQL server only supports GET and …' to be 'GraphQL server only supports GET and …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 206
            },
            "start": {
              "column": 25,
              "line": 206
            }
          }
        },
        {
          "id": "404",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'executionResult')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "18",
            "20"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 235
            },
            "start": {
              "column": 27,
              "line": 222
            }
          }
        },
        {
          "id": "405",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'errors')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "18",
            "20"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 234
            },
            "start": {
              "column": 12,
              "line": 223
            }
          }
        },
        {
          "id": "406",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "18",
            "20"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 232
            },
            "start": {
              "column": 26,
              "line": 224
            }
          }
        },
        {
          "id": "407",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "18",
            "20"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 231
            },
            "start": {
              "column": 21,
              "line": 225
            }
          }
        },
        {
          "id": "408",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'in parameters or body. Used method is…' to be 'Request cannot be processed. No query…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "18",
            "20"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 227
            },
            "start": {
              "column": 21,
              "line": 227
            }
          }
        },
        {
          "id": "409",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'Request cannot be processed. No query…' to be 'Request cannot be processed. No query…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "18",
            "20"
          ],
          "location": {
            "end": {
              "column": 74,
              "line": 228
            },
            "start": {
              "column": 25,
              "line": 228
            }
          }
        },
        {
          "id": "410",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to strictly equal { …(3) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "84"
          ],
          "coveredBy": [
            "16",
            "84"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 259
            },
            "start": {
              "column": 27,
              "line": 245
            }
          }
        },
        {
          "id": "411",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'errors')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "84"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 258
            },
            "start": {
              "column": 12,
              "line": 246
            }
          }
        },
        {
          "id": "412",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected { customHeaders: {}, …(2) } to strictly equal { …(3) }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "84"
          ],
          "coveredBy": [
            "16",
            "84"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 247
            },
            "start": {
              "column": 24,
              "line": 247
            }
          }
        },
        {
          "id": "413",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { customHeaders: { allow: '' }, …(2) } to strictly equal { …(3) }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "84"
          ],
          "coveredBy": [
            "16",
            "84"
          ],
          "location": {
            "end": {
              "column": 39,
              "line": 247
            },
            "start": {
              "column": 33,
              "line": 247
            }
          }
        },
        {
          "id": "414",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "84"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 256
            },
            "start": {
              "column": 26,
              "line": 248
            }
          }
        },
        {
          "id": "415",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "84"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 255
            },
            "start": {
              "column": 21,
              "line": 249
            }
          }
        },
        {
          "id": "416",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected ' Got: \"mutation\"' to be 'Only \"query\" operation is allowed in …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "84"
          ],
          "location": {
            "end": {
              "column": 75,
              "line": 251
            },
            "start": {
              "column": 21,
              "line": 251
            }
          }
        },
        {
          "id": "417",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'Only \"query\" operation is allowed in …' to be 'Only \"query\" operation is allowed in …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16",
            "84"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 252
            },
            "start": {
              "column": 25,
              "line": 252
            }
          }
        },
        {
          "id": "418",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Unexpected end of JSON input",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 270
            },
            "start": {
              "column": 12,
              "line": 268
            }
          }
        },
        {
          "id": "419",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 35,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 63,
              "line": 269
            },
            "start": {
              "column": 57,
              "line": 269
            }
          }
        }
      ],
      "source": "import {\n    GraphQLExecutionResult,\n    GraphQLRequestInfo,\n    GraphQLServerRequest,\n    GraphQLServerResponse,\n    Logger,\n    MetricsClient,\n    ResponseParameters,\n} from '@dreamit/graphql-server-base'\nimport {\n    ExecutionResult,\n    GraphQLError,\n    GraphQLFieldResolver,\n    GraphQLFormattedError,\n    GraphQLSchema,\n    GraphQLTypeResolver,\n    TypeInfo,\n    ValidationRule,\n    execute,\n    parse,\n    specifiedRules,\n    validate,\n    validateSchema,\n} from 'graphql'\nimport { Buffer } from 'node:buffer'\nimport {\n    GraphQLServerOptions,\n    SimpleMetricsClient,\n    StandaloneResponseParameters,\n    TextLogger,\n    extractInformationFromRequest,\n    sendResponse,\n} from '../'\n\nexport const defaultGraphqlExecutionErrorMessage =\n    'While processing the request a GraphQL execution error occurred: '\nexport const defaultExecutionResultErrorMessage =\n    'While processing the request the following error occurred: '\nexport const defaultValidationErrorMessage =\n    'While processing the request the following validation error occurred: '\n\nexport const fallbackTextLogger: Logger = new TextLogger(\n    'fallback-logger',\n    'fallback-service',\n)\nexport const invalidSchemaResponse: GraphQLExecutionResult = {\n    executionResult: {\n        errors: [\n            new GraphQLError(\n                'Request cannot be processed. Schema in GraphQL server is invalid.',\n                {},\n            ),\n        ],\n    },\n    statusCode: 500,\n}\n\nexport class DefaultGraphQLServerOptions implements GraphQLServerOptions {\n    logger: Logger = fallbackTextLogger\n    extractInformationFromRequest: (\n        request: GraphQLServerRequest,\n    ) => GraphQLRequestInfo = extractInformationFromRequest\n    sendResponse: (responseParameters: ResponseParameters) => void =\n        sendResponse\n    metricsClient: MetricsClient = new SimpleMetricsClient()\n    formatErrorFunction = defaultFormatErrorFunction\n    collectErrorMetricsFunction = defaultCollectErrorMetrics\n    schemaValidationFunction = validateSchema\n    parseFunction = parse\n    defaultValidationRules = specifiedRules\n    customValidationRules: ReadonlyArray<ValidationRule> = []\n    removeValidationRecommendations = true\n    reassignAggregateError = false\n    validateFunction = validate\n    contextFunction = defaultContextFunction\n    executeFunction = execute\n    extensionFunction = defaultExtensions\n    shouldUpdateSchemaFunction = defaultShouldUpdateSchema\n    validationTypeInfo?: TypeInfo\n    validationOptions?: { maxErrors?: number }\n    rootValue?: unknown\n    fieldResolver?: null | undefined | GraphQLFieldResolver<unknown, unknown>\n    typeResolver?: null | undefined | GraphQLTypeResolver<unknown, unknown>\n    schema?: GraphQLSchema\n    invalidSchemaResponse = invalidSchemaResponse\n    missingQueryParameterResponse = defaultMissingQueryParameterResponse\n    methodNotAllowedResponse = defaultMethodNotAllowedResponse\n    onlyQueryInGetRequestsResponse = defaultOnlyQueryInGetRequestsResponse\n    validationErrorMessage = defaultValidationErrorMessage\n    executionResultErrorMessage = defaultExecutionResultErrorMessage\n    graphqlExecutionErrorMessage = defaultGraphqlExecutionErrorMessage\n    responseEndChunkFunction = defaultResponseEndChunkFunction\n    fetchErrorMessage?: string\n    adjustGraphQLExecutionResult?: (\n        parameters: StandaloneResponseParameters,\n    ) => GraphQLExecutionResult\n}\n\n/**\n * Default format error function to format error if necessary.\n * Default behaviour: Calls toJSON function of error. Can be set in options.\n * @param {GraphQLError} error - The error to be formatted\n */\nexport function defaultFormatErrorFunction(\n    error: GraphQLError,\n): GraphQLFormattedError {\n    return error.toJSON()\n}\n\n/**\n * Default context function to store information in context for further use.\n * Default behaviour: return request object. Can be set in options.\n * @param contextParameters - The context parameters\n */\nexport function defaultContextFunction(contextParameters: {\n    serverOptions: GraphQLServerOptions\n    request?: GraphQLServerRequest\n    response?: GraphQLServerResponse\n}): unknown {\n    const { serverOptions, request, response } = contextParameters\n    const logger = serverOptions.logger\n    if (logger) {\n        logger.debug(\n            'Calling defaultRequestResponseContextFunction with ' +\n                `request ${request} and response ${response}`,\n            request,\n        )\n    }\n    return request\n}\n\n/**\n * Default extension function that can be used\n * to fill extensions field of GraphQL response. Can be set in options.\n * @param extensionParameters - The extensions parameters\n * @returns {Record<string, unknown>}\n * A key-value map to be added as extensions in response\n */\nexport function defaultExtensions(extensionParameters: {\n    requestInformation: GraphQLRequestInfo\n    executionResult: ExecutionResult\n    serverOptions: GraphQLServerOptions\n    context?: unknown\n}): Record<string, unknown> | undefined {\n    const { requestInformation, executionResult, serverOptions, context } =\n        extensionParameters\n    const logger = serverOptions.logger\n    if (logger) {\n        logger.debug(\n            `Calling defaultExtensions for requestInfo ${JSON.stringify(requestInformation)}` +\n                ` and executionResult ${JSON.stringify(executionResult)}`,\n            context,\n        )\n    }\n\n    return undefined\n}\n\n/**\n * Default collect error metrics function. Can be set in options.\n * @param errorParameters - The error parameters\n */\nexport function defaultCollectErrorMetrics(errorParameters: {\n    errorName: string\n    error: unknown\n    serverOptions: GraphQLServerOptions\n    context?: unknown\n}): void {\n    const { errorName, error, serverOptions, context } = errorParameters\n    const { logger, metricsClient } = serverOptions\n    if (logger) {\n        logger.debug(\n            `Calling defaultCollectErrorMetrics with error ${error} and errorName ${errorName}`,\n            context,\n        )\n    }\n    if (metricsClient) {\n        metricsClient.increaseErrors(errorName, context)\n    }\n}\n\n/**\n * Determines whether a schema update should be executed.\n * Default behaviour: If schema is undefined return false.\n * @param {GraphQLSchema} schema - The new schema to use as updated schema.\n * @returns {boolean} True if schema should be updated, false if not\n */\nexport function defaultShouldUpdateSchema(schema?: GraphQLSchema): boolean {\n    return !!schema\n}\n\n/**\n * Return a default error message if used method is not allowed by GraphQLServer\n * @param {string} method - The actual used method\n * @returns {GraphQLExecutionResult} A MethodNotAllowed response\n */\nexport function defaultMethodNotAllowedResponse(\n    method?: string,\n): GraphQLExecutionResult {\n    return {\n        customHeaders: { allow: 'GET, POST' },\n        executionResult: {\n            errors: [\n                new GraphQLError(\n                    'GraphQL server only supports GET and POST requests.' +\n                        ` Got ${method}`,\n                    {},\n                ),\n            ],\n        },\n        statusCode: 405,\n    }\n}\n\n/**\n * Return a default error message if no query information is found in body or URL parameter\n * @param {string} method - The actual used method\n * @returns {GraphQLExecutionResult} A MissingQueryParameter response\n */\nexport function defaultMissingQueryParameterResponse(\n    method?: string,\n): GraphQLExecutionResult {\n    return {\n        executionResult: {\n            errors: [\n                new GraphQLError(\n                    'Request cannot be processed. No query was found ' +\n                        `in parameters or body. Used method is ${method}`,\n                    {},\n                ),\n            ],\n        },\n        statusCode: 400,\n    }\n}\n\n/**\n * Return a default error message if an unsupported operation is used in GET requests.\n * Default: Only supported operation is \"query\"\n * @param {string} operation - The actual used operation\n * @returns {GraphQLExecutionResult} A OnlyQueryInGetRequestsResponse response\n */\nexport function defaultOnlyQueryInGetRequestsResponse(\n    operation?: string,\n): GraphQLExecutionResult {\n    return {\n        customHeaders: { allow: 'POST' },\n        executionResult: {\n            errors: [\n                new GraphQLError(\n                    'Only \"query\" operation is allowed in \"GET\" requests.' +\n                        ` Got: \"${operation}\"`,\n                    {},\n                ),\n            ],\n        },\n        statusCode: 405,\n    }\n}\n\n/**\n * Default response.end chunk function to adjust chunk/Body if necessary.\n * Default behavior: Create Buffer from stringified executionResult\n * @param {GraphQLError} error - The error to be formatted\n */\nexport function defaultResponseEndChunkFunction(\n    executionResult: ExecutionResult | undefined,\n): unknown {\n    return Buffer.from(JSON.stringify(executionResult), 'utf8')\n}\n"
    },
    "src/server/GraphQLServer.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "420",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Static mutant (and \"ignoreStatic\" was enabled)",
          "status": "Ignored",
          "static": true,
          "coveredBy": [],
          "location": {
            "end": {
              "column": 70,
              "line": 35
            },
            "start": {
              "column": 36,
              "line": 35
            }
          }
        },
        {
          "id": "421",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "Survived",
          "testsCompleted": 12,
          "static": true,
          "killedBy": [],
          "coveredBy": [
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "87"
          ],
          "location": {
            "end": {
              "column": 61,
              "line": 40
            },
            "start": {
              "column": 59,
              "line": 40
            }
          }
        },
        {
          "id": "422",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be defined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "48"
          ],
          "coveredBy": [
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 44
            },
            "start": {
              "column": 58,
              "line": 42
            }
          }
        },
        {
          "id": "423",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '{\"data\":{\"users\":[{\"userId\":\"1\",\"user…' to strictly equal '\"customResponse\"'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "85"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 52
            },
            "start": {
              "column": 57,
              "line": 46
            }
          }
        },
        {
          "id": "424",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'info')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 47
            },
            "start": {
              "column": 24,
              "line": 47
            }
          }
        },
        {
          "id": "425",
          "mutatorName": "LogicalOperator",
          "replacement": "newOptions?.metricsClient && new SimpleMetricsClient()",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 49
            },
            "start": {
              "column": 13,
              "line": 49
            }
          }
        },
        {
          "id": "426",
          "mutatorName": "OptionalChaining",
          "replacement": "newOptions.metricsClient",
          "statusReason": "Cannot read properties of undefined (reading 'metricsClient')",
          "status": "Killed",
          "testsCompleted": 22,
          "static": true,
          "killedBy": [
            "57"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 38,
              "line": 49
            },
            "start": {
              "column": 13,
              "line": 49
            }
          }
        },
        {
          "id": "427",
          "mutatorName": "OptionalChaining",
          "replacement": "newOptions.schema",
          "statusReason": "Cannot read properties of undefined (reading 'schema')",
          "status": "Killed",
          "testsCompleted": 22,
          "static": true,
          "killedBy": [
            "57"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 42,
              "line": 51
            },
            "start": {
              "column": 24,
              "line": 51
            }
          }
        },
        {
          "id": "428",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '' to be 'text/plain; charset=utf-8; version=0.…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 24,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 63
            },
            "start": {
              "column": 58,
              "line": 58
            }
          }
        },
        {
          "id": "429",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be defined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "48"
          ],
          "coveredBy": [
            "48",
            "49",
            "50",
            "51"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 67
            },
            "start": {
              "column": 44,
              "line": 65
            }
          }
        },
        {
          "id": "430",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 71
            },
            "start": {
              "column": 52,
              "line": 69
            }
          }
        },
        {
          "id": "431",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_availability 0'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 70
            },
            "start": {
              "column": 25,
              "line": 70
            }
          }
        },
        {
          "id": "432",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_availability 1'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 70
            },
            "start": {
              "column": 25,
              "line": 70
            }
          }
        },
        {
          "id": "433",
          "mutatorName": "EqualityOperator",
          "replacement": "this.schemaValidationErrors.length !== 0",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_availability 1'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 65,
              "line": 70
            },
            "start": {
              "column": 25,
              "line": 70
            }
          }
        },
        {
          "id": "434",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_availability 0'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "57"
          ],
          "coveredBy": [
            "51",
            "57"
          ],
          "location": {
            "end": {
              "column": 73,
              "line": 70
            },
            "start": {
              "column": 68,
              "line": 70
            }
          }
        },
        {
          "id": "435",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'Request cannot be processed. Schema i…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": true,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 111
            },
            "start": {
              "column": 45,
              "line": 73
            }
          }
        },
        {
          "id": "436",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 51,
              "line": 75
            },
            "start": {
              "column": 21,
              "line": 75
            }
          }
        },
        {
          "id": "437",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 60,
              "line": 76
            },
            "start": {
              "column": 22,
              "line": 76
            }
          }
        },
        {
          "id": "438",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected undefined to be defined",
          "status": "Killed",
          "testsCompleted": 17,
          "static": true,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 77
            },
            "start": {
              "column": 13,
              "line": 77
            }
          }
        },
        {
          "id": "439",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'Request cannot be processed. Schema i…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": true,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 77
            },
            "start": {
              "column": 13,
              "line": 77
            }
          }
        },
        {
          "id": "440",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'Request cannot be processed. Schema i…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": true,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 102
            },
            "start": {
              "column": 62,
              "line": 77
            }
          }
        },
        {
          "id": "441",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Expected undefined to be a GraphQL schema.",
          "status": "Killed",
          "testsCompleted": 18,
          "static": true,
          "killedBy": [
            "51"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 80
            },
            "start": {
              "column": 17,
              "line": 80
            }
          }
        },
        {
          "id": "442",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'Request cannot be processed. Schema i…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": true,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 80
            },
            "start": {
              "column": 17,
              "line": 80
            }
          }
        },
        {
          "id": "443",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'Request cannot be processed. Schema i…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": true,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 101
            },
            "start": {
              "column": 38,
              "line": 80
            }
          }
        },
        {
          "id": "444",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'Schema validation failed with errors.…' to be 'Error: Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 22,
          "static": true,
          "killedBy": [
            "53"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 83
            },
            "start": {
              "column": 21,
              "line": 83
            }
          }
        },
        {
          "id": "445",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 83
            },
            "start": {
              "column": 21,
              "line": 83
            }
          }
        },
        {
          "id": "446",
          "mutatorName": "EqualityOperator",
          "replacement": "this.schemaValidationErrors.length >= 0",
          "statusReason": "expected 'Schema validation failed with errors.…' to be 'Error: Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": true,
          "killedBy": [
            "53"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 83
            },
            "start": {
              "column": 21,
              "line": 83
            }
          }
        },
        {
          "id": "447",
          "mutatorName": "EqualityOperator",
          "replacement": "this.schemaValidationErrors.length <= 0",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": true,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "10",
            "12",
            "14",
            "22",
            "24",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 59,
              "line": 83
            },
            "start": {
              "column": 21,
              "line": 83
            }
          }
        },
        {
          "id": "448",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "22",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 100
            },
            "start": {
              "column": 61,
              "line": 83
            }
          }
        },
        {
          "id": "449",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 65,
              "line": 85
            },
            "start": {
              "column": 25,
              "line": 85
            }
          }
        },
        {
          "id": "450",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 88,
              "line": 86
            },
            "start": {
              "column": 29,
              "line": 86
            }
          }
        },
        {
          "id": "451",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Sch…'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "22",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 99
            },
            "start": {
              "column": 70,
              "line": 88
            }
          }
        },
        {
          "id": "452",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 67,
              "line": 90
            },
            "start": {
              "column": 29,
              "line": 90
            }
          }
        },
        {
          "id": "453",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot destructure property 'logger' of 'serverOptions' as it is undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "48"
          ],
          "coveredBy": [
            "22",
            "33",
            "34",
            "48",
            "49",
            "50",
            "51"
          ],
          "location": {
            "end": {
              "column": 26,
              "line": 98
            },
            "start": {
              "column": 66,
              "line": 94
            }
          }
        },
        {
          "id": "454",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Trying to set graphql schema' to be 'Schema update was rejected because co…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "50"
          ],
          "coveredBy": [
            "50",
            "57"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 107
            },
            "start": {
              "column": 16,
              "line": 102
            }
          }
        },
        {
          "id": "455",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 63,
              "line": 104
            },
            "start": {
              "column": 17,
              "line": 104
            }
          }
        },
        {
          "id": "456",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 76,
              "line": 105
            },
            "start": {
              "column": 21,
              "line": 105
            }
          }
        },
        {
          "id": "457",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 1 // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "48"
          ],
          "coveredBy": [
            "48",
            "49",
            "50"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 115
            },
            "start": {
              "column": 74,
              "line": 113
            }
          }
        },
        {
          "id": "458",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'text/plain; charset=utf-8; version=0.…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 120
            },
            "start": {
              "column": 37,
              "line": 118
            }
          }
        },
        {
          "id": "459",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "33",
            "34",
            "55",
            "56",
            "57"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 125
            },
            "start": {
              "column": 41,
              "line": 123
            }
          }
        },
        {
          "id": "460",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_request_throughput 1'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 223
            },
            "start": {
              "column": 40,
              "line": 137
            }
          }
        },
        {
          "id": "461",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'logger')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "52"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 152
            },
            "start": {
              "column": 41,
              "line": 148
            }
          }
        },
        {
          "id": "462",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 159
            },
            "start": {
              "column": 13,
              "line": 158
            }
          }
        },
        {
          "id": "463",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "testsCompleted": 43,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 159
            },
            "start": {
              "column": 13,
              "line": 158
            }
          }
        },
        {
          "id": "464",
          "mutatorName": "LogicalOperator",
          "replacement": "isGraphQLServerRequest(request) || 'executionResult' in requestInformation",
          "statusReason": "The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 52,
              "line": 159
            },
            "start": {
              "column": 13,
              "line": 158
            }
          }
        },
        {
          "id": "465",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 37,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 30,
              "line": 159
            },
            "start": {
              "column": 13,
              "line": 159
            }
          }
        },
        {
          "id": "466",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 191
            },
            "start": {
              "column": 11,
              "line": 160
            }
          }
        },
        {
          "id": "467",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 165
            },
            "start": {
              "column": 50,
              "line": 161
            }
          }
        },
        {
          "id": "468",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "adjustGraphQLExecutionResult is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 167
            },
            "start": {
              "column": 17,
              "line": 167
            }
          }
        },
        {
          "id": "469",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "28"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 45,
              "line": 167
            },
            "start": {
              "column": 17,
              "line": 167
            }
          }
        },
        {
          "id": "470",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "28"
          ],
          "coveredBy": [
            "28"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 175
            },
            "start": {
              "column": 47,
              "line": 167
            }
          }
        },
        {
          "id": "471",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "28"
          ],
          "coveredBy": [
            "28"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 174
            },
            "start": {
              "column": 55,
              "line": 168
            }
          }
        },
        {
          "id": "472",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 177
            },
            "start": {
              "column": 17,
              "line": 177
            }
          }
        },
        {
          "id": "473",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Unexpected end of JSON input",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 177
            },
            "start": {
              "column": 17,
              "line": 177
            }
          }
        },
        {
          "id": "474",
          "mutatorName": "LogicalOperator",
          "replacement": "response || isGraphQLServerRequest(request)",
          "status": "Survived",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 177
            },
            "start": {
              "column": 17,
              "line": 177
            }
          }
        },
        {
          "id": "475",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Unexpected end of JSON input",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 189
            },
            "start": {
              "column": 62,
              "line": 177
            }
          }
        },
        {
          "id": "476",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'debug')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 188
            },
            "start": {
              "column": 30,
              "line": 178
            }
          }
        },
        {
          "id": "477",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "adjustGraphQLExecutionResult is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 199
            },
            "start": {
              "column": 13,
              "line": 199
            }
          }
        },
        {
          "id": "478",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to be 'test' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 33,
          "static": false,
          "killedBy": [
            "32"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 41,
              "line": 199
            },
            "start": {
              "column": 13,
              "line": 199
            }
          }
        },
        {
          "id": "479",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal { 'x-jwt': 'jwt-123456789' }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "58"
          ],
          "coveredBy": [
            "32",
            "58"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 207
            },
            "start": {
              "column": 43,
              "line": 199
            }
          }
        },
        {
          "id": "480",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "32"
          ],
          "coveredBy": [
            "32",
            "58"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 206
            },
            "start": {
              "column": 51,
              "line": 200
            }
          }
        },
        {
          "id": "481",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot set properties of undefined (setting 'statusCode')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 209
            },
            "start": {
              "column": 13,
              "line": 209
            }
          }
        },
        {
          "id": "482",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected '' to strictly equal '\"customResponse\"'",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "85"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 21,
              "line": 209
            },
            "start": {
              "column": 13,
              "line": 209
            }
          }
        },
        {
          "id": "483",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Unexpected end of JSON input",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 221
            },
            "start": {
              "column": 23,
              "line": 209
            }
          }
        },
        {
          "id": "484",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'debug')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 220
            },
            "start": {
              "column": 26,
              "line": 210
            }
          }
        },
        {
          "id": "485",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot use 'in' operator to search for 'executionResult' in undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 262
            },
            "start": {
              "column": 52,
              "line": 228
            }
          }
        },
        {
          "id": "486",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 237
            },
            "start": {
              "column": 13,
              "line": 237
            }
          }
        },
        {
          "id": "487",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'GraphQL server only supports GET and …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 23,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 237
            },
            "start": {
              "column": 13,
              "line": 237
            }
          }
        },
        {
          "id": "488",
          "mutatorName": "LogicalOperator",
          "replacement": "request.method !== 'GET' || request.method !== 'POST'",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 237
            },
            "start": {
              "column": 13,
              "line": 237
            }
          }
        },
        {
          "id": "489",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 15,
          "static": false,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 237
            },
            "start": {
              "column": 13,
              "line": 237
            }
          }
        },
        {
          "id": "490",
          "mutatorName": "EqualityOperator",
          "replacement": "request.method === 'GET'",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 15,
          "static": false,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 237
            },
            "start": {
              "column": 13,
              "line": 237
            }
          }
        },
        {
          "id": "491",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 20,
          "static": false,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 37,
              "line": 237
            },
            "start": {
              "column": 32,
              "line": 237
            }
          }
        },
        {
          "id": "492",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 237
            },
            "start": {
              "column": 41,
              "line": 237
            }
          }
        },
        {
          "id": "493",
          "mutatorName": "EqualityOperator",
          "replacement": "request.method === 'POST'",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 237
            },
            "start": {
              "column": 41,
              "line": 237
            }
          }
        },
        {
          "id": "494",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "17",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 237
            },
            "start": {
              "column": 60,
              "line": 237
            }
          }
        },
        {
          "id": "495",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'GraphQL server only supports GET and …' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 253
            },
            "start": {
              "column": 68,
              "line": 237
            }
          }
        },
        {
          "id": "496",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot destructure property 'logger' of 'serverOptions' as it is undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "23"
          ],
          "coveredBy": [
            "23",
            "28"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 251
            },
            "start": {
              "column": 41,
              "line": 246
            }
          }
        },
        {
          "id": "497",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 85,
              "line": 258
            },
            "start": {
              "column": 13,
              "line": 258
            }
          }
        },
        {
          "id": "498",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 6,
              "line": 560
            },
            "start": {
              "column": 40,
              "line": 268
            }
          }
        },
        {
          "id": "499",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 297
            },
            "start": {
              "column": 13,
              "line": 297
            }
          }
        },
        {
          "id": "500",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'Request cannot be processed. Schema i…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 23,
          "static": false,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 297
            },
            "start": {
              "column": 13,
              "line": 297
            }
          }
        },
        {
          "id": "501",
          "mutatorName": "LogicalOperator",
          "replacement": "!schema && !this.isValidSchema(schema)",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'Request cannot be processed. Schema i…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 28,
          "static": false,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 297
            },
            "start": {
              "column": 13,
              "line": 297
            }
          }
        },
        {
          "id": "502",
          "mutatorName": "BooleanLiteral",
          "replacement": "schema",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 20,
              "line": 297
            },
            "start": {
              "column": 13,
              "line": 297
            }
          }
        },
        {
          "id": "503",
          "mutatorName": "BooleanLiteral",
          "replacement": "this.isValidSchema(schema)",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_availability 1'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 51,
              "line": 297
            },
            "start": {
              "column": 24,
              "line": 297
            }
          }
        },
        {
          "id": "504",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'POST body contains invalid JSON.' to be 'Request cannot be processed. Schema i…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "22"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 315
            },
            "start": {
              "column": 53,
              "line": 297
            }
          }
        },
        {
          "id": "505",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot destructure property 'logger' of 'serverOptions' as it is undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "22"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 313
            },
            "start": {
              "column": 41,
              "line": 308
            }
          }
        },
        {
          "id": "506",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "22"
          ],
          "coveredBy": [
            "22"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 314
            },
            "start": {
              "column": 20,
              "line": 314
            }
          }
        },
        {
          "id": "507",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 40,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 317
            },
            "start": {
              "column": 16,
              "line": 315
            }
          }
        },
        {
          "id": "508",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'graphQLError')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 319
            },
            "start": {
              "column": 13,
              "line": 319
            }
          }
        },
        {
          "id": "509",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Request cannot be processed. No query…' to be 'POST body contains invalid JSON.' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 319
            },
            "start": {
              "column": 13,
              "line": 319
            }
          }
        },
        {
          "id": "510",
          "mutatorName": "LogicalOperator",
          "replacement": "!requestInformation.query || requestInformation.error",
          "statusReason": "Cannot read properties of undefined (reading 'graphQLError')",
          "status": "Killed",
          "testsCompleted": 17,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 319
            },
            "start": {
              "column": 13,
              "line": 319
            }
          }
        },
        {
          "id": "511",
          "mutatorName": "BooleanLiteral",
          "replacement": "requestInformation.query",
          "statusReason": "expected 'Request cannot be processed. No query…' to be 'POST body contains invalid JSON.' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 13,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 38,
              "line": 319
            },
            "start": {
              "column": 13,
              "line": 319
            }
          }
        },
        {
          "id": "512",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected '\\n            # HELP graphql_server_r…' to contain 'graphql_server_errors{errorClass=\"Gra…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "33"
          ],
          "coveredBy": [
            "7",
            "8",
            "11",
            "17",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 339
            },
            "start": {
              "column": 68,
              "line": 319
            }
          }
        },
        {
          "id": "513",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot destructure property 'logger' of 'serverOptions' as it is undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7",
            "8",
            "11",
            "17",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 331
            },
            "start": {
              "column": 41,
              "line": 326
            }
          }
        },
        {
          "id": "514",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7",
            "8",
            "11",
            "17",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 338
            },
            "start": {
              "column": 20,
              "line": 332
            }
          }
        },
        {
          "id": "515",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7",
            "8",
            "11",
            "17",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 335
            },
            "start": {
              "column": 34,
              "line": 333
            }
          }
        },
        {
          "id": "516",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "7"
          ],
          "coveredBy": [
            "7",
            "8",
            "11",
            "17",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 68,
              "line": 334
            },
            "start": {
              "column": 29,
              "line": 334
            }
          }
        },
        {
          "id": "517",
          "mutatorName": "BooleanLiteral",
          "replacement": "requestInformation.query",
          "statusReason": "expected undefined to deeply equal [ { userId: '1', …(1) }, …(1) ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "52"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "18",
            "19",
            "20",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 341
            },
            "start": {
              "column": 18,
              "line": 341
            }
          }
        },
        {
          "id": "518",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'Request cannot be processed. No query…' to be 'Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "86"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "18",
            "19",
            "20",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 341
            },
            "start": {
              "column": 18,
              "line": 341
            }
          }
        },
        {
          "id": "519",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "error.toJSON is not a function",
          "status": "Killed",
          "testsCompleted": 7,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "18",
            "19",
            "20",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 43,
              "line": 341
            },
            "start": {
              "column": 18,
              "line": 341
            }
          }
        },
        {
          "id": "520",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "error.toJSON is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "18",
            "20"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 357
            },
            "start": {
              "column": 45,
              "line": 341
            }
          }
        },
        {
          "id": "521",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot destructure property 'logger' of 'serverOptions' as it is undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "18",
            "20"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 355
            },
            "start": {
              "column": 41,
              "line": 350
            }
          }
        },
        {
          "id": "522",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "6"
          ],
          "coveredBy": [
            "6",
            "18",
            "20"
          ],
          "location": {
            "end": {
              "column": 58,
              "line": 356
            },
            "start": {
              "column": 20,
              "line": 356
            }
          }
        },
        {
          "id": "523",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Must provide document.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 365
            },
            "start": {
              "column": 13,
              "line": 361
            }
          }
        },
        {
          "id": "524",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 33,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 71,
              "line": 363
            },
            "start": {
              "column": 54,
              "line": 363
            }
          }
        },
        {
          "id": "525",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Must provide document.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 383
            },
            "start": {
              "column": 40,
              "line": 365
            }
          }
        },
        {
          "id": "526",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot destructure property 'logger' of 'serverOptions' as it is undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 377
            },
            "start": {
              "column": 41,
              "line": 372
            }
          }
        },
        {
          "id": "527",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 382
            },
            "start": {
              "column": 20,
              "line": 378
            }
          }
        },
        {
          "id": "528",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5"
          ],
          "location": {
            "end": {
              "column": 75,
              "line": 379
            },
            "start": {
              "column": 34,
              "line": 379
            }
          }
        },
        {
          "id": "529",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "5"
          ],
          "coveredBy": [
            "5"
          ],
          "location": {
            "end": {
              "column": 73,
              "line": 379
            },
            "start": {
              "column": 44,
              "line": 379
            }
          }
        },
        {
          "id": "530",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 98,
              "line": 385
            },
            "start": {
              "column": 13,
              "line": 385
            }
          }
        },
        {
          "id": "531",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "expected undefined to be 'ValidationError: Cannot query field \"…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "54"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 66,
              "line": 396
            },
            "start": {
              "column": 13,
              "line": 396
            }
          }
        },
        {
          "id": "532",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 400
            },
            "start": {
              "column": 13,
              "line": 400
            }
          }
        },
        {
          "id": "533",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 400
            },
            "start": {
              "column": 13,
              "line": 400
            }
          }
        },
        {
          "id": "534",
          "mutatorName": "EqualityOperator",
          "replacement": "validationErrors.length >= 0",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 400
            },
            "start": {
              "column": 13,
              "line": 400
            }
          }
        },
        {
          "id": "535",
          "mutatorName": "EqualityOperator",
          "replacement": "validationErrors.length <= 0",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "9",
            "10",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "26",
            "27",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "54",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 40,
              "line": 400
            },
            "start": {
              "column": 13,
              "line": 400
            }
          }
        },
        {
          "id": "536",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 434
            },
            "start": {
              "column": 42,
              "line": 400
            }
          }
        },
        {
          "id": "537",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 94,
              "line": 402
            },
            "start": {
              "column": 17,
              "line": 402
            }
          }
        },
        {
          "id": "538",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be 'ValidationError: Cannot query field \"…' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "killedBy": [
            "54"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 422
            },
            "start": {
              "column": 61,
              "line": 405
            }
          }
        },
        {
          "id": "539",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot destructure property 'logger' of 'serverOptions' as it is undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 421
            },
            "start": {
              "column": 45,
              "line": 416
            }
          }
        },
        {
          "id": "540",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 433
            },
            "start": {
              "column": 20,
              "line": 423
            }
          }
        },
        {
          "id": "541",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "9"
          ],
          "coveredBy": [
            "9",
            "10",
            "26",
            "27",
            "29",
            "54"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 430
            },
            "start": {
              "column": 34,
              "line": 424
            }
          }
        },
        {
          "id": "542",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 448
            },
            "start": {
              "column": 13,
              "line": 446
            }
          }
        },
        {
          "id": "543",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 12,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 448
            },
            "start": {
              "column": 13,
              "line": 446
            }
          }
        },
        {
          "id": "544",
          "mutatorName": "LogicalOperator",
          "replacement": "requestMethod === 'GET' && operationAST || operationAST.operation !== 'query'",
          "statusReason": "expected undefined to deeply equal { jwt: 'jwt-123456789' }",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "58"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 448
            },
            "start": {
              "column": 13,
              "line": 446
            }
          }
        },
        {
          "id": "545",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'logout')",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 447
            },
            "start": {
              "column": 13,
              "line": 446
            }
          }
        },
        {
          "id": "546",
          "mutatorName": "LogicalOperator",
          "replacement": "requestMethod === 'GET' || operationAST",
          "statusReason": "Cannot read properties of undefined (reading 'logout')",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 25,
              "line": 447
            },
            "start": {
              "column": 13,
              "line": 446
            }
          }
        },
        {
          "id": "547",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'logout')",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 446
            },
            "start": {
              "column": 13,
              "line": 446
            }
          }
        },
        {
          "id": "548",
          "mutatorName": "EqualityOperator",
          "replacement": "requestMethod !== 'GET'",
          "statusReason": "Cannot read properties of undefined (reading 'logout')",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "killedBy": [
            "4"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 446
            },
            "start": {
              "column": 13,
              "line": 446
            }
          }
        },
        {
          "id": "549",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 10,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "12",
            "13",
            "14",
            "15",
            "16",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 36,
              "line": 446
            },
            "start": {
              "column": 31,
              "line": 446
            }
          }
        },
        {
          "id": "550",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 448
            },
            "start": {
              "column": 13,
              "line": 448
            }
          }
        },
        {
          "id": "551",
          "mutatorName": "EqualityOperator",
          "replacement": "operationAST.operation === 'query'",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 448
            },
            "start": {
              "column": 13,
              "line": 448
            }
          }
        },
        {
          "id": "552",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "Cannot read properties of undefined (reading 'users')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "15"
          ],
          "coveredBy": [
            "15",
            "16"
          ],
          "location": {
            "end": {
              "column": 47,
              "line": 448
            },
            "start": {
              "column": 40,
              "line": 448
            }
          }
        },
        {
          "id": "553",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 467
            },
            "start": {
              "column": 11,
              "line": 449
            }
          }
        },
        {
          "id": "554",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot destructure property 'logger' of 'serverOptions' as it is undefined.",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 465
            },
            "start": {
              "column": 41,
              "line": 460
            }
          }
        },
        {
          "id": "555",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "16"
          ],
          "coveredBy": [
            "16"
          ],
          "location": {
            "end": {
              "column": 58,
              "line": 466
            },
            "start": {
              "column": 20,
              "line": 466
            }
          }
        },
        {
          "id": "556",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'customHeaders')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "12",
            "13",
            "14",
            "15",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 546
            },
            "start": {
              "column": 13,
              "line": 474
            }
          }
        },
        {
          "id": "557",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "error.toJSON is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "12",
            "13",
            "14",
            "15",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 484
            },
            "start": {
              "column": 59,
              "line": 475
            }
          }
        },
        {
          "id": "558",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "error.toJSON is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "13",
            "14",
            "15",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 491
            },
            "start": {
              "column": 56,
              "line": 486
            }
          }
        },
        {
          "id": "559",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 24,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "13",
            "14",
            "15",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 33,
              "line": 492
            },
            "start": {
              "column": 17,
              "line": 492
            }
          }
        },
        {
          "id": "560",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to strictly equal { hello: 'world' }",
          "status": "Killed",
          "testsCompleted": 11,
          "static": false,
          "killedBy": [
            "24"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "13",
            "14",
            "15",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 33,
              "line": 492
            },
            "start": {
              "column": 17,
              "line": 492
            }
          }
        },
        {
          "id": "561",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to strictly equal { hello: 'world' }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "24"
          ],
          "coveredBy": [
            "24"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 494
            },
            "start": {
              "column": 35,
              "line": 492
            }
          }
        },
        {
          "id": "562",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "error.toJSON is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "13",
            "14",
            "15",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 497
            },
            "start": {
              "column": 17,
              "line": 497
            }
          }
        },
        {
          "id": "563",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "13",
            "14",
            "15",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 497
            },
            "start": {
              "column": 17,
              "line": 497
            }
          }
        },
        {
          "id": "564",
          "mutatorName": "LogicalOperator",
          "replacement": "executionResult.errors || executionResult.errors.length > 0",
          "statusReason": "error.toJSON is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "13",
            "14",
            "15",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 497
            },
            "start": {
              "column": 17,
              "line": 497
            }
          }
        },
        {
          "id": "565",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 9,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 497
            },
            "start": {
              "column": 43,
              "line": 497
            }
          }
        },
        {
          "id": "566",
          "mutatorName": "EqualityOperator",
          "replacement": "executionResult.errors.length >= 0",
          "status": "Survived",
          "testsCompleted": 9,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 497
            },
            "start": {
              "column": 43,
              "line": 497
            }
          }
        },
        {
          "id": "567",
          "mutatorName": "EqualityOperator",
          "replacement": "executionResult.errors.length <= 0",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 76,
              "line": 497
            },
            "start": {
              "column": 43,
              "line": 497
            }
          }
        },
        {
          "id": "568",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 534
            },
            "start": {
              "column": 78,
              "line": 497
            }
          }
        },
        {
          "id": "569",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 533
            },
            "start": {
              "column": 61,
              "line": 498
            }
          }
        },
        {
          "id": "570",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 502
            },
            "start": {
              "column": 25,
              "line": 500
            }
          }
        },
        {
          "id": "571",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'The first error!, The second error!' to be 'The first error!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "killedBy": [
            "87"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 502
            },
            "start": {
              "column": 25,
              "line": 500
            }
          }
        },
        {
          "id": "572",
          "mutatorName": "LogicalOperator",
          "replacement": "reassignAggregateError && error.originalError || isAggregateError(error.originalError)",
          "statusReason": "expected 'The first error!' to be 'The first error!, The second error!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "31"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 62,
              "line": 502
            },
            "start": {
              "column": 25,
              "line": 500
            }
          }
        },
        {
          "id": "573",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'The first error!' to be 'The first error!, The second error!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "31"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 501
            },
            "start": {
              "column": 25,
              "line": 500
            }
          }
        },
        {
          "id": "574",
          "mutatorName": "LogicalOperator",
          "replacement": "reassignAggregateError || error.originalError",
          "statusReason": "expected 'The first error!' to be 'The first error!, The second error!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "killedBy": [
            "31"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 44,
              "line": 501
            },
            "start": {
              "column": 25,
              "line": 500
            }
          }
        },
        {
          "id": "575",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'The first error!, The second error!' to be 'The first error!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "87"
          ],
          "coveredBy": [
            "87"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 511
            },
            "start": {
              "column": 23,
              "line": 503
            }
          }
        },
        {
          "id": "576",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 59,
              "line": 505
            },
            "start": {
              "column": 29,
              "line": 505
            }
          }
        },
        {
          "id": "577",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 93,
              "line": 506
            },
            "start": {
              "column": 33,
              "line": 506
            }
          }
        },
        {
          "id": "578",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 507
            },
            "start": {
              "column": 33,
              "line": 507
            }
          }
        },
        {
          "id": "579",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'network.error' to be 'Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 56,
              "line": 517
            },
            "start": {
              "column": 25,
              "line": 516
            }
          }
        },
        {
          "id": "580",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 56,
              "line": 517
            },
            "start": {
              "column": 25,
              "line": 516
            }
          }
        },
        {
          "id": "581",
          "mutatorName": "LogicalOperator",
          "replacement": "graphqlOrFetchError === FETCH_ERROR || fetchErrorMessage !== undefined",
          "statusReason": "expected 'network.error' to be 'Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 56,
              "line": 517
            },
            "start": {
              "column": 25,
              "line": 516
            }
          }
        },
        {
          "id": "582",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'network.error' to be 'Something went wrong!' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "killedBy": [
            "13"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 516
            },
            "start": {
              "column": 25,
              "line": 516
            }
          }
        },
        {
          "id": "583",
          "mutatorName": "EqualityOperator",
          "replacement": "graphqlOrFetchError !== FETCH_ERROR",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2",
            "13",
            "14",
            "31",
            "33",
            "34",
            "53",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 60,
              "line": 516
            },
            "start": {
              "column": 25,
              "line": 516
            }
          }
        },
        {
          "id": "584",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [],
          "coveredBy": [
            "2"
          ],
          "location": {
            "end": {
              "column": 56,
              "line": 517
            },
            "start": {
              "column": 25,
              "line": 517
            }
          }
        },
        {
          "id": "585",
          "mutatorName": "EqualityOperator",
          "replacement": "fetchErrorMessage === undefined",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2"
          ],
          "location": {
            "end": {
              "column": 56,
              "line": 517
            },
            "start": {
              "column": 25,
              "line": 517
            }
          }
        },
        {
          "id": "586",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Request failed ETIMEDOUT connection f…' to be 'network.error' // Object.is equality",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "2"
          ],
          "coveredBy": [
            "2"
          ],
          "location": {
            "end": {
              "column": 22,
              "line": 520
            },
            "start": {
              "column": 23,
              "line": 518
            }
          }
        },
        {
          "id": "587",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "We are not interested in testing logger statements.",
          "status": "Ignored",
          "static": false,
          "location": {
            "end": {
              "column": 79,
              "line": 538
            },
            "start": {
              "column": 17,
              "line": 538
            }
          }
        },
        {
          "id": "588",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "0"
          ],
          "coveredBy": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "13",
            "14",
            "15",
            "19",
            "21",
            "24",
            "25",
            "30",
            "31",
            "32",
            "33",
            "34",
            "52",
            "53",
            "56",
            "58",
            "85",
            "86",
            "87"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 545
            },
            "start": {
              "column": 20,
              "line": 541
            }
          }
        },
        {
          "id": "589",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'customHeaders')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "12"
          ],
          "coveredBy": [
            "12",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 10,
              "line": 559
            },
            "start": {
              "column": 34,
              "line": 546
            }
          }
        },
        {
          "id": "590",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "12"
          ],
          "coveredBy": [
            "12",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 14,
              "line": 558
            },
            "start": {
              "column": 20,
              "line": 554
            }
          }
        },
        {
          "id": "591",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading '0')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "12"
          ],
          "coveredBy": [
            "12",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 69,
              "line": 555
            },
            "start": {
              "column": 34,
              "line": 555
            }
          }
        },
        {
          "id": "592",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Cannot read properties of undefined (reading 'message')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "killedBy": [
            "12"
          ],
          "coveredBy": [
            "12",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 67,
              "line": 555
            },
            "start": {
              "column": 44,
              "line": 555
            }
          }
        }
      ],
      "source": "import {\n    FETCH_ERROR,\n    GRAPHQL_ERROR,\n    GraphQLExecutionResult,\n    GraphQLRequestInfo,\n    GraphQLServerRequest,\n    GraphQLServerResponse,\n    INVALID_SCHEMA_ERROR,\n    METHOD_NOT_ALLOWED_ERROR,\n    MISSING_QUERY_PARAMETER_ERROR,\n    MetricsClient,\n    SCHEMA_VALIDATION_ERROR,\n    SYNTAX_ERROR,\n    isGraphQLServerRequest,\n} from '@dreamit/graphql-server-base'\nimport {\n    DocumentNode,\n    GraphQLError,\n    GraphQLSchema,\n    Source,\n    getOperationAST,\n} from 'graphql'\nimport {\n    DefaultGraphQLServerOptions,\n    GraphQLServerOptions,\n    SimpleMetricsClient,\n    determineGraphQLOrFetchError,\n    determineValidationOrIntrospectionDisabledError,\n    getFirstErrorFromExecutionResult,\n    increaseFetchOrGraphQLErrorMetric,\n    isAggregateError,\n    removeValidationRecommendationsFromErrors,\n} from '../'\n\nconst requestCouldNotBeProcessed = 'Request could not be processed: '\nconst defaultOptions = new DefaultGraphQLServerOptions()\n\nexport class GraphQLServer {\n    options: DefaultGraphQLServerOptions = new DefaultGraphQLServerOptions()\n    schemaValidationErrors: ReadonlyArray<GraphQLError> = []\n\n    constructor(optionsParameter?: GraphQLServerOptions) {\n        this.setOptions(optionsParameter)\n    }\n\n    setOptions(newOptions?: GraphQLServerOptions): void {\n        this.options = { ...defaultOptions, ...newOptions }\n        this.setMetricsClient(\n            newOptions?.metricsClient ?? new SimpleMetricsClient(),\n        )\n        this.setSchema(newOptions?.schema)\n    }\n\n    /**\n     * Sets a metrics client for to be used in the GraphQLServer.\n     * @param {MetricsClient} metricsClient - The metrics client to use in the GraphQLServer\n     */\n    setMetricsClient(metricsClient: MetricsClient): void {\n        this.options.metricsClient = metricsClient\n        this.options.metricsClient.setAvailability(\n            this.isValidSchema(this.options.schema) ? 1 : 0,\n        )\n    }\n\n    getSchema(): GraphQLSchema | undefined {\n        return this.options.schema\n    }\n\n    isValidSchema(schema?: GraphQLSchema): boolean {\n        return schema ? this.schemaValidationErrors.length === 0 : false\n    }\n\n    setSchema(schema?: GraphQLSchema): void {\n        const logger = this.options.logger\n        logger.info('Trying to set graphql schema')\n        logger.debug(`Schema is  ${JSON.stringify(schema)}`)\n        if (this.options.shouldUpdateSchemaFunction(schema)) {\n            this.options.schema = schema\n            // Validate schema\n            if (this.options.schema) {\n                this.schemaValidationErrors =\n                    this.options.schemaValidationFunction(this.options.schema)\n                if (this.schemaValidationErrors.length > 0) {\n                    logger.warn(\n                        'Schema validation failed with errors. ' +\n                            'Please check the GraphQL schema and fix potential issues.',\n                    )\n                    for (const error of this.schemaValidationErrors) {\n                        logger.error(\n                            'A schema validation error occurred: ',\n                            error,\n                            SCHEMA_VALIDATION_ERROR,\n                        )\n                        this.options.collectErrorMetricsFunction({\n                            error,\n                            errorName: SCHEMA_VALIDATION_ERROR,\n                            serverOptions: this.options,\n                        })\n                    }\n                }\n            }\n        } else {\n            logger.warn(\n                'Schema update was rejected because condition' +\n                    ' set in \"shouldUpdateSchema\" check was not fulfilled.',\n            )\n        }\n        this.options.metricsClient.setAvailability(\n            this.isValidSchema(this.options.schema) ? 1 : 0,\n        )\n    }\n\n    getSchemaValidationErrors(): ReadonlyArray<GraphQLError> | undefined {\n        return this.schemaValidationErrors\n    }\n\n    // Gets the Content-Type of the metrics for use in the response headers\n    getMetricsContentType(): string {\n        return this.options.metricsClient.getMetricsContentType()\n    }\n\n    // Gets the metrics for use in the response body.\n    async getMetrics(): Promise<string> {\n        return await this.options.metricsClient.getMetrics()\n    }\n\n    /**\n     * Executes a given request and returns an execution result\n     * @param {GraphQLServerRequest | GraphQLRequestInfo} request -\n     * The server request or request information\n     * @param {GraphQLServerResponse} response - If set sends a response, else not\n     * @returns {GraphQLExecutionResult} The execution result\n     */\n    async handleRequest(\n        request: GraphQLServerRequest | GraphQLRequestInfo,\n        response?: GraphQLServerResponse,\n    ): Promise<GraphQLExecutionResult> {\n        const {\n            adjustGraphQLExecutionResult,\n            contextFunction,\n            formatErrorFunction,\n            logger,\n            metricsClient,\n            sendResponse,\n            responseEndChunkFunction,\n        } = this.options\n\n        const context = contextFunction({\n            request: isGraphQLServerRequest(request) ? request : undefined,\n            response,\n            serverOptions: this.options,\n        })\n        metricsClient.increaseRequestThroughput(context)\n        const requestInformation = isGraphQLServerRequest(request)\n            ? this.getRequestInformation(request, context)\n            : request\n        if (\n            isGraphQLServerRequest(request) &&\n            'executionResult' in requestInformation\n        ) {\n            let result: GraphQLExecutionResult = {\n                customHeaders: requestInformation.customHeaders,\n                executionResult: requestInformation.executionResult,\n                statusCode: requestInformation.statusCode,\n            }\n\n            if (adjustGraphQLExecutionResult) {\n                result = adjustGraphQLExecutionResult({\n                    context,\n                    executionResult: result,\n                    formatErrorFunction,\n                    logger,\n                    request: request,\n                })\n            }\n\n            if (response && isGraphQLServerRequest(request)) {\n                sendResponse({\n                    context,\n                    customHeaders: result.customHeaders,\n                    executionResult: result.executionResult,\n                    formatErrorFunction,\n                    logger,\n                    request,\n                    response,\n                    responseEndChunkFunction,\n                    statusCode: result.statusCode,\n                })\n            }\n            return result\n        }\n\n        let result = await this.executeRequestWithInfo(\n            requestInformation as GraphQLRequestInfo,\n            context,\n            isGraphQLServerRequest(request) ? request.method : undefined,\n        )\n\n        if (adjustGraphQLExecutionResult) {\n            result = adjustGraphQLExecutionResult({\n                context,\n                executionResult: result,\n                formatErrorFunction,\n                logger,\n                request: isGraphQLServerRequest(request) ? request : undefined,\n            })\n        }\n\n        if (response) {\n            sendResponse({\n                context,\n                customHeaders: result.customHeaders,\n                executionResult: result.executionResult,\n                formatErrorFunction,\n                logger,\n                request: isGraphQLServerRequest(request) ? request : undefined,\n                response,\n                responseEndChunkFunction,\n                statusCode: result.statusCode,\n            })\n        }\n        return result\n    }\n\n    getRequestInformation(\n        request: GraphQLServerRequest,\n        context: unknown,\n    ): GraphQLRequestInfo | GraphQLExecutionResult {\n        const {\n            logger,\n            methodNotAllowedResponse,\n            collectErrorMetricsFunction,\n            extractInformationFromRequest,\n        } = this.options\n\n        // Reject requests that do not use GET and POST methods.\n        if (request.method !== 'GET' && request.method !== 'POST') {\n            const response = methodNotAllowedResponse(request.method)\n            const error = getFirstErrorFromExecutionResult(response)\n            logger.error(\n                requestCouldNotBeProcessed,\n                error,\n                METHOD_NOT_ALLOWED_ERROR,\n                context,\n            )\n            collectErrorMetricsFunction({\n                context,\n                error,\n                errorName: METHOD_NOT_ALLOWED_ERROR,\n                serverOptions: this.options,\n            })\n            return response\n        }\n\n        // Extract graphql request information (query, variables, operationName) from request\n        const requestInformation = extractInformationFromRequest(request)\n        logger.debug(\n            `Extracted request information is ${JSON.stringify(requestInformation)}`,\n            context,\n        )\n        return requestInformation\n    }\n\n    async executeRequestWithInfo(\n        requestInformation: GraphQLRequestInfo,\n        context?: unknown,\n        requestMethod?: string,\n    ): Promise<GraphQLExecutionResult> {\n        const {\n            logger,\n            metricsClient,\n            invalidSchemaResponse,\n            missingQueryParameterResponse,\n            onlyQueryInGetRequestsResponse,\n            collectErrorMetricsFunction,\n            schema,\n            parseFunction,\n            validateFunction,\n            defaultValidationRules,\n            customValidationRules,\n            validationOptions,\n            validationTypeInfo,\n            executeFunction,\n            rootValue,\n            fieldResolver,\n            typeResolver,\n            extensionFunction,\n            reassignAggregateError,\n            removeValidationRecommendations,\n            validationErrorMessage,\n            executionResultErrorMessage,\n            graphqlExecutionErrorMessage,\n            fetchErrorMessage,\n        } = this.options\n\n        // Reject requests if schema is invalid\n        if (!schema || !this.isValidSchema(schema)) {\n            metricsClient.setAvailability(0)\n            const error = getFirstErrorFromExecutionResult(\n                invalidSchemaResponse,\n            )\n            logger.error(\n                requestCouldNotBeProcessed,\n                error,\n                INVALID_SCHEMA_ERROR,\n                context,\n            )\n            collectErrorMetricsFunction({\n                context,\n                error,\n                errorName: INVALID_SCHEMA_ERROR,\n                serverOptions: this.options,\n            })\n            return { ...invalidSchemaResponse, ...requestInformation }\n        } else {\n            metricsClient.setAvailability(1)\n        }\n\n        if (!requestInformation.query && requestInformation.error) {\n            logger.error(\n                requestCouldNotBeProcessed,\n                requestInformation.error.graphQLError,\n                GRAPHQL_ERROR,\n                context,\n            )\n            collectErrorMetricsFunction({\n                context,\n                error: requestInformation.error,\n                errorName: GRAPHQL_ERROR,\n                serverOptions: this.options,\n            })\n            return {\n                executionResult: {\n                    errors: [requestInformation.error.graphQLError],\n                },\n                requestInformation: requestInformation,\n                statusCode: requestInformation.error.statusCode,\n            }\n        }\n        // Reject request if no query parameter is provided\n        else if (!requestInformation.query) {\n            const response = missingQueryParameterResponse(requestMethod)\n            const error = getFirstErrorFromExecutionResult(response)\n            logger.error(\n                requestCouldNotBeProcessed,\n                error,\n                MISSING_QUERY_PARAMETER_ERROR,\n                context,\n            )\n            collectErrorMetricsFunction({\n                context,\n                error,\n                errorName: MISSING_QUERY_PARAMETER_ERROR,\n                serverOptions: this.options,\n            })\n            return { ...response, ...requestInformation }\n        }\n\n        // Parse given GraphQL source into a document (parse(query) function)\n        let documentAST: DocumentNode\n        try {\n            documentAST = parseFunction(\n                new Source(requestInformation.query, 'GraphQL request'),\n            )\n        } catch (syntaxError: unknown) {\n            logger.error(\n                requestCouldNotBeProcessed,\n                syntaxError as GraphQLError,\n                SYNTAX_ERROR,\n                context,\n            )\n            collectErrorMetricsFunction({\n                context,\n                error: syntaxError,\n                errorName: SYNTAX_ERROR,\n                serverOptions: this.options,\n            })\n            return {\n                executionResult: { errors: [syntaxError as GraphQLError] },\n                requestInformation: requestInformation,\n                statusCode: 400,\n            }\n        }\n        logger.debug(\n            `Parsing query into document succeeded with document: ${JSON.stringify(documentAST)}`,\n            context,\n        )\n\n        /**\n         * Validate document against schema (\n         * validate(schema, document, rules) function). Return 400 for errors\n         */\n        const validationErrors = validateFunction(\n            schema,\n            documentAST,\n            [...defaultValidationRules, ...customValidationRules],\n            validationOptions,\n            validationTypeInfo,\n        )\n        if (validationErrors.length > 0) {\n            logger.debug(\n                `One or more validation errors occurred: ${JSON.stringify(validationErrors)}`,\n                context,\n            )\n            for (const validationError of validationErrors) {\n                const errorName =\n                    determineValidationOrIntrospectionDisabledError(\n                        validationError,\n                    )\n                logger.error(\n                    validationErrorMessage,\n                    validationError,\n                    errorName,\n                    context,\n                )\n                collectErrorMetricsFunction({\n                    context,\n                    error: validationError,\n                    errorName,\n                    serverOptions: this.options,\n                })\n            }\n            return {\n                executionResult: {\n                    errors: removeValidationRecommendations\n                        ? removeValidationRecommendationsFromErrors(\n                              validationErrors,\n                          )\n                        : validationErrors,\n                },\n                requestInformation: requestInformation,\n                statusCode: 400,\n            }\n        }\n\n        /**\n         * Reject request if get method is used for non-query(mutation) requests.\n         * Check with getOperationAST(document, operationName) function.\n         * Return 405 if that is the case\n         */\n        const operationAST = getOperationAST(\n            documentAST,\n            requestInformation.operationName,\n        )\n        if (\n            requestMethod === 'GET' &&\n            operationAST &&\n            operationAST.operation !== 'query'\n        ) {\n            const response = onlyQueryInGetRequestsResponse(\n                operationAST.operation,\n            )\n            const error = getFirstErrorFromExecutionResult(response)\n            logger.error(\n                requestCouldNotBeProcessed,\n                error,\n                METHOD_NOT_ALLOWED_ERROR,\n                context,\n            )\n            collectErrorMetricsFunction({\n                context,\n                error,\n                errorName: METHOD_NOT_ALLOWED_ERROR,\n                serverOptions: this.options,\n            })\n            return { ...response, ...requestInformation }\n        }\n\n        /**\n         * Perform execution\n         * (execute(schema, document, variables, operationName, resolvers) function).\n         * Return 400 if errors are available\n         */\n        try {\n            const executionResult = await executeFunction({\n                contextValue: context,\n                document: documentAST,\n                fieldResolver: fieldResolver,\n                operationName: requestInformation.operationName,\n                rootValue: rootValue,\n                schema: schema,\n                typeResolver: typeResolver,\n                variableValues: requestInformation.variables,\n            })\n\n            const extensionsResult = extensionFunction({\n                context,\n                executionResult,\n                requestInformation,\n                serverOptions: this.options,\n            })\n            if (extensionsResult) {\n                executionResult.extensions = extensionsResult\n            }\n\n            // Collect error metrics for execution result\n            if (executionResult.errors && executionResult.errors.length > 0) {\n                for (const error of executionResult.errors) {\n                    if (\n                        reassignAggregateError &&\n                        error.originalError &&\n                        isAggregateError(error.originalError)\n                    ) {\n                        logger.debug(\n                            'Error is AggregateError and ' +\n                                'reassignAggregateError feature is enabled. AggregateError ' +\n                                'will be reassigned to original errors field.',\n                            context,\n                        )\n                        executionResult.errors = error.originalError.errors\n                    }\n\n                    const graphqlOrFetchError =\n                        determineGraphQLOrFetchError(error)\n                    if (\n                        graphqlOrFetchError === FETCH_ERROR &&\n                        fetchErrorMessage !== undefined\n                    ) {\n                        error.message = fetchErrorMessage\n                    }\n\n                    logger.error(\n                        executionResultErrorMessage,\n                        error,\n                        graphqlOrFetchError,\n                        context,\n                    )\n                    increaseFetchOrGraphQLErrorMetric(\n                        error,\n                        this.options,\n                        context,\n                    )\n                }\n            }\n\n            // Return execution result\n            logger.debug(\n                `Create response from data ${JSON.stringify(executionResult)}`,\n                context,\n            )\n            return {\n                executionResult,\n                requestInformation: requestInformation,\n                statusCode: 200,\n            }\n        } catch (error: unknown) {\n            logger.error(\n                graphqlExecutionErrorMessage,\n                error as GraphQLError,\n                determineGraphQLOrFetchError(error),\n                context,\n            )\n            increaseFetchOrGraphQLErrorMetric(error, this.options, context)\n            return {\n                executionResult: { errors: [error as GraphQLError] },\n                requestInformation: requestInformation,\n                statusCode: 400,\n            }\n        }\n    }\n}\n"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 80,
    "low": 60,
    "break": null
  },
  "testFiles": {
    "tests/server/GraphQLServer.integration.test.ts": {
      "tests": [
        {
          "id": "0",
          "name": "Should get data response"
        },
        {
          "id": "1",
          "name": "Should get data response in GraphQLServerResponse when using GraphQLRequestInfo"
        },
        {
          "id": "2",
          "name": "Should get custom fetch error message in response when using GraphQLRequestInfo"
        },
        {
          "id": "3",
          "name": "Should get data response for query with variables"
        },
        {
          "id": "4",
          "name": "Should get data response when using a mutation"
        },
        {
          "id": "5",
          "name": "Should get error response if query does not match expected query format"
        },
        {
          "id": "6",
          "name": "Should get error response if body does not contain query information"
        },
        {
          "id": "7",
          "name": "Should get error response if body contains invalid json"
        },
        {
          "id": "8",
          "name": "Should get error response if content type cannot be processed"
        },
        {
          "id": "9",
          "name": "Should get filtered error response if a validation error occurs"
        },
        {
          "id": "10",
          "name": "Should get unfiltered error response if a validation error occurs and removeValidationRecommendations is enabled"
        },
        {
          "id": "11",
          "name": "Should get error response if content type is not set"
        },
        {
          "id": "12",
          "name": "Should get error response when GraphQL context error occurs when calling execute function"
        },
        {
          "id": "13",
          "name": "Should get error response if resolver returns GraphQL error"
        },
        {
          "id": "14",
          "name": "Should get error response with formatted error results if resolver returns GraphQL error and formatError function is defined"
        },
        {
          "id": "15",
          "name": "Should get data response when using GET request"
        },
        {
          "id": "16",
          "name": "Should get error response when using mutation in a GET request"
        },
        {
          "id": "17",
          "name": "Should get an error response when content type is not defined"
        },
        {
          "id": "18",
          "name": "Should get an error response when no query parameter is found"
        },
        {
          "id": "19",
          "name": "Should get data response when using urlencoded request"
        },
        {
          "id": "20",
          "name": "Should get error response when using urlencoded request with no query provided"
        },
        {
          "id": "21",
          "name": "Should get data response for application graphql request"
        },
        {
          "id": "22",
          "name": "Should get error response if invalid schema is used"
        },
        {
          "id": "23",
          "name": "Should get error response if invalid method is used"
        },
        {
          "id": "24",
          "name": "Should get extensions in GraphQL response if extension function is defined"
        },
        {
          "id": "25",
          "name": "Should get data response if introspection is requested when introspection is allowed"
        },
        {
          "id": "26",
          "name": "Should get error response if introspection is requested when validation rule NoSchemaIntrospectionCustomRule is set"
        },
        {
          "id": "27",
          "name": "Should get error response if query with unknown field is executed and custom validation rule is set"
        },
        {
          "id": "28",
          "name": "Should adjust error response if adjustGraphQLExecutionResult is provided"
        },
        {
          "id": "29",
          "name": "Should get error response if query with unknown field is executed and no custom validation rule is set"
        },
        {
          "id": "30",
          "name": "Should get data response if query with unknown field is executed and validation rules are removed"
        },
        {
          "id": "31",
          "name": "Should not reassign AggregateError to original errors field when reassignAggregateError is disabled"
        },
        {
          "id": "32",
          "name": "Should adjust data response if adjustGraphQLExecutionResult is provided"
        }
      ],
      "source": "/* eslint-disable @typescript-eslint/naming-convention */\nimport { GraphQLExecutionResult } from '@dreamit/graphql-server-base'\nimport { GraphQLError, NoSchemaIntrospectionCustomRule } from 'graphql'\nimport { GraphQLServer, StandaloneResponseParameters } from 'src'\nimport { expect, test } from 'vitest'\nimport {\n    fetchErrorQuery,\n    introspectionQuery,\n    loginRequest,\n    logoutMutation,\n    multipleErrorResponse,\n    returnErrorQuery,\n    userOne,\n    userQuery,\n    userSchema,\n    userSchemaResolvers,\n    userTwo,\n    userVariables,\n    usersQuery,\n    usersQueryWithUnknownField,\n    usersRequest,\n} from '../ExampleSchemas'\nimport {\n    INITIAL_GRAPHQL_SERVER_OPTIONS,\n    NO_LOGGER,\n    StandaloneGraphQLServerResponse,\n    generateGetParametersFromGraphQLRequestInfo,\n    sendRequest,\n    sendRequestWithURL,\n} from '../TestHelpers'\n\nconst customGraphQLServer = new GraphQLServer({\n    ...INITIAL_GRAPHQL_SERVER_OPTIONS,\n    fetchErrorMessage: 'network.error',\n})\nconst extensionTestData: Record<string, string> = {\n    hello: 'world',\n}\n\nconst standaloneGraphQLServerResponse = new StandaloneGraphQLServerResponse()\nfunction testFormatErrorFunction(error: GraphQLError): GraphQLError {\n    error.message = 'Formatted: ' + error.message\n    return error\n}\n\ntest('Should get data response', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        `{\"query\":\"${usersQuery}\"}`,\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.data.users).toStrictEqual([userOne, userTwo])\n})\n\ntest(\n    'Should get data response in GraphQLServerResponse' +\n        ' when using GraphQLRequestInfo',\n    async () => {\n        await customGraphQLServer.handleRequest(\n            {\n                query: usersQuery,\n            },\n            standaloneGraphQLServerResponse,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.data.users).toStrictEqual([userOne, userTwo])\n    },\n)\n\ntest(\n    'Should get custom fetch error message in response' +\n        ' when using GraphQLRequestInfo',\n    async () => {\n        await customGraphQLServer.handleRequest(\n            {\n                query: fetchErrorQuery,\n            },\n            standaloneGraphQLServerResponse,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.errors[0].message).toBe('network.error')\n    },\n)\n\ntest('Should get data response for query with variables', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        `{\"query\":\"${userQuery}\", \"variables\":${userVariables}}`,\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.data.user).toStrictEqual(userOne)\n})\n\ntest('Should get data response when using a mutation', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        `{\"query\":\"${logoutMutation}\"}`,\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.data.logout.result).toBe('Goodbye!')\n})\n\ntest('Should get error response if query does not match expected query format', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        '{\"query\":\"unknown\"}',\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'Syntax Error: Unexpected Name \"unknown\".',\n    )\n})\n\ntest('Should get error response if body does not contain query information', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        '{\"aField\":\"aValue\"}',\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'Request cannot be processed. No query was found in parameters or body. ' +\n            'Used method is POST',\n    )\n})\n\ntest('Should get error response if body contains invalid json', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        '{\"query\":{\"unknown\"}',\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'POST body contains invalid JSON.',\n    )\n})\n\ntest('Should get error response if content type cannot be processed', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        '{\"query\":{\"unknown\"}',\n        'POST',\n        {\n            connection: 'close',\n            'content-type': 'application/specialapp',\n        },\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'POST body contains invalid content type: application/specialapp.',\n    )\n})\n\ntest('Should get filtered error response if a validation error occurs ', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        '{\"query\":\"query users{ users { userIdABC userName } }\"}',\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'Cannot query field \"userIdABC\" on type \"User\". ',\n    )\n})\n\ntest(\n    'Should get unfiltered error response if a' +\n        ' validation error occurs and removeValidationRecommendations is enabled',\n    async () => {\n        customGraphQLServer.setOptions({\n            logger: NO_LOGGER,\n            removeValidationRecommendations: false,\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n        await sendRequest(\n            customGraphQLServer,\n            standaloneGraphQLServerResponse,\n            '{\"query\":\"query users{ users { userIdABC userName } }\"}',\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.errors[0].message).toBe(\n            'Cannot query field \"userIdABC\" on type \"User\". Did you mean \"userId\" or \"userName\"?',\n        )\n        customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n    },\n)\n\ntest('Should get error response if content type is not set', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        '{\"query\":\"unknown\"}',\n        'POST',\n        {\n            connection: 'close',\n            'content-type': '',\n        },\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'POST body contains invalid content type: .',\n    )\n})\n\ntest(\n    'Should get error response when GraphQL context error' +\n        ' occurs when calling execute function',\n    async () => {\n        // Change options to let executeFunction return an error\n        customGraphQLServer.setOptions({\n            executeFunction: () => {\n                throw new GraphQLError('A GraphQL context error occurred!', {})\n            },\n            logger: NO_LOGGER,\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n        await sendRequest(\n            customGraphQLServer,\n            standaloneGraphQLServerResponse,\n            `{\"query\":\"${usersQuery}\"}`,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.errors[0].message).toBe(\n            'A GraphQL context error occurred!',\n        )\n        customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n    },\n)\n\ntest('Should get error response if resolver returns GraphQL error', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        `{\"query\":\"${returnErrorQuery}\"}`,\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe('Something went wrong!')\n})\n\ntest(\n    'Should get error response with formatted error results ' +\n        'if resolver returns GraphQL error and formatError function is defined',\n    async () => {\n        customGraphQLServer.setOptions({\n            formatErrorFunction: testFormatErrorFunction,\n            logger: NO_LOGGER,\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n        await sendRequest(\n            customGraphQLServer,\n            standaloneGraphQLServerResponse,\n            `{\"query\":\"${returnErrorQuery}\"}`,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.errors[0].message).toBe(\n            'Formatted: Something went wrong!',\n        )\n        customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n    },\n)\n\ntest('Should get data response when using GET request', async () => {\n    await sendRequestWithURL(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        'http://localhost:3000/graphql?' +\n            generateGetParametersFromGraphQLRequestInfo(usersRequest),\n        {\n            connection: 'close',\n            'content-type': 'application/json',\n        },\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.data.users).toStrictEqual([userOne, userTwo])\n})\n\ntest('Should get error response when using mutation in a GET request', async () => {\n    await sendRequestWithURL(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        'http://localhost:3000/graphql?' +\n            generateGetParametersFromGraphQLRequestInfo(loginRequest),\n        {\n            connection: 'close',\n            'content-type': 'application/json',\n        },\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'Only \"query\" operation is allowed in \"GET\" requests. Got: \"mutation\"',\n    )\n})\n\ntest('Should get an error response when content type is not defined', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        'doesnotmatter',\n        'POST',\n        {\n            connection: 'close',\n        },\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'Invalid request. Request header content-type is undefined.',\n    )\n})\n\ntest('Should get an error response when no query parameter is found', async () => {\n    await sendRequestWithURL(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        'http://localhost:3000/graphql?aField=aValue',\n        {\n            connection: 'close',\n            'content-type': 'application/json',\n        },\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'Request cannot be processed. No query was found in parameters or body. ' +\n            'Used method is GET',\n    )\n})\n\ntest('Should get data response when using urlencoded request', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        generateGetParametersFromGraphQLRequestInfo(usersRequest),\n        'POST',\n        {\n            connection: 'close',\n            'content-type': 'application/x-www-form-urlencoded',\n        },\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.data.users).toStrictEqual([userOne, userTwo])\n})\n\ntest('Should get error response when using urlencoded request with no query provided', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        '{\"unknown\":\"unknown\"}',\n        'POST',\n        {\n            'content-type': 'application/x-www-form-urlencoded',\n        },\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'Request cannot be processed. No query was found in parameters or body. ' +\n            'Used method is POST',\n    )\n})\n\ntest('Should get data response for application graphql request', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        usersQuery,\n        'POST',\n        {\n            connection: 'close',\n            'content-type': 'application/graphql',\n        },\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.data.users).toStrictEqual([userOne, userTwo])\n})\n\ntest('Should get error response if invalid schema is used', async () => {\n    // Change options to use schema validation function that always returns a validation error\n    customGraphQLServer.setOptions({\n        logger: NO_LOGGER,\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        schemaValidationFunction: () => [\n            new GraphQLError('Schema is not valid!', {}),\n        ],\n    })\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        'doesnotmatter',\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'Request cannot be processed. Schema in GraphQL server is invalid.',\n    )\n    customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n})\n\ntest('Should get error response if invalid method is used', async () => {\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        'doesnotmatter',\n        'PUT',\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.errors[0].message).toBe(\n        'GraphQL server only supports GET and POST requests. Got PUT',\n    )\n    const allowResponseHeader =\n        standaloneGraphQLServerResponse.headers.get('allow')\n    expect(allowResponseHeader).toBe('GET, POST')\n})\n\ntest('Should get extensions in GraphQL response if extension function is defined ', async () => {\n    customGraphQLServer.setOptions({\n        extensionFunction: () => extensionTestData,\n        logger: NO_LOGGER,\n        removeValidationRecommendations: true,\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n    })\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        `{\"query\":\"${usersQuery}\"}`,\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.data.users).toStrictEqual([userOne, userTwo])\n    expect(responseBody.extensions).toStrictEqual(extensionTestData)\n    customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n})\n\ntest(\n    'Should get data response if introspection' +\n        ' is requested when introspection is allowed',\n    async () => {\n        await sendRequest(\n            customGraphQLServer,\n            standaloneGraphQLServerResponse,\n            `{\"query\":\"${introspectionQuery}\"}`,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.data.__schema.queryType.name).toBe('Query')\n    },\n)\n\ntest(\n    'Should get error response if introspection is requested ' +\n        'when validation rule NoSchemaIntrospectionCustomRule is set',\n    async () => {\n        customGraphQLServer.setOptions({\n            customValidationRules: [NoSchemaIntrospectionCustomRule],\n            logger: NO_LOGGER,\n            removeValidationRecommendations: true,\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n        await sendRequest(\n            customGraphQLServer,\n            standaloneGraphQLServerResponse,\n            `{\"query\":\"${introspectionQuery}\"}`,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.errors[0].message).toBe(\n            'GraphQL introspection has been disabled, ' +\n                'but the requested query contained the field \"__schema\".',\n        )\n        customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n    },\n)\n\ntest(\n    'Should get error response if query with unknown field is executed ' +\n        'and custom validation rule is set',\n    async () => {\n        customGraphQLServer.setOptions({\n            customValidationRules: [NoSchemaIntrospectionCustomRule],\n            logger: NO_LOGGER,\n            removeValidationRecommendations: true,\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n        await sendRequest(\n            customGraphQLServer,\n            standaloneGraphQLServerResponse,\n            `{\"query\":\"${usersQueryWithUnknownField}\"}`,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.errors[0].message).toBe(\n            'Cannot query field \"hobby\" on type \"User\".',\n        )\n        customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n    },\n)\n\ntest('Should adjust error response if adjustGraphQLExecutionResult is provided', async () => {\n    customGraphQLServer.setOptions({\n        adjustGraphQLExecutionResult: (\n            parameters: StandaloneResponseParameters,\n        ): GraphQLExecutionResult => {\n            const result = parameters.executionResult\n            if (result && result.executionResult) {\n                result.executionResult = {\n                    data: { message: 'test' },\n                }\n            }\n            return (\n                result ?? {\n                    executionResult: {\n                        errors: [new GraphQLError('No result', {})],\n                    },\n                }\n            )\n        },\n        customValidationRules: [NoSchemaIntrospectionCustomRule],\n        logger: NO_LOGGER,\n        removeValidationRecommendations: true,\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n    })\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        'doesnotmatter',\n        'PUT',\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(responseBody.data.message).toBe('test')\n    customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n})\n\ntest(\n    'Should get error response if query with unknown field is executed ' +\n        'and no custom validation rule is set',\n    async () => {\n        customGraphQLServer.setOptions({\n            customValidationRules: [],\n            logger: NO_LOGGER,\n            removeValidationRecommendations: true,\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n        await sendRequest(\n            customGraphQLServer,\n            standaloneGraphQLServerResponse,\n            `{\"query\":\"${usersQueryWithUnknownField}\"}`,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.errors[0].message).toBe(\n            'Cannot query field \"hobby\" on type \"User\".',\n        )\n        customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n    },\n)\n\ntest(\n    'Should get data response if query with unknown field is executed ' +\n        'and validation rules are removed',\n    async () => {\n        customGraphQLServer.setOptions({\n            customValidationRules: [],\n            defaultValidationRules: [],\n            logger: NO_LOGGER,\n            removeValidationRecommendations: true,\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n        await sendRequest(\n            customGraphQLServer,\n            standaloneGraphQLServerResponse,\n            `{\"query\":\"${usersQueryWithUnknownField}\"}`,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.data.users).toStrictEqual([userOne, userTwo])\n        customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n    },\n)\n\ntest(\n    'Should not reassign AggregateError to original errors field' +\n        ' when reassignAggregateError is disabled',\n    async () => {\n        customGraphQLServer.setOptions({\n            executeFunction: () => multipleErrorResponse,\n            logger: NO_LOGGER,\n            reassignAggregateError: false,\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n        await sendRequest(\n            customGraphQLServer,\n            standaloneGraphQLServerResponse,\n            `{\"query\":\"${returnErrorQuery}\"}`,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.errors[0].message).toBe(\n            'The first error!, The second error!',\n        )\n        customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n    },\n)\n\ntest('Should adjust data response if adjustGraphQLExecutionResult is provided', async () => {\n    customGraphQLServer.setOptions({\n        adjustGraphQLExecutionResult: (\n            parameters: StandaloneResponseParameters,\n        ): GraphQLExecutionResult => {\n            const result = parameters.executionResult\n            if (result && result.executionResult) {\n                result.executionResult = {\n                    data: { message: 'test' },\n                }\n            }\n            return (\n                result ?? {\n                    executionResult: {\n                        errors: [new GraphQLError('No result', {})],\n                    },\n                }\n            )\n        },\n        logger: NO_LOGGER,\n        removeValidationRecommendations: false,\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n    })\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        `{\"query\":\"${userQuery}\", \"variables\":${userVariables}}`,\n    )\n    const responseBody =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n\n    expect(responseBody.data.message).toBe('test')\n    customGraphQLServer.setOptions(INITIAL_GRAPHQL_SERVER_OPTIONS)\n})\n"
    },
    "tests/metrics/MetricsClients.integration.test.ts": {
      "tests": [
        {
          "id": "33",
          "name": "Should get correct metrics for SimpleMetricsClient"
        },
        {
          "id": "34",
          "name": "Should get no metrics for NoMetricsClient"
        }
      ],
      "source": "/* eslint-disable @typescript-eslint/naming-convention */\nimport {\n    FETCH_ERROR,\n    GRAPHQL_ERROR,\n    INVALID_SCHEMA_ERROR,\n    METHOD_NOT_ALLOWED_ERROR,\n    MISSING_QUERY_PARAMETER_ERROR,\n    MetricsClient,\n    SCHEMA_VALIDATION_ERROR,\n    SYNTAX_ERROR,\n    VALIDATION_ERROR,\n} from '@dreamit/graphql-server-base'\nimport { GraphQLError, NoSchemaIntrospectionCustomRule } from 'graphql'\nimport {\n    GraphQLServer,\n    GraphQLServerOptions,\n    NoMetricsClient,\n    SimpleMetricsClient,\n} from 'src'\nimport { expect, test } from 'vitest'\nimport {\n    initialSchemaWithOnlyDescription,\n    returnErrorQuery,\n    userQuery,\n    userSchema,\n    userSchemaResolvers,\n    usersQuery,\n} from '../ExampleSchemas'\n\nimport { NO_LOGGER } from '../TestHelpers'\n\nconst customGraphQLServer = new GraphQLServer(\n    getInitialGraphQLServerOptions(new NoMetricsClient()),\n)\nlet metricsData: string\n\ntest('Should get correct metrics for SimpleMetricsClient', async () => {\n    const metricsClient = new SimpleMetricsClient()\n    customGraphQLServer.setMetricsClient(metricsClient)\n    await runMetricsTest(metricsClient, false)\n})\n\ntest('Should get no metrics for NoMetricsClient', async () => {\n    const metricsClient = new NoMetricsClient()\n    customGraphQLServer.setMetricsClient(metricsClient)\n    await runMetricsTest(metricsClient, true)\n})\n\nasync function runMetricsTest(\n    metricsClient: MetricsClient,\n    isNoMetricsClient: boolean,\n): Promise<void> {\n    await testInitialMetrics(isNoMetricsClient)\n    await testInvalidSchemaMetrics(metricsClient, isNoMetricsClient)\n    await testValidResponseMetrics(isNoMetricsClient)\n    await testErrorResponseMetrics(isNoMetricsClient)\n    await testEmptyContentResponseMetrics(isNoMetricsClient)\n    await testFetchErrorResponseMetrics(metricsClient, isNoMetricsClient)\n}\n\n/**\n * Test:\n * When called before anything else availability should be 1 and the rest\n * of the counters and gauges should be 0\n */\nasync function testInitialMetrics(isNoMetricsClient: boolean): Promise<void> {\n    metricsData = await customGraphQLServer.getMetrics()\n    const metricsContentType = customGraphQLServer.getMetricsContentType()\n    if (isNoMetricsClient) {\n        expect(metricsContentType).toBe('')\n        expect(metricsData).toBe('')\n    } else {\n        expect(metricsContentType).toBe(\n            'text/plain; charset=utf-8; version=0.0.4',\n        )\n        expect(metricsData).toContain('graphql_server_availability 1')\n        expect(metricsData).toContain('graphql_server_request_throughput 0')\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${GRAPHQL_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SCHEMA_VALIDATION_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${FETCH_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${METHOD_NOT_ALLOWED_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${INVALID_SCHEMA_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${MISSING_QUERY_PARAMETER_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${VALIDATION_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SYNTAX_ERROR}\"} 0`,\n        )\n    }\n}\n\n/**\n * Test:\n * When schema is invalid, availability should be 0. As only metrics endpoint\n * is being called, request_throughput should stay at 0,\n * SchemaValidationError should increase to 1 and GraphQLError counter should stay at 0\n */\nasync function testInvalidSchemaMetrics(\n    metricsClient: MetricsClient,\n    isNoMetricsClient: boolean,\n): Promise<void> {\n    customGraphQLServer.setOptions({\n        logger: NO_LOGGER,\n        metricsClient: metricsClient,\n        rootValue: userSchemaResolvers,\n        schema: initialSchemaWithOnlyDescription,\n        shouldUpdateSchemaFunction: () => true,\n    })\n    metricsData = await customGraphQLServer.getMetrics()\n\n    if (isNoMetricsClient) {\n        expect(metricsData).toBe('')\n    } else {\n        expect(metricsData).toContain('graphql_server_availability 0')\n        expect(metricsData).toContain('graphql_server_request_throughput 0')\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${GRAPHQL_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SCHEMA_VALIDATION_ERROR}\"} 1`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${FETCH_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${METHOD_NOT_ALLOWED_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${INVALID_SCHEMA_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${MISSING_QUERY_PARAMETER_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${VALIDATION_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SYNTAX_ERROR}\"} 0`,\n        )\n    }\n    customGraphQLServer.setOptions(\n        getInitialGraphQLServerOptions(metricsClient),\n    )\n}\n\n/**\n * Test:\n * With working schema, availability should be 1.\n * When sending request with valid data response,\n * request_throughput should increase to 1.\n */\nasync function testValidResponseMetrics(\n    isNoMetricsClient: boolean,\n): Promise<void> {\n    await customGraphQLServer.handleRequest({\n        query: usersQuery,\n    })\n    metricsData = await customGraphQLServer.getMetrics()\n\n    if (isNoMetricsClient) {\n        expect(metricsData).toBe('')\n    } else {\n        expect(metricsData).toContain('graphql_server_availability 1')\n        expect(metricsData).toContain('graphql_server_request_throughput 1')\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${GRAPHQL_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SCHEMA_VALIDATION_ERROR}\"} 1`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${FETCH_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${METHOD_NOT_ALLOWED_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${INVALID_SCHEMA_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${MISSING_QUERY_PARAMETER_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${VALIDATION_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SYNTAX_ERROR}\"} 0`,\n        )\n    }\n}\n\n/**\n * Test:\n * When sending request that returns GraphQL error,\n * GraphQLError counter and request throughput should increase by 1\n */\nasync function testErrorResponseMetrics(\n    isNoMetricsClient: boolean,\n): Promise<void> {\n    await customGraphQLServer.handleRequest({\n        query: returnErrorQuery,\n    })\n    metricsData = await customGraphQLServer.getMetrics()\n\n    if (isNoMetricsClient) {\n        expect(metricsData).toBe('')\n    } else {\n        expect(metricsData).toContain('graphql_server_availability 1')\n        expect(metricsData).toContain('graphql_server_request_throughput 2')\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${GRAPHQL_ERROR}\"} 1`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SCHEMA_VALIDATION_ERROR}\"} 1`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${FETCH_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${METHOD_NOT_ALLOWED_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${INVALID_SCHEMA_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${MISSING_QUERY_PARAMETER_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${VALIDATION_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SYNTAX_ERROR}\"} 0`,\n        )\n    }\n}\n\n/**\n * Test:\n * When sending request with empty content type GraphQL error,\n * GraphQLError counter and request throughput should increase by 1\n */\nasync function testEmptyContentResponseMetrics(\n    isNoMetricsClient: boolean,\n): Promise<void> {\n    await customGraphQLServer.handleRequest({\n        body: '{\"query\":\"unknown\"}',\n        headers: { 'content-type': '' },\n        method: 'POST',\n    })\n\n    metricsData = await customGraphQLServer.getMetrics()\n\n    if (isNoMetricsClient) {\n        expect(metricsData).toBe('')\n    } else {\n        expect(metricsData).toContain('graphql_server_availability 1')\n        expect(metricsData).toContain('graphql_server_request_throughput 3')\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${GRAPHQL_ERROR}\"} 2`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SCHEMA_VALIDATION_ERROR}\"} 1`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${FETCH_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${METHOD_NOT_ALLOWED_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${INVALID_SCHEMA_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${MISSING_QUERY_PARAMETER_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${VALIDATION_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SYNTAX_ERROR}\"} 0`,\n        )\n    }\n}\n\n/**\n * Test:\n * When forcing a FetchError in execute function,\n * FetchError counter and request throughput should increase by 1\n */\nasync function testFetchErrorResponseMetrics(\n    metricsClient: MetricsClient,\n    isNoMetricsClient: boolean,\n): Promise<void> {\n    customGraphQLServer.setOptions({\n        executeFunction: () => {\n            throw new GraphQLError(\n                'FetchError: ' +\n                    'An error occurred while connecting to following endpoint',\n                {},\n            )\n        },\n        logger: NO_LOGGER,\n        metricsClient: metricsClient,\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n    })\n\n    await customGraphQLServer.handleRequest({\n        query: userQuery,\n    })\n    metricsData = await customGraphQLServer.getMetrics()\n\n    if (isNoMetricsClient) {\n        expect(metricsData).toBe('')\n    } else {\n        expect(metricsData).toContain('graphql_server_availability 1')\n        expect(metricsData).toContain('graphql_server_request_throughput 4')\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${GRAPHQL_ERROR}\"} 2`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SCHEMA_VALIDATION_ERROR}\"} 1`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${FETCH_ERROR}\"} 1`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${METHOD_NOT_ALLOWED_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${INVALID_SCHEMA_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${MISSING_QUERY_PARAMETER_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${VALIDATION_ERROR}\"} 0`,\n        )\n        expect(metricsData).toContain(\n            `graphql_server_errors{errorClass=\"${SYNTAX_ERROR}\"} 0`,\n        )\n    }\n    customGraphQLServer.setOptions(\n        getInitialGraphQLServerOptions(metricsClient),\n    )\n}\n\nfunction getInitialGraphQLServerOptions(\n    metricsClient: MetricsClient,\n): GraphQLServerOptions {\n    return {\n        customValidationRules: [NoSchemaIntrospectionCustomRule],\n        logger: NO_LOGGER,\n        metricsClient: metricsClient,\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n    }\n}\n"
    },
    "tests/logger/CreateLogEntry.test.ts": {
      "tests": [
        {
          "id": "35",
          "name": "expects a correct logEntry is created for given 'A info message' , 'INFO' and undefined"
        },
        {
          "id": "36",
          "name": "expects a correct logEntry is created for given 'Variable \\\"$login\\\" got invalid value…' , 'INFO' and undefined"
        },
        {
          "id": "37",
          "name": "expects a correct logEntry is created for given 'A debug message' , 'DEBUG' and undefined"
        },
        {
          "id": "38",
          "name": "expects a correct logEntry is created for given 'A FetchError message' , 'ERROR' and FetchError: An error occurred while conne… { type: '…' }"
        },
        {
          "id": "39",
          "name": "expects a correct logEntry is created for given 'A GraphQLError message' , 'ERROR' and GraphQLError{ …(10) }"
        },
        {
          "id": "40",
          "name": "expects a correct logEntry is created for given 'A GraphQLError message' , 'ERROR' and { …(3) }"
        },
        {
          "id": "41",
          "name": "expects a correct logEntry is created for given 'A GraphQLError message' , 'ERROR' and Error: error"
        },
        {
          "id": "42",
          "name": "Should use customErrorName instead or error.name if customErrorName is set"
        },
        {
          "id": "43",
          "name": "Should use context.serviceName instead of error.extensions.serviceName if context contains serviceName"
        },
        {
          "id": "44",
          "name": "Should use fallback values for loggerName, serviceName and level if they are not set"
        },
        {
          "id": "45",
          "name": "Should remove white spaces at the beginning of the message"
        },
        {
          "id": "46",
          "name": "Test downgrading loglevel based on service name"
        },
        {
          "id": "47",
          "name": "Should not downgrade error to warn if the service namein error extensions and serviceName match"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { GraphQLError, Kind } from 'graphql'\nimport { LogLevel, createLogEntry } from 'src'\nimport { expect, test } from 'vitest'\n\n// Created based upon implementation in node-fetch to avoid importing whole package for this class\nclass FetchError extends Error {\n    name = 'FetchError'\n    type: string\n    constructor(message: string, type: string) {\n        super(message)\n        this.type = type\n    }\n}\n\nconst customerMessage = '`CustomerPayload` is an extension type'\nconst customerQuery = '{\\n  customer {\\n    dateOfBirth\\n  }\\n}'\nconst messageWithVariables =\n    String.raw`Variable \\\"$login\\\" got invalid value` +\n    String.raw` { email: \\\"max@mustermann.de\\\", password: \\\"12345678\\\", abc: \\\"def\\\" }` +\n    String.raw`; Field \\\"abc\\\" is not defined by type LoginInput.`\n\nconst graphQLError: GraphQLError = new GraphQLError(customerMessage, {\n    extensions: {\n        exception: 'A stacktrace',\n        query: customerQuery,\n        serviceName: 'customer',\n    },\n})\nconst graphQLErrorWithVariables: GraphQLError = new GraphQLError(\n    messageWithVariables,\n    {\n        extensions: {\n            exception: 'A stacktrace',\n            query: customerQuery,\n            serviceName: 'myTestService',\n        },\n    },\n)\nconst graphQLErrorWithSourceBody = new GraphQLError(customerMessage, {\n    extensions: {\n        exception: 'A stacktrace',\n        serviceName: 'customer',\n    },\n    source: {\n        get [Symbol.toStringTag](): string {\n            return this[Symbol.toStringTag]\n        },\n        body: customerQuery,\n        locationOffset: {\n            column: 1,\n            line: 1,\n        },\n        name: 'doesnotmatter',\n    },\n})\n\nconst graphQLErrorWithAstNode = new GraphQLError(customerMessage, {\n    extensions: {\n        exception: 'A stacktrace',\n        serviceName: 'customer',\n    },\n    nodes: {\n        kind: Kind.NAMED_TYPE,\n        loc: undefined,\n        name: {\n            kind: Kind.NAME,\n            value: 'customer',\n        },\n    },\n})\n\nconst graphQLErrorWithSensibleStacktrace = new GraphQLError(customerMessage, {\n    extensions: {\n        exception: messageWithVariables,\n        serviceName: 'customer',\n    },\n    nodes: {\n        kind: Kind.NAMED_TYPE,\n        loc: undefined,\n        name: {\n            kind: Kind.NAME,\n            value: 'customer',\n        },\n    },\n})\n\nconst errorWithSensibleStackInformation: Error = {\n    message: customerMessage,\n    name: 'SensibleError',\n    stack: messageWithVariables,\n}\n\nconst fetchError = new FetchError(\n    'An error occurred while connecting to following endpoint',\n    'system',\n)\n\nconst errorWithoutStacktrace = new Error('error')\nerrorWithoutStacktrace.stack = undefined\nconst errorMessage = 'A GraphQLError message error'\n\nconst graphQLErrorMessage = 'A GraphQLError message ' + customerMessage\nconst fetchErrorMessage =\n    'A FetchError message ' +\n    'An error occurred while connecting to following endpoint'\nconst sanitizedMessage = String.raw`Variable \\\"$login\\\" got invalid value REMOVED BY SANITIZER; Field \\\"abc\\\" is not defined by type LoginInput.`\nconst errorWithVariables = 'A GraphQLError message ' + sanitizedMessage\n\ntest.each`\n    logMessage                  | loglevel          | error                                 | expectedLogMessage     | expectedLogLevel | expectedStacktrace        | expectedQuery | expectedServiceName\n    ${'A info message'}         | ${LogLevel.info}  | ${undefined}                          | ${'A info message'}    | ${'INFO'}        | ${undefined}              | ${undefined}  | ${'myTestService'}\n    ${messageWithVariables}     | ${LogLevel.info}  | ${undefined}                          | ${sanitizedMessage}    | ${'INFO'}        | ${undefined}              | ${undefined}  | ${'myTestService'}\n    ${'A debug message'}        | ${LogLevel.debug} | ${undefined}                          | ${'A debug message'}   | ${'DEBUG'}       | ${undefined}              | ${undefined}  | ${'myTestService'}\n    ${'A FetchError message'}   | ${LogLevel.error} | ${fetchError}                         | ${fetchErrorMessage}   | ${'ERROR'}       | ${'FetchError: An error'} | ${undefined}  | ${'myTestService'}\n    ${'A GraphQLError message'} | ${LogLevel.error} | ${graphQLError}                       | ${graphQLErrorMessage} | ${'WARN'}        | ${'A stacktrace'}         | ${'customer'} | ${'customer'}\n    ${'A GraphQLError message'} | ${LogLevel.error} | ${graphQLErrorWithVariables}          | ${errorWithVariables}  | ${'ERROR'}       | ${'A stacktrace'}         | ${'customer'} | ${'myTestService'}\n    ${'A GraphQLError message'} | ${LogLevel.error} | ${graphQLErrorWithSourceBody}         | ${graphQLErrorMessage} | ${'WARN'}        | ${'A stacktrace'}         | ${'customer'} | ${'customer'}\n    ${'A GraphQLError message'} | ${LogLevel.error} | ${graphQLErrorWithAstNode}            | ${graphQLErrorMessage} | ${'WARN'}        | ${'A stacktrace'}         | ${'customer'} | ${'customer'}\n    ${'A GraphQLError message'} | ${LogLevel.error} | ${graphQLErrorWithSensibleStacktrace} | ${graphQLErrorMessage} | ${'WARN'}        | ${sanitizedMessage}       | ${'customer'} | ${'customer'}\n    ${'A GraphQLError message'} | ${LogLevel.error} | ${errorWithSensibleStackInformation}  | ${graphQLErrorMessage} | ${'ERROR'}       | ${sanitizedMessage}       | ${undefined}  | ${'myTestService'}\n    ${'A GraphQLError message'} | ${LogLevel.error} | ${errorWithoutStacktrace}             | ${errorMessage}        | ${'ERROR'}       | ${undefined}              | ${undefined}  | ${'myTestService'}\n`(\n    'expects a correct logEntry is created for given $logMessage , $loglevel and $error ',\n    ({\n        logMessage,\n        loglevel,\n        error,\n        expectedLogMessage,\n        expectedLogLevel,\n        expectedStacktrace,\n        expectedQuery,\n        expectedServiceName,\n    }) => {\n        const logEntry = createLogEntry({\n            context: undefined,\n            error,\n            logMessage,\n            loggerName: 'test-logger',\n            loglevel,\n            serviceName: 'myTestService',\n        })\n        expect(logEntry.message).toBe(expectedLogMessage)\n        expect(logEntry.level).toBe(expectedLogLevel)\n        if (expectedStacktrace) {\n            expect(logEntry.stacktrace).toEqual(\n                expect.stringContaining(expectedStacktrace),\n            )\n        } else {\n            expect(logEntry.stacktrace).toBe(expectedStacktrace)\n        }\n\n        if (expectedQuery) {\n            expect(logEntry.query).toEqual(\n                expect.stringContaining(expectedQuery),\n            )\n        } else {\n            expect(logEntry.query).toBe(expectedQuery)\n        }\n        expect(logEntry.serviceName).toBe(expectedServiceName)\n    },\n)\n\ntest('Should use customErrorName instead or error.name if customErrorName is set', () => {\n    const logEntry = createLogEntry({\n        context: undefined,\n        customErrorName: 'MyCustomError',\n        error: graphQLError,\n        logMessage: 'A GraphQLError message',\n        loggerName: 'test-logger',\n        loglevel: LogLevel.error,\n        serviceName: 'myTestService',\n    })\n    expect(logEntry.errorName).toBe('MyCustomError')\n})\n\ntest(\n    'Should use context.serviceName instead of error.extensions.serviceName' +\n        ' if context contains serviceName',\n    () => {\n        const logEntry = createLogEntry({\n            context: { serviceName: 'myRemoteService' },\n            customErrorName: 'MyCustomError',\n            error: errorWithSensibleStackInformation,\n            logMessage: 'A GraphQLError message',\n            loggerName: 'test-logger',\n            loglevel: LogLevel.error,\n            serviceName: 'myTestService',\n        })\n        expect(logEntry.serviceName).toBe('myRemoteService')\n    },\n)\n\ntest('Should use fallback values for loggerName, serviceName and level if they are not set', () => {\n    const logEntry = createLogEntry({\n        context: undefined,\n        logMessage: 'A GraphQLError message',\n    })\n    expect(logEntry.message).toBe('A GraphQLError message')\n    expect(logEntry.level).toBe(LogLevel.info)\n    expect(logEntry.logger).toBe('fallback-logger')\n    expect(logEntry.serviceName).toBe('fallback-service')\n})\n\ntest('Should remove white spaces at the beginning of the message', () => {\n    const logEntry = createLogEntry({\n        context: undefined,\n        error: graphQLError,\n        logMessage: '',\n    })\n    expect(logEntry.message).toBe(customerMessage)\n})\n\ntest('Test downgrading loglevel based on service name', () => {\n    expect(\n        createLogEntry({\n            context: { serviceName: 'myRemoteService' },\n            error: errorWithoutStacktrace,\n            logMessage: '',\n            loglevel: LogLevel.error,\n            serviceName: 'myTestService',\n        }).level,\n    ).toBe(LogLevel.warn)\n    expect(\n        createLogEntry({\n            context: { serviceName: 'myTestService' },\n            error: errorWithoutStacktrace,\n            logMessage: '',\n            loglevel: LogLevel.error,\n            serviceName: 'myTestService',\n        }).level,\n    ).toBe(LogLevel.error)\n    expect(\n        createLogEntry({\n            context: { serviceName: 'myTestService' },\n            error: errorWithoutStacktrace,\n            logMessage: '',\n            loglevel: LogLevel.info,\n            serviceName: 'myTestService',\n        }).level,\n    ).toBe(LogLevel.info)\n    expect(\n        createLogEntry({\n            context: { serviceName: 'myRemoteService' },\n            error: errorWithoutStacktrace,\n            logMessage: '',\n            loglevel: LogLevel.info,\n            serviceName: 'myTestService',\n        }).level,\n    ).toBe(LogLevel.info)\n})\n\ntest(\n    'Should not downgrade error to warn if the service name' +\n        'in error extensions and serviceName match',\n    () => {\n        const logEntry = createLogEntry({\n            context: undefined,\n            error: graphQLError,\n            logMessage: '',\n            loglevel: LogLevel.error,\n            serviceName: 'customer',\n        })\n        expect(logEntry.level).toBe(LogLevel.error)\n    },\n)\n"
    },
    "tests/server/GraphQLServer.test.ts": {
      "tests": [
        {
          "id": "48",
          "name": "Should create schema on GraphQLServer class creation"
        },
        {
          "id": "49",
          "name": "Should update schema when calling GraphQLServer updateGraphQLSchema function"
        },
        {
          "id": "50",
          "name": "Should not update schema when given schema is undefined"
        },
        {
          "id": "51",
          "name": "Should update schema when given schema is undefined and shouldUpdateSchemaFunction is true"
        },
        {
          "id": "52",
          "name": "Should execute query without server"
        },
        {
          "id": "53",
          "name": "Should receive correct error message if response contains a GraphQLError"
        },
        {
          "id": "54",
          "name": "Should receive correct error message if request validation fails"
        },
        {
          "id": "55",
          "name": "Should use SimpleMetricsClient as fallback if cpuUsage is not available"
        },
        {
          "id": "56",
          "name": "Usage of a second GraphQLServer with MetricsClient that does not use prom-client should not intervene with metrics collection of first server"
        },
        {
          "id": "57",
          "name": "Should set only default options if no options are provided"
        },
        {
          "id": "58",
          "name": "Should adjust execution result with data from mutation context info"
        }
      ],
      "source": "/* eslint-disable @typescript-eslint/naming-convention */\nimport { GraphQLExecutionResult } from '@dreamit/graphql-server-base'\nimport { GraphQLError, GraphQLSchema, parse, validate } from 'graphql'\nimport {\n    GraphQLServer,\n    LogLevel,\n    SimpleMetricsClient,\n    StandaloneResponseParameters,\n    defaultCollectErrorMetrics,\n    defaultContextFunction,\n    defaultMethodNotAllowedResponse,\n    defaultOnlyQueryInGetRequestsResponse,\n    extractInformationFromRequest,\n} from 'src'\nimport { expect, test } from 'vitest'\nimport {\n    initialSchemaWithOnlyDescription,\n    loginMutation,\n    returnErrorQuery,\n    userOne,\n    userSchema,\n    userSchemaResolvers,\n    userTwo,\n    usersQuery,\n} from '../ExampleSchemas'\nimport { JsonTestLogger, NO_LOGGER } from '../TestHelpers'\n\nconst graphQLErrorResponse: GraphQLExecutionResult = {\n    executionResult: {\n        errors: [new GraphQLError('doesnotmatter', {})],\n    },\n}\n\ntest('Should create schema on GraphQLServer class creation', () => {\n    const graphqlServer = new GraphQLServer({\n        invalidSchemaResponse: graphQLErrorResponse,\n        logger: NO_LOGGER,\n        methodNotAllowedResponse: defaultMethodNotAllowedResponse,\n        missingQueryParameterResponse: (): GraphQLExecutionResult =>\n            graphQLErrorResponse,\n        onlyQueryInGetRequestsResponse: defaultOnlyQueryInGetRequestsResponse,\n        schema: initialSchemaWithOnlyDescription,\n    })\n    const schema = graphqlServer.getSchema()\n    expect(schema).toBeDefined()\n    expect(schema?.description).toBe('initial')\n    expectRootQueryNotDefined(graphqlServer)\n})\n\ntest('Should update schema when calling GraphQLServer updateGraphQLSchema function', () => {\n    const graphqlServer = new GraphQLServer({\n        logger: NO_LOGGER,\n        schema: initialSchemaWithOnlyDescription,\n    })\n    const updatedSchema = new GraphQLSchema({ description: 'updated' })\n    graphqlServer.setSchema(updatedSchema)\n    const schema = graphqlServer.getSchema()\n    expect(schema).toBeDefined()\n    expect(schema?.description).toBe('updated')\n    expectRootQueryNotDefined(graphqlServer)\n})\n\ntest('Should not update schema when given schema is undefined', () => {\n    const logger = new JsonTestLogger()\n    const graphqlServer = new GraphQLServer({\n        logger: logger,\n        schema: initialSchemaWithOnlyDescription,\n    })\n    graphqlServer.setSchema()\n    const schema = graphqlServer.getSchema()\n    expect(schema).toBeDefined()\n    expect(schema?.description).toBe('initial')\n    expectRootQueryNotDefined(graphqlServer)\n    const warnLogEntry = logger.logEntries.pop()\n    expect(warnLogEntry?.message).toBe(\n        'Schema update was rejected because condition set in \"shouldUpdateSchema\" check was not fulfilled.',\n    )\n    expect(warnLogEntry?.level).toBe(LogLevel.warn)\n})\n\ntest(\n    'Should update schema when given schema is undefined ' +\n        'and shouldUpdateSchemaFunction is true',\n    () => {\n        const graphqlServer = new GraphQLServer({\n            logger: NO_LOGGER,\n            schema: initialSchemaWithOnlyDescription,\n            shouldUpdateSchemaFunction: (): boolean => true,\n        })\n        graphqlServer.setSchema()\n        const schema = graphqlServer.getSchema()\n        expect(schema).toBeUndefined()\n    },\n)\n\ntest('Should execute query without server', async () => {\n    const graphqlServer = new GraphQLServer({\n        collectErrorMetricsFunction: defaultCollectErrorMetrics,\n        contextFunction: defaultContextFunction,\n        extractInformationFromRequest: extractInformationFromRequest,\n        logger: NO_LOGGER,\n        metricsClient: new SimpleMetricsClient(),\n        parseFunction: parse,\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        validateFunction: validate,\n    })\n    expect(graphqlServer.schemaValidationErrors.length).toBe(0)\n\n    const result = await graphqlServer.handleRequest({\n        query: usersQuery,\n    })\n    expect(result.executionResult.data?.users).toEqual([userOne, userTwo])\n    expect(result.statusCode).toBe(200)\n    expect(result.requestInformation?.query).toBe(usersQuery)\n})\n\ntest('Should receive correct error message if response contains a GraphQLError', async () => {\n    const logger = new JsonTestLogger()\n    const graphqlServer = new GraphQLServer({\n        executionResultErrorMessage: 'Error:',\n        logger: logger,\n        metricsClient: new SimpleMetricsClient(),\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        validationErrorMessage: 'ValidationError:',\n    })\n    await graphqlServer.handleRequest({\n        query: returnErrorQuery,\n    })\n    expect(logger.logEntries.at(1)?.message).toBe(\n        'Error: Something went wrong!',\n    )\n})\n\ntest('Should receive correct error message if request validation fails', async () => {\n    const logger = new JsonTestLogger()\n    const graphqlServer = new GraphQLServer({\n        executionResultErrorMessage: 'Error:',\n        logger: logger,\n        metricsClient: new SimpleMetricsClient(),\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        validationErrorMessage: 'ValidationError:',\n    })\n    await graphqlServer.handleRequest({\n        query: 'query users{ users { unknownField } }',\n    })\n    expect(logger.logEntries.at(1)?.message).toBe(\n        'ValidationError: Cannot query field \"unknownField\" on type \"User\".',\n    )\n})\n\ntest('Should use SimpleMetricsClient as fallback if cpuUsage is not available', async () => {\n    const savedProcess = process\n\n    // eslint-disable-next-line no-global-assign\n    process = {} as NodeJS.Process\n    // Necessary for Jest to measure/evaluate test performance\n    process.hrtime = savedProcess.hrtime\n\n    const graphqlServer = new GraphQLServer({\n        logger: NO_LOGGER,\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n    })\n    const metrics = await graphqlServer.getMetrics()\n    expect(metrics).toContain('graphql_server_availability 1')\n    expect(metrics).not.toContain('process_cpu_seconds_total 0')\n\n    // eslint-disable-next-line no-global-assign\n    process = savedProcess\n})\n\ntest(\n    'Usage of a second GraphQLServer with MetricsClient that does not use prom-client' +\n        ' should not intervene with metrics collection of first server',\n    async () => {\n        const graphqlServerMain = new GraphQLServer({\n            logger: NO_LOGGER,\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n\n        // Execute request on main server twice to get throughput count of 2\n        await graphqlServerMain.handleRequest({\n            query: usersQuery,\n        })\n        await graphqlServerMain.handleRequest({\n            query: usersQuery,\n        })\n        let metrics = await graphqlServerMain.getMetrics()\n        expect(metrics).toContain('graphql_server_request_throughput 2')\n\n        const graphqlServerSecond = new GraphQLServer({\n            logger: NO_LOGGER,\n            metricsClient: new SimpleMetricsClient(),\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n\n        // Execute request on second server once to get throughput count of 1\n        await graphqlServerSecond.handleRequest({\n            query: usersQuery,\n        })\n        metrics = await graphqlServerSecond.getMetrics()\n        expect(metrics).toContain('graphql_server_request_throughput 1')\n\n        // Metrics on main server should still have throughput count of 2\n        metrics = await graphqlServerMain.getMetrics()\n        expect(metrics).toContain('graphql_server_request_throughput 2')\n    },\n)\n\ntest('Should set only default options if no options are provided', async () => {\n    const graphqlServer = new GraphQLServer()\n    const metrics = await graphqlServer.getMetrics()\n    expect(metrics).toContain('graphql_server_availability 0')\n})\n\ntest('Should adjust execution result with data from mutation context info', async () => {\n    const graphqlServer = new GraphQLServer({\n        adjustGraphQLExecutionResult: (\n            parameters: StandaloneResponseParameters,\n        ): GraphQLExecutionResult => {\n            const result = parameters.executionResult\n            const contextRecord = parameters.context as Record<string, unknown>\n            if (result && contextRecord.jwt) {\n                result.customHeaders = { 'x-jwt': String(contextRecord.jwt) }\n            }\n            return (\n                result ?? {\n                    executionResult: {\n                        errors: [new GraphQLError('No result', {})],\n                    },\n                }\n            )\n        },\n\n        collectErrorMetricsFunction: defaultCollectErrorMetrics,\n        contextFunction: (): unknown => ({ authHeader: '123456789' }),\n        extractInformationFromRequest: extractInformationFromRequest,\n        logger: NO_LOGGER,\n        metricsClient: new SimpleMetricsClient(),\n        parseFunction: parse,\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        validateFunction: validate,\n    })\n    const result = await graphqlServer.handleRequest({\n        query: loginMutation,\n    })\n    expect(result.executionResult.data?.login).toEqual({ jwt: 'jwt-123456789' })\n    expect(result.customHeaders).toEqual({ 'x-jwt': 'jwt-123456789' })\n    expect(result.statusCode).toBe(200)\n    expect(result.requestInformation?.query).toBe(loginMutation)\n})\n\nfunction expectRootQueryNotDefined(graphqlServer: GraphQLServer): void {\n    const schemaValidationErrors = graphqlServer.getSchemaValidationErrors()\n    expect(schemaValidationErrors?.length).toBe(1)\n    expect(schemaValidationErrors?.[0].message).toBe(\n        'Query root type must be provided.',\n    )\n}\n"
    },
    "tests/logger/TextLogger.test.ts": {
      "tests": [
        {
          "id": "59",
          "name": "Creating a Logger should work with default options"
        },
        {
          "id": "60",
          "name": "logMessage should work even if no loglevel is provided"
        },
        {
          "id": "61",
          "name": "Debug entry should be written if debug is enabled"
        },
        {
          "id": "62",
          "name": "Debug entry should not be written if debug is disabled"
        },
        {
          "id": "63",
          "name": "Error entry should be written"
        },
        {
          "id": "64",
          "name": "Info entry should be written"
        },
        {
          "id": "65",
          "name": "Warn entry should be written"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { testDateFunction, testDateString } from '@dreamit/funpara'\nimport { LogEntry, NoStacktraceTextLogger, TextLogger } from 'src'\nimport { expect, test } from 'vitest'\nimport { NO_CONSOLE } from '../TestHelpers'\n\nclass TextTestLogger extends TextLogger {\n    logEntries: Array<string> = new Array<string>()\n\n    constructor(debugEnabled = false) {\n        super(\n            'test-logger',\n            'test-service',\n            debugEnabled,\n            undefined,\n            undefined,\n            NO_CONSOLE,\n        )\n    }\n\n    prepareLogOutput(logEntry: LogEntry, context?: unknown): string {\n        logEntry.stacktrace = logEntry.stacktrace ? 'stacktrace' : undefined\n        logEntry.timestamp = testDateString\n        const logOutput = super.prepareLogOutput(logEntry, context)\n        this.logEntries.push(logOutput)\n        return logOutput\n    }\n}\n\nclass NoStacktraceTextTestLogger extends NoStacktraceTextLogger {\n    logEntries: Array<string> = new Array<string>()\n\n    constructor(debugEnabled = false) {\n        super(\n            'test-logger',\n            'test-service',\n            debugEnabled,\n            undefined,\n            undefined,\n            NO_CONSOLE,\n        )\n    }\n\n    prepareLogOutput(logEntry: LogEntry, context: unknown): string {\n        logEntry.timestamp = testDateString\n        const logOutput = super.prepareLogOutput(logEntry, context)\n        this.logEntries.push(logOutput)\n        return logOutput\n    }\n}\n\ntest('Creating a Logger should work with default options', () => {\n    for (const logger of [\n        new TextLogger('test-logger', 'test-service'),\n        new NoStacktraceTextLogger('test-logger', 'test-service'),\n    ]) {\n        expect(logger.debugEnabled).toBe(false)\n        expect(logger.truncateLimit).toBe(0)\n        expect(logger.truncatedText).toBe('_TRUNCATED_')\n    }\n})\n\ntest.each([new TextTestLogger(), new NoStacktraceTextTestLogger()])(\n    'logMessage should work even if no loglevel is provided',\n    (logger: TextTestLogger | NoStacktraceTextTestLogger) => {\n        logger.logMessage({\n            context: undefined,\n            logMessage: 'test',\n        })\n        // Then\n        expect(logger.logEntries.at(0)).toBe(\n            `${testDateString} [INFO]test-logger-test-service :test`,\n        )\n    },\n)\n\ntest.each([new TextTestLogger(true), new NoStacktraceTextTestLogger(true)])(\n    'Debug entry should be written if debug is enabled',\n    (debugLogger: TextTestLogger | NoStacktraceTextTestLogger) => {\n        debugLogger.debug('test', undefined, testDateFunction)\n        expect(debugLogger.logEntries.at(0)).toBe(\n            `${testDateString} [DEBUG]test-logger-test-service :test`,\n        )\n    },\n)\n\ntest.each([new TextTestLogger(), new NoStacktraceTextTestLogger()])(\n    'Debug entry should not be written if debug is disabled',\n    (defaultLogger: TextTestLogger | NoStacktraceTextTestLogger) => {\n        defaultLogger.debug('test')\n        expect(defaultLogger.logEntries.length).toBe(0)\n    },\n)\n\ntest.each([new TextTestLogger(), new NoStacktraceTextTestLogger()])(\n    'Error entry should be written',\n    (defaultLogger: TextTestLogger | NoStacktraceTextTestLogger) => {\n        const testError = new Error('error')\n        testError.stack = 'stacktrace'\n        defaultLogger.error(\n            'error',\n            testError,\n            'custom',\n            undefined,\n            testDateFunction,\n        )\n        expect(defaultLogger.logEntries.at(0)).toBe(\n            '1001-01-01T00:00:00.000Z [ERROR]test-logger-test-service :error error' +\n                (defaultLogger instanceof NoStacktraceTextTestLogger\n                    ? ''\n                    : ' stacktrace'),\n        )\n    },\n)\n\ntest.each([new TextTestLogger(), new NoStacktraceTextTestLogger()])(\n    'Info entry should be written',\n    (defaultLogger: TextTestLogger | NoStacktraceTextTestLogger) => {\n        defaultLogger.info('info', undefined, testDateFunction)\n        expect(defaultLogger.logEntries.at(0)).toBe(\n            '1001-01-01T00:00:00.000Z [INFO]test-logger-test-service :info',\n        )\n    },\n)\n\ntest.each([new TextTestLogger(), new NoStacktraceTextTestLogger()])(\n    'Warn entry should be written',\n    (defaultLogger: TextTestLogger | NoStacktraceTextTestLogger) => {\n        defaultLogger.warn('warn', undefined, testDateFunction)\n        expect(defaultLogger.logEntries.at(0)).toBe(\n            '1001-01-01T00:00:00.000Z [WARN]test-logger-test-service :warn',\n        )\n    },\n)\n"
    },
    "tests/request/ExtractInformationFromRequest.test.ts": {
      "tests": [
        {
          "id": "66",
          "name": "Test that request information is extracted correctly from url parameters expects for request { operationName: 'users', …(1) } to extract values correctly"
        },
        {
          "id": "67",
          "name": "Test that request information is extracted correctly from url parameters expects for request { Object (query) } to extract values correctly"
        },
        {
          "id": "68",
          "name": "Get fitting error if body type contains invalid type"
        },
        {
          "id": "69",
          "name": "Get fitting error if body contains a Buffer"
        },
        {
          "id": "70",
          "name": "Should properly extract variables from url"
        },
        {
          "id": "71",
          "name": "Should properly extract query from body for graphql request"
        },
        {
          "id": "72",
          "name": "Should read body even if url is not set"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport {\n    extractInformationFromBody,\n    extractInformationFromRequest,\n    extractInformationFromUrlParameters,\n} from 'src'\nimport { describe, expect, test } from 'vitest'\nimport {\n    usersRequest,\n    usersRequestWithoutOperationName,\n    usersRequestWithoutVariables,\n} from '../ExampleSchemas'\nimport { generateGetParametersFromGraphQLRequestInfo } from '../TestHelpers'\n\ndescribe('Test that request information is extracted correctly from url parameters', () => {\n    test.each`\n        request                             | expectedQuery                             | expectedVariables                                             | expectedOperationName\n        ${usersRequest}                     | ${usersRequest.query}                     | ${JSON.stringify(usersRequest.variables)}                     | ${usersRequest.operationName}\n        ${usersRequestWithoutOperationName} | ${usersRequestWithoutOperationName.query} | ${JSON.stringify(usersRequestWithoutOperationName.variables)} | ${usersRequestWithoutOperationName.operationName}\n        ${usersRequestWithoutVariables}     | ${usersRequestWithoutVariables.query}     | ${usersRequestWithoutVariables.variables}                     | ${usersRequestWithoutVariables.operationName}\n    `(\n        'expects for request $request to extract values correctly',\n        ({\n            request,\n            expectedQuery,\n            expectedVariables,\n            expectedOperationName,\n        }) => {\n            const requestUrl = `http://doesnotmatter.com/graphql?${generateGetParametersFromGraphQLRequestInfo(request)}`\n            const result = extractInformationFromUrlParameters(requestUrl)\n            expect(result.query).toBe(expectedQuery)\n            expect(result.variables).toBe(expectedVariables)\n            expect(result.operationName).toBe(expectedOperationName)\n        },\n    )\n})\n\ntest('Get fitting error if body type contains invalid type', () => {\n    const request = {\n        body: true,\n        headers: {},\n        method: 'POST',\n        url: 'doesnotmatter',\n    }\n    const response = extractInformationFromBody(request)\n    expect(response.error?.graphQLError.message).toBe(\n        'POST body contains invalid type boolean. Only \"object\" and \"string\" are supported.',\n    )\n})\n\ntest('Get fitting error if body contains a Buffer', () => {\n    const request = {\n        body: Buffer.alloc(3),\n        headers: {},\n        url: 'doesnotmatter',\n    }\n    const response = extractInformationFromBody(request)\n    expect(response.error?.graphQLError.message).toBe(\n        'Cannot extract information from body because it contains an object buffer!',\n    )\n})\n\ntest('Should properly extract variables from url', () => {\n    const request = {\n        body: { query: 'doesnotmatter' },\n        headers: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            'content-type': 'application/json',\n        },\n        url: '/graphql?query=mutation&variables=findme',\n    }\n    const response = extractInformationFromRequest(request)\n    expect(response.variables).toBe('findme')\n})\n\ntest('Should properly extract query from body for graphql request', () => {\n    const request = {\n        body: { query: 'findTheQuery' },\n        headers: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            'content-type': 'application/graphql',\n        },\n        url: 'pengpeng',\n    }\n    const response = extractInformationFromRequest(request)\n    expect(response.query).toBe('{\"query\":\"findTheQuery\"}')\n})\n\ntest('Should read body even if url is not set', () => {\n    const request = {\n        body: { query: 'findTheQuery' },\n        headers: {\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            'content-type': 'application/graphql',\n        },\n    }\n    const response = extractInformationFromRequest(request)\n    expect(response.query).toBe('{\"query\":\"findTheQuery\"}')\n})\n"
    },
    "tests/logger/JsonLogger.test.ts": {
      "tests": [
        {
          "id": "73",
          "name": "Creating a Logger should work with default options"
        },
        {
          "id": "74",
          "name": "Debug entry should be written if debug is enabled"
        },
        {
          "id": "75",
          "name": "Debug entry should not be written if debug is disabled"
        },
        {
          "id": "76",
          "name": "Error entry should be written"
        },
        {
          "id": "77",
          "name": "Info entry should be written"
        },
        {
          "id": "78",
          "name": "Warn entry should be written"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { testDateFunction, testDateString } from '@dreamit/funpara'\nimport {\n    JsonLogger,\n    LogEntry,\n    LogEntryInput,\n    LogLevel,\n    NoStacktraceJsonLogger,\n} from 'src'\nimport { expect, test } from 'vitest'\nimport { JsonTestLogger, NO_CONSOLE } from '../TestHelpers'\n\nexport class NoStacktraceJsonTestLogger extends NoStacktraceJsonLogger {\n    logEntries: Array<LogEntry> = new Array<LogEntry>()\n\n    constructor(debugEnabled = false) {\n        super(\n            'test-logger',\n            'myTestService',\n            debugEnabled,\n            undefined,\n            undefined,\n            NO_CONSOLE,\n        )\n    }\n\n    createLogEntry(logEntryInput: LogEntryInput): LogEntry {\n        const logEntry = super.createLogEntry(logEntryInput)\n        logEntry.timestamp = testDateString\n        this.logEntries.push(logEntry)\n        return logEntry\n    }\n}\n\ntest('Creating a Logger should work with default options', () => {\n    for (const logger of [\n        new JsonLogger('test-logger', 'test-service'),\n        new NoStacktraceJsonLogger('test-logger', 'test-service'),\n    ]) {\n        expect(logger.debugEnabled).toBe(false)\n        expect(logger.truncateLimit).toBe(0)\n        expect(logger.truncatedText).toBe('_TRUNCATED_')\n    }\n})\n\ntest.each([new JsonTestLogger(true), new NoStacktraceJsonTestLogger(true)])(\n    'Debug entry should be written if debug is enabled',\n    (debugLogger: JsonTestLogger | NoStacktraceJsonTestLogger) => {\n        debugLogger.debug('test', undefined, testDateFunction)\n        const logEntry = debugLogger.logEntries.at(0)\n        expect(logEntry?.message).toBe('test')\n        expect(logEntry?.level).toBe(LogLevel.debug)\n    },\n)\n\ntest.each([new JsonTestLogger(), new NoStacktraceJsonTestLogger()])(\n    'Debug entry should not be written if debug is disabled',\n    (defaultLogger: JsonTestLogger | NoStacktraceJsonTestLogger) => {\n        defaultLogger.debug('test')\n        expect(defaultLogger.logEntries.length).toBe(0)\n    },\n)\n\ntest.each([new JsonTestLogger(), new NoStacktraceJsonTestLogger()])(\n    'Error entry should be written',\n    (defaultLogger: JsonTestLogger | NoStacktraceJsonTestLogger) => {\n        const testError = new Error('error')\n        testError.stack = 'stacktrace'\n        defaultLogger.error(\n            'error',\n            testError,\n            'custom',\n            undefined,\n            testDateFunction,\n        )\n        const createdLogEntry = defaultLogger.logEntries.at(0)\n        expect(createdLogEntry?.level).toBe(LogLevel.error)\n        expect(createdLogEntry?.message).toBe('error error')\n        expect(createdLogEntry?.errorName).toBe('custom')\n        expect(createdLogEntry?.stacktrace).toBe(\n            defaultLogger instanceof NoStacktraceJsonTestLogger\n                ? undefined\n                : 'stacktrace',\n        )\n    },\n)\n\ntest.each([new JsonTestLogger(), new NoStacktraceJsonTestLogger()])(\n    'Info entry should be written',\n    (defaultLogger: JsonTestLogger | NoStacktraceJsonTestLogger) => {\n        defaultLogger.info('info', undefined, testDateFunction)\n        const createdLogEntry = defaultLogger.logEntries.at(0)\n        expect(createdLogEntry?.level).toBe(LogLevel.info)\n        expect(createdLogEntry?.message).toBe('info')\n    },\n)\n\ntest.each([new JsonTestLogger(), new NoStacktraceJsonTestLogger()])(\n    'Warn entry should be written',\n    (defaultLogger: JsonTestLogger | NoStacktraceJsonTestLogger) => {\n        defaultLogger.warn('warn', undefined, testDateFunction)\n        const createdLogEntry = defaultLogger.logEntries.at(0)\n        expect(createdLogEntry?.level).toBe(LogLevel.warn)\n        expect(createdLogEntry?.message).toBe('warn')\n    },\n)\n"
    },
    "tests/server/DefaultGraphQLServerOptions.test.ts": {
      "tests": [
        {
          "id": "79",
          "name": "Creating DefaultGraphQLServerOptions should provide useful defaults"
        },
        {
          "id": "80",
          "name": "defaultFormatErrorFunction should return the expected formatted error"
        },
        {
          "id": "81",
          "name": "defaultContextFunction should return the expected formatted error"
        },
        {
          "id": "82",
          "name": "defaultExtensions should return undefined"
        },
        {
          "id": "83",
          "name": "defaultCollectErrorMetrics should log a debug message if logger is available"
        },
        {
          "id": "84",
          "name": "defaultOnlyQueryInGetRequestsResponse should return the expected execution result"
        }
      ],
      "source": "import { GraphQLError } from 'graphql'\nimport {\n    DefaultGraphQLServerOptions,\n    defaultCollectErrorMetrics,\n    defaultContextFunction,\n    defaultExtensions,\n    defaultFormatErrorFunction,\n    defaultOnlyQueryInGetRequestsResponse,\n} from 'src'\nimport { expect, test } from 'vitest'\nimport { JSON_CT_HEADER, JsonTestLogger } from '../TestHelpers'\n\ntest('Creating DefaultGraphQLServerOptions should provide useful defaults', () => {\n    const defaultGraphqlServerOptions = new DefaultGraphQLServerOptions()\n    expect(defaultGraphqlServerOptions.customValidationRules).toStrictEqual([])\n    expect(defaultGraphqlServerOptions.removeValidationRecommendations).toBe(\n        true,\n    )\n    expect(defaultGraphqlServerOptions.reassignAggregateError).toBe(false)\n})\n\ntest('defaultFormatErrorFunction should return the expected formatted error', () => {\n    expect(\n        defaultFormatErrorFunction(new GraphQLError('An error', {})),\n    ).toStrictEqual({\n        message: 'An error',\n    })\n})\n\ntest.each([undefined, new JsonTestLogger(true)])(\n    'defaultContextFunction should return the expected formatted error',\n    (logger: JsonTestLogger | undefined) => {\n        expect(\n            defaultContextFunction({\n                request: {\n                    headers: JSON_CT_HEADER,\n                },\n                serverOptions: {\n                    logger,\n                },\n            }),\n        ).toStrictEqual({ headers: JSON_CT_HEADER })\n\n        if (logger) {\n            expect(logger.logEntries.at(0)?.message).toBe(\n                'Calling defaultRequestResponseContextFunction with request [object Object] and response undefined',\n            )\n        }\n    },\n)\n\ntest.each([undefined, new JsonTestLogger(true)])(\n    'defaultExtensions should return undefined',\n    (logger: JsonTestLogger | undefined) => {\n        expect(\n            defaultExtensions({\n                executionResult: {},\n                requestInformation: {},\n                serverOptions: {\n                    logger,\n                },\n            }),\n        ).toBeUndefined()\n\n        if (logger) {\n            expect(logger.logEntries.at(0)?.message).toBe(\n                'Calling defaultExtensions for requestInfo {} and executionResult {}',\n            )\n        }\n    },\n)\n\ntest.each([undefined, new JsonTestLogger(true)])(\n    'defaultCollectErrorMetrics should log a debug message if logger is available',\n    (logger: JsonTestLogger | undefined) => {\n        expect(\n            defaultCollectErrorMetrics({\n                error: undefined,\n                errorName: 'test',\n                serverOptions: {\n                    logger,\n                },\n            }),\n        ).toBeUndefined()\n\n        if (logger) {\n            expect(logger.logEntries.at(0)?.message).toBe(\n                'Calling defaultCollectErrorMetrics with error undefined and errorName test',\n            )\n        }\n    },\n)\n\ntest('defaultOnlyQueryInGetRequestsResponse should return the expected execution result', () => {\n    expect(defaultOnlyQueryInGetRequestsResponse('POST')).toStrictEqual({\n        customHeaders: { allow: 'POST' },\n        executionResult: {\n            errors: [\n                new GraphQLError(\n                    'Only \"query\" operation is allowed in \"GET\" requests.' +\n                        ' Got: \"POST\"',\n                    {},\n                ),\n            ],\n        },\n        statusCode: 405,\n    })\n})\n"
    },
    "tests/response/CustomSendResponse.integration.test.ts": {
      "tests": [
        {
          "id": "85",
          "name": "Should return value from context instead of user data"
        },
        {
          "id": "86",
          "name": "Should return error if context serviceName is different as graphql server serviceName"
        }
      ],
      "source": "/* eslint-disable @typescript-eslint/naming-convention */\nimport { ResponseParameters } from '@dreamit/graphql-server-base'\nimport { Buffer } from 'node:buffer'\nimport { GraphQLServer } from 'src'\nimport { expect, test } from 'vitest'\nimport {\n    returnErrorQuery,\n    userSchema,\n    userSchemaResolvers,\n    usersQuery,\n} from '../ExampleSchemas'\nimport {\n    INITIAL_GRAPHQL_SERVER_OPTIONS,\n    NO_LOGGER,\n    StandaloneGraphQLServerResponse,\n    sendRequest,\n} from '../TestHelpers'\n\nconst customGraphQLServer = new GraphQLServer(INITIAL_GRAPHQL_SERVER_OPTIONS)\nconst standaloneGraphQLServerResponse = new StandaloneGraphQLServerResponse()\n\ntest('Should return value from context instead of user data ', async () => {\n    customGraphQLServer.setOptions({\n        contextFunction: () => {\n            return {\n                customText: 'customResponse',\n                serviceName: 'myRemoteService',\n            }\n        },\n        logger: NO_LOGGER,\n        reassignAggregateError: false,\n        rootValue: userSchemaResolvers,\n        schema: userSchema,\n        sendResponse: customSendResponse,\n    })\n\n    await sendRequest(\n        customGraphQLServer,\n        standaloneGraphQLServerResponse,\n        `{\"query\":\"${usersQuery}\"}`,\n    )\n    const responseObject = standaloneGraphQLServerResponse.getLastResponse()\n    expect(responseObject).toStrictEqual('\"customResponse\"')\n})\n\ntest(\n    'Should return error if context serviceName' +\n        ' is different as graphql server serviceName',\n    async () => {\n        customGraphQLServer.setOptions({\n            contextFunction: ({ serverOptions }) => {\n                if (serverOptions.logger) {\n                    serverOptions.logger.info(\n                        'Calling requestResponseContextFunction in test',\n                    )\n                }\n                return {\n                    serviceName: 'myTestServiceAlternative',\n                }\n            },\n            logger: NO_LOGGER,\n            reassignAggregateError: false,\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n\n        await sendRequest(\n            customGraphQLServer,\n            standaloneGraphQLServerResponse,\n            `{\"query\":\"${returnErrorQuery}\"}`,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.extensions).toBeUndefined()\n        expect(responseBody.errors[0].message).toBe('Something went wrong!')\n    },\n)\n\nfunction customSendResponse(responseParameters: ResponseParameters): void {\n    const { context, executionResult, response, statusCode } =\n        responseParameters\n    if (statusCode) {\n        response.statusCode = statusCode\n    }\n    response.setHeader('Content-Type', 'application/json; charset=utf-8')\n    const contextRecord = context as Record<string, unknown>\n    if (contextRecord && contextRecord.customText) {\n        response.end(\n            Buffer.from(JSON.stringify(contextRecord.customText), 'utf8'),\n        )\n    } else {\n        response.end(Buffer.from(JSON.stringify(executionResult), 'utf8'))\n    }\n}\n"
    },
    "tests/reassign.integration.test.ts": {
      "tests": [
        {
          "id": "87",
          "name": "Should reassign AggregateError to original errors field when reassignAggregateError is enabled"
        }
      ],
      "source": "/* eslint-disable @typescript-eslint/naming-convention */\nimport { ExecutionResult } from 'graphql'\nimport { PromiseOrValue } from 'graphql/jsutils/PromiseOrValue'\nimport { GraphQLServer } from 'src'\nimport { expect, test } from 'vitest'\nimport {\n    multipleErrorResponse,\n    userQuery,\n    userSchema,\n    userSchemaResolvers,\n} from './ExampleSchemas'\nimport {\n    NO_LOGGER,\n    StandaloneGraphQLServerResponse,\n    sendRequest,\n} from './TestHelpers'\n\nconst standaloneGraphQLServerResponse = new StandaloneGraphQLServerResponse()\n\n/*\n * Reassign test is located in this separate test as it seems to get in conflict with the\n * matching \"reassignAggregateError disabled\" test depending on the execution order and speed.\n */\ntest(\n    'Should reassign AggregateError to original errors field' +\n        ' when reassignAggregateError is enabled',\n    async () => {\n        const customGraphQLServer = new GraphQLServer({\n            executeFunction: (): PromiseOrValue<ExecutionResult> =>\n                multipleErrorResponse,\n            logger: NO_LOGGER,\n            reassignAggregateError: true,\n            rootValue: userSchemaResolvers,\n            schema: userSchema,\n        })\n\n        await sendRequest(\n            customGraphQLServer,\n            standaloneGraphQLServerResponse,\n            `{\"query\":\"${userQuery}\"}`,\n        )\n        const responseBody =\n            standaloneGraphQLServerResponse.getLastResponseAsObject()\n        expect(responseBody.errors[0].message).toBe('The first error!')\n        expect(responseBody.errors[1].message).toBe('The second error!')\n    },\n)\n"
    },
    "tests/logger/TruncateLogMessage.test.ts": {
      "tests": [
        {
          "id": "88",
          "name": "expects the log message to be truncated correctly for given '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' , undefined and undefined"
        },
        {
          "id": "89",
          "name": "expects the log message to be truncated correctly for given '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' , undefined and 20"
        },
        {
          "id": "90",
          "name": "expects the log message to be truncated correctly for given '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' , '_TRUNC_' and 20"
        },
        {
          "id": "91",
          "name": "expects the log message to be truncated correctly for given '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' , '_TRUNC_' and 7"
        },
        {
          "id": "92",
          "name": "expects the log message to be truncated correctly for given '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' , undefined and 2"
        },
        {
          "id": "93",
          "name": "expects the log message to be truncated correctly for given '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' , undefined and 2000"
        },
        {
          "id": "94",
          "name": "expects the log message to be truncated correctly for given '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' , undefined and 48"
        },
        {
          "id": "95",
          "name": "expects the log message to be truncated correctly for given '{\"stack\":\"Error: 14 UNAVAILABLE: No c…' , undefined and 47"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { LogLevel, truncateLogMessage } from 'src'\nimport { expect, test } from 'vitest'\n\nconst timeoutMessage =\n    '{\"stack\":\"Error: 14 UNAVAILABLE: No connection established}'\n\ntest.each`\n    message           | truncatedText | truncateLimit | expectedLogMessage\n    ${timeoutMessage} | ${undefined}  | ${undefined}  | ${`${timeoutMessage}`}\n    ${timeoutMessage} | ${undefined}  | ${20}         | ${'{\"stack\":_TRUNCATED_'}\n    ${timeoutMessage} | ${'_TRUNC_'}  | ${20}         | ${'{\"stack\":\"Err_TRUNC_'}\n    ${timeoutMessage} | ${'_TRUNC_'}  | ${7}          | ${'{\"stack'}\n    ${timeoutMessage} | ${undefined}  | ${2}          | ${'{\"'}\n    ${timeoutMessage} | ${undefined}  | ${2000}       | ${`${timeoutMessage}`}\n    ${timeoutMessage} | ${undefined}  | ${48}         | ${`${timeoutMessage}`}\n    ${timeoutMessage} | ${undefined}  | ${47}         | ${'{\"stack\":\"Error: 14 UNAVAILABLE: No _TRUNCATED_'}\n`(\n    'expects the log message to be truncated correctly for given $message , $truncatedText and $truncateLimit',\n    ({ message, truncatedText, truncateLimit, expectedLogMessage }) => {\n        const logEntry = truncateLogMessage(\n            {\n                level: LogLevel.info,\n                logger: 'test-logger',\n                message,\n                serviceName: 'test-service',\n                timestamp: 'doesnotmatter',\n            },\n            truncateLimit,\n            truncatedText,\n        )\n        expect(logEntry.message).toBe(expectedLogMessage)\n    },\n)\n"
    },
    "tests/error/DetermineValidationOrIntrospectionDisabledError.test.ts": {
      "tests": [
        {
          "id": "96",
          "name": "Correctly determine if error Error: GraphQL introspection is disabled is a validation or an introspection error undefined"
        },
        {
          "id": "97",
          "name": "Correctly determine if error Error: Unknown directive \"__Directive\" is a validation or an introspection error undefined"
        },
        {
          "id": "98",
          "name": "Correctly determine if error Error: I am a Validation error is a validation or an introspection error undefined"
        },
        {
          "id": "99",
          "name": "Correctly determine if error Error is a validation or an introspection error undefined"
        },
        {
          "id": "100",
          "name": "Correctly determine if error Error: introspection is a validation or an introspection error undefined"
        },
        {
          "id": "101",
          "name": "Correctly determine if error Error: disabled is a validation or an introspection error undefined"
        },
        {
          "id": "102",
          "name": "Correctly determine if error 'String and not an Error!' is a validation or an introspection error undefined"
        }
      ],
      "source": "/* eslint-disable unicorn/error-message */\nimport {\n    INTROSPECTION_DISABLED_ERROR,\n    VALIDATION_ERROR,\n} from '@dreamit/graphql-server-base'\nimport { determineValidationOrIntrospectionDisabledError } from 'src'\nimport { expect, test } from 'vitest'\n\nconst introspectionDisabledMessage = 'GraphQL introspection is disabled'\nconst unknownDirectiveMessage = 'Unknown directive \"__Directive\"'\nconst validationErrorMessage = 'I am a Validation error'\n\ntest.each`\n    error                                      | expectedErrorType\n    ${new Error(introspectionDisabledMessage)} | ${INTROSPECTION_DISABLED_ERROR}\n    ${new Error(unknownDirectiveMessage)}      | ${INTROSPECTION_DISABLED_ERROR}\n    ${new Error(validationErrorMessage)}       | ${VALIDATION_ERROR}\n    ${new Error('')}                           | ${VALIDATION_ERROR}\n    ${new Error('introspection')}              | ${VALIDATION_ERROR}\n    ${new Error('disabled')}                   | ${VALIDATION_ERROR}\n    ${'String and not an Error!'}              | ${VALIDATION_ERROR}\n`(\n    'Correctly determine if error $error is a validation or an introspection error $truncateLimit',\n    ({ error, expectedErrorType }) => {\n        expect(determineValidationOrIntrospectionDisabledError(error)).toBe(\n            expectedErrorType,\n        )\n    },\n)\n"
    },
    "tests/response/getFirstErrorFromExecutionResult.test.ts": {
      "tests": [
        {
          "id": "103",
          "name": "Should get first error from ExecutionResult"
        },
        {
          "id": "104",
          "name": "Should return error message if no error is available when calling getFirstErrorFromExecutionResult"
        },
        {
          "id": "105",
          "name": "Should return error message if execution result has an empty error array when calling getFirstErrorFromExecutionResult"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { GraphQLError } from 'graphql'\nimport { getFirstErrorFromExecutionResult } from 'src'\nimport { expect, test } from 'vitest'\n\ntest('Should get first error from ExecutionResult', () => {\n    const result = getFirstErrorFromExecutionResult({\n        executionResult: {\n            errors: [\n                new GraphQLError('First error', {}),\n                new GraphQLError('Second error', {}),\n            ],\n        },\n    })\n    expect(result.message).toBe('First error')\n})\n\ntest(\n    'Should return error message if no error is available when ' +\n        'calling getFirstErrorFromExecutionResult',\n    () => {\n        const result = getFirstErrorFromExecutionResult({\n            executionResult: {\n                data: { response: 'doesnotmatter' },\n            },\n        })\n        expect(result.message).toBe('No error found in ExecutionResult!')\n    },\n)\n\ntest(\n    'Should return error message if execution result has an empty error array ' +\n        'when calling getFirstErrorFromExecutionResult',\n    () => {\n        const result = getFirstErrorFromExecutionResult({\n            executionResult: {\n                errors: [],\n            },\n        })\n        expect(result.message).toBe('No error found in ExecutionResult!')\n    },\n)\n"
    },
    "tests/error/DetermineGraphQLOrFetchError.test.ts": {
      "tests": [
        {
          "id": "106",
          "name": "Correctly determine if error 'ECONNREFUSED' is a GraphQLError or FetchError 'FetchError'"
        },
        {
          "id": "107",
          "name": "Correctly determine if error 'ECONNRESET' is a GraphQLError or FetchError 'FetchError'"
        },
        {
          "id": "108",
          "name": "Correctly determine if error 'ETIMEDOUT' is a GraphQLError or FetchError 'FetchError'"
        },
        {
          "id": "109",
          "name": "Correctly determine if error 'network timeout' is a GraphQLError or FetchError 'FetchError'"
        },
        {
          "id": "110",
          "name": "Correctly determine if error 'invalid redirect URL' is a GraphQLError or FetchError 'FetchError'"
        },
        {
          "id": "111",
          "name": "Correctly determine if error 'uri requested responds with a redirec…' is a GraphQLError or FetchError 'FetchError'"
        },
        {
          "id": "112",
          "name": "Correctly determine if error 'maximum redirect reached' is a GraphQLError or FetchError 'FetchError'"
        },
        {
          "id": "113",
          "name": "Correctly determine if error 'Cannot follow redirect' is a GraphQLError or FetchError 'FetchError'"
        },
        {
          "id": "114",
          "name": "Correctly determine if error 'socket hang up' is a GraphQLError or FetchError 'FetchError'"
        },
        {
          "id": "115",
          "name": "Correctly determine if error 'fetch failed' is a GraphQLError or FetchError 'FetchError'"
        },
        {
          "id": "116",
          "name": "Correctly determine if error 'I am a GraphQLError' is a GraphQLError or FetchError 'GraphQLError'"
        }
      ],
      "source": "/* eslint-disable unicorn/error-message */\nimport { FETCH_ERROR, GRAPHQL_ERROR } from '@dreamit/graphql-server-base'\nimport { determineGraphQLOrFetchError } from 'src'\nimport { expect, test } from 'vitest'\n\nconst redirectedErrorMessage =\n    'uri requested responds with a redirect, redirect mode is set to error'\n\ntest.each`\n    errorMessage                  | expectedErrorName\n    ${'ECONNREFUSED'}             | ${FETCH_ERROR}\n    ${'ECONNRESET'}               | ${FETCH_ERROR}\n    ${'ETIMEDOUT'}                | ${FETCH_ERROR}\n    ${'network timeout'}          | ${FETCH_ERROR}\n    ${'invalid redirect URL'}     | ${FETCH_ERROR}\n    ${redirectedErrorMessage}     | ${FETCH_ERROR}\n    ${'maximum redirect reached'} | ${FETCH_ERROR}\n    ${'Cannot follow redirect'}   | ${FETCH_ERROR}\n    ${'socket hang up'}           | ${FETCH_ERROR}\n    ${'fetch failed'}             | ${FETCH_ERROR}\n    ${'I am a GraphQLError'}      | ${GRAPHQL_ERROR}\n`(\n    'Correctly determine if error $errorMessage is a GraphQLError or FetchError $expectedErrorName',\n    ({ errorMessage, expectedErrorName }) => {\n        expect(determineGraphQLOrFetchError(new Error(errorMessage))).toBe(\n            expectedErrorName,\n        )\n    },\n)\n"
    },
    "tests/response/SendResponse.test.ts": {
      "tests": [
        {
          "id": "117",
          "name": "Should use default response.end behavior if no responseEndChunkFunction if defined"
        }
      ],
      "source": "/* eslint-disable @typescript-eslint/naming-convention */\nimport { GraphQLError, GraphQLFormattedError } from 'graphql'\nimport { sendResponse } from 'src'\nimport { expect, test } from 'vitest'\nimport { NO_LOGGER, StandaloneGraphQLServerResponse } from '../TestHelpers'\n\nconst standaloneGraphQLServerResponse = new StandaloneGraphQLServerResponse()\n\ntest('Should use default response.end behavior if no responseEndChunkFunction if defined', () => {\n    sendResponse({\n        context: undefined,\n        executionResult: {\n            data: { message: 'Did work!' },\n        },\n        formatErrorFunction: function (\n            error: GraphQLError,\n        ): GraphQLFormattedError {\n            return error\n        },\n        logger: NO_LOGGER,\n        response: standaloneGraphQLServerResponse,\n        statusCode: 401,\n    })\n\n    const lastResponse =\n        standaloneGraphQLServerResponse.getLastResponseAsObject()\n    expect(lastResponse.data.message).toStrictEqual('Did work!')\n    expect(standaloneGraphQLServerResponse.statusCode).toBe(401)\n    expect(standaloneGraphQLServerResponse.headers.get('Content-Type')).toBe(\n        'application/json; charset=utf-8',\n    )\n})\n"
    },
    "tests/metrics/IncreaseFetchOrGraphQLErrorMetric.test.ts": {
      "tests": [
        {
          "id": "118",
          "name": "Test that increaseFetchOrGraphQLErrorMetric does not throw an error logs a debug message if a logger is defined"
        }
      ],
      "source": "import {\n    GraphQLServerOptions,\n    defaultCollectErrorMetrics,\n    increaseFetchOrGraphQLErrorMetric,\n} from 'src'\nimport { expect, test } from 'vitest'\nimport { JsonTestLogger } from '../TestHelpers'\n\ntest.each([\n    {},\n    { collectErrorMetricsFunction: defaultCollectErrorMetrics },\n    { logger: new JsonTestLogger(true) },\n    {\n        collectErrorMetricsFunction: defaultCollectErrorMetrics,\n        logger: new JsonTestLogger(true),\n    },\n])(\n    'Test that increaseFetchOrGraphQLErrorMetric does not throw an error' +\n        ' logs a debug message if a logger is defined',\n    (serverOptions: GraphQLServerOptions) => {\n        expect(\n            increaseFetchOrGraphQLErrorMetric(undefined, serverOptions, {}),\n        ).toBe(undefined)\n        const { logger } = serverOptions\n\n        if (logger && logger instanceof JsonTestLogger) {\n            expect(logger.logEntries.at(0)?.message).toBe(\n                'Calling increaseFetchOrGraphQLErrorMetric with error undefined and errorIsFetch false',\n            )\n        }\n    },\n)\n"
    },
    "tests/logger/CreateTimestamp.test.ts": {
      "tests": [
        {
          "id": "119",
          "name": "CreateTimestamp should create timestamp in ISO format"
        },
        {
          "id": "120",
          "name": "CreateISOTimestamp should create timestamp in ISO format"
        }
      ],
      "source": "/* eslint-disable deprecation/deprecation */\nimport { testDateFunction, testDateString } from '@dreamit/funpara'\nimport { createISOTimestamp, createTimestamp } from 'src'\nimport { expect, test } from 'vitest'\n\ntest('CreateTimestamp should create timestamp in ISO format', () => {\n    expect(createTimestamp()).toBeTruthy()\n    expect(createTimestamp(new Date('2022-02-01T00:00:00.000Z'))).toBe(\n        '2022-02-01T00:00:00.000Z',\n    )\n})\n\ntest('CreateISOTimestamp should create timestamp in ISO format', () => {\n    expect(createISOTimestamp()).toBeTruthy()\n    expect(createISOTimestamp(testDateFunction)).toBe(testDateString)\n})\n"
    },
    "tests/logger/NoLogger.test.ts": {
      "tests": [
        {
          "id": "121",
          "name": "Should be able to use NoLogger without running into errors"
        }
      ],
      "source": "/* eslint-disable max-len */\nimport { NoLogger } from 'src'\nimport { expect, test } from 'vitest'\n\ntest('Should be able to use NoLogger without running into errors', () => {\n    const logger = new NoLogger('no-logger', 'no-service')\n    expect(logger.debugEnabled).toBe(false)\n    const testMessage = 'Test message'\n\n    // Then\n    expect(() => logger.debug(testMessage)).not.toThrowError()\n    expect(() =>\n        logger.error(testMessage, new Error(testMessage)),\n    ).not.toThrowError()\n    expect(() => logger.info(testMessage)).not.toThrowError()\n    expect(() => logger.warn(testMessage)).not.toThrowError()\n})\n"
    },
    "tests/request/GetContentType.test.ts": {
      "tests": [
        {
          "id": "122",
          "name": "Should get unknown content type if no content type is provided"
        }
      ],
      "source": "import { ContentType } from '@dreamit/graphql-server-base'\nimport { getContentType } from 'src'\nimport { expect, test } from 'vitest'\n\ntest('Should get unknown content type if no content type is provided', () => {\n    expect(getContentType()).toBe(ContentType.unknown)\n})\n"
    }
  },
  "projectRoot": "C:\\ws_nodejs\\graphql-server",
  "config": {
    "$schema": "./node_modules/@stryker-mutator/core/schema/stryker-schema.json",
    "_comment": "This config was generated using 'stryker init'. Please take a look at: https://stryker-mutator.io/docs/stryker-js/configuration/ for more information.",
    "packageManager": "npm",
    "reporters": [
      "html",
      "clear-text",
      "progress"
    ],
    "testRunner": "vitest",
    "testRunner_comment": "Take a look at https://stryker-mutator.io/docs/stryker-js/vitest-runner for information about the vitest plugin.",
    "coverageAnalysis": "perTest",
    "buildCommand": "npm run build",
    "ignorers": [
      "log-ignore"
    ],
    "plugins": [
      "@stryker-mutator/*",
      "@sgohlke/stryker-log-ignorer"
    ],
    "logignore": {
      "objectNames": [
        "logger"
      ]
    },
    "ignoreStatic": true,
    "incremental": true,
    "incrementalFile": "stryker-incremental.json",
    "allowConsoleColors": true,
    "checkers": [],
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "clearTextReporter": {
      "allowColor": true,
      "allowEmojis": false,
      "logTests": true,
      "maxTestsToLog": 3,
      "reportTests": true,
      "reportMutants": true,
      "reportScoreTable": true,
      "skipFull": false
    },
    "dashboard": {
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "dryRunOnly": false,
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "ignorePatterns": [],
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutate": [
      "{src,lib}/**/!(*.+(s|S)pec|*.+(t|T)est).+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)",
      "!{src,lib}/**/__tests__/**/*.+(cjs|mjs|js|ts|mts|cts|jsx|tsx|html|vue|svelte)"
    ],
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "appendPlugins": [],
    "htmlReporter": {
      "fileName": "reports/mutation/mutation.html"
    },
    "jsonReporter": {
      "fileName": "reports/mutation/mutation.json"
    },
    "disableTypeChecks": true,
    "symlinkNodeModules": true,
    "tempDirName": ".stryker-tmp",
    "cleanTempDir": true,
    "testRunnerNodeArgs": [],
    "thresholds": {
      "high": 80,
      "low": 60,
      "break": null
    },
    "timeoutFactor": 1.5,
    "timeoutMS": 5000,
    "dryRunTimeoutMinutes": 5,
    "tsconfigFile": "tsconfig.json",
    "warnings": true,
    "disableBail": false,
    "allowEmpty": false,
    "vitest": {}
  },
  "framework": {
    "name": "StrykerJS",
    "version": "8.6.0",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "typescript": "5.6.3"
    }
  }
}